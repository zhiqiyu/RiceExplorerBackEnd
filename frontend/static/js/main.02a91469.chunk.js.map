{"version":3,"sources":["components/Header.jsx","features/phenology/appNameSlice.js","pages/Home.jsx","features/phenology/appStatusSlice.js","components/AppStatusBar.jsx","utils/constants.js","features/phenology/editingSlice.js","features/phenology/sampleSlice.js","components/panels/SamplePanel.jsx","components/LeafletMap.jsx","features/phenology/datasetSlice.js","components/DataFilterGroup.jsx","features/phenology/seasonSlice.js","components/SeasonFilterGroup.jsx","components/panels/FilterPanel.jsx","components/SplitPanel.jsx","features/phenology/csrfTokenSlice.js","pages/EmpiricalApp.jsx","components/MapCarousel.jsx","components/panels/MapPanel.jsx","components/panels/SettingsPanel.jsx","features/phenology/classificationSlice.js","components/panels/ClassificationPanel.jsx","App.js","utils/csrfToken.js","reportWebVitals.js","store.js","index.js"],"names":["Navbar","className","bg","variant","expand","fixed","Container","fluid","Brand","href","Toggle","Collapse","id","Nav","Link","to","as","NavLink","APP_NAME","empirical","phenology","classification","appNameSlice","createSlice","name","initialState","reducers","setAppName","state","action","payload","actions","Home","dispatch","useDispatch","useEffect","home","appStatusSlice","setStatus","AppStatusBar","props","status","useSelector","appStatus","seasonNames","districtList","dataList","radar","optical","featureList","VH","VV","NDVI","EVI","NDWI","MNDWI","BASEMAPS","url","attribution","editingSlice","toggle","sampleSlice","selected","geojson","type","features","classProperty","positiveValue","start_date","end_date","replace","addFeatures","push","deleteFeature","idx","findIndex","value","index","properties","idField","splice","selectFeature","setClassProperty","changePhenologyDate","SamplePanel","useState","chartData","setChartData","sampleState","samples","selected_sample","filter","f","latlon","geometry","coordinates","reverse","panToLatLng","geojsonLayer","eachLayer","layer","feature","openPopup","sample","curve_data","Object","entries","forEach","key","val","endsWith","words","split","date","Date","Number","parseInt","length","getTime","keys","sort","a","b","row","Array","fill","prepareChartData","setStyle","radius","fillColor","stroke","color","opacity","fillOpacity","Card","Body","width","height","chartType","loader","data","options","hAxis","title","format","vAxis","legend","position","rootProps","POSITIVE_STYLE","NEGATIVE_STYLE","SampleContainer","handleUploadFile","e","target","files","file","shp","arrayBuffer","i","L","geoJSON","pointToLayer","geoJsonPoint","latlng","circleMarker","onEachFeature","bindPopup","ReactDOMServer","renderToString","json","Table","striped","bordered","hover","map","maxHeight","maxWidth","addTo","setGeojsonLayer","addGeoJsonOverlay","Header","Button","size","htmlFor","onChange","onClick","console","log","json_blob","Blob","JSON","stringify","saveAs","Form","Select","disabled","field","k","Set","v","ListGroup","SampleItem","Item","handleSelectSample","active","style","backgroundColor","stopPropagation","removeLayer","handleDelete","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","default","iconUrl","shadowUrl","layerControlRef","tileOverlays","addTileOverlays","overlays","current","overlay","addOverlay","removeAllOverlays","lat","lng","panTo","InfoControl","info","parse","Map","appName","lcRef","useRef","setTimeout","invalidateSize","MapContainer","center","zoom","whenCreated","m","LayersControl","ref","basemap","BaseLayer","checked","TileLayer","datasetSlice","cloud","composite","composite_days","ascd","desc","boundary","boundary_file","crop_mask","phenology_start_date","phenology_end_date","update","changeDataSource","SatelliteDataFilters","datasetFilters","dataset","handleChange","Group","Row","controlId","Label","column","xs","Col","label","Control","min","max","step","Check","AuxDataFilters","required","URL","createObjectURL","SEASONS","sowing","peak","harvesting","fromEntries","season","on","start","end","SEASONSlice","SeasonFilterGroup","inputThres","readOnly","seasonFilter","seasons","charAt","toUpperCase","slice","sm","placeholder","tabNames","FilterPanel","setInfo","csrfToken","seasonFilters","editing","validated","setValidated","loading","setLoading","method","onSubmit","preventDefault","currentTarget","checkValidity","formData","FormData","jsonData","_","cloneDeep","append","axios","post","baseURL","process","headers","then","response","res_body","tile_url","download_url","area","toFixed","catch","reason","alert","noValidate","TabContainer","defaultActiveKey","unmountOnExit","eventKey","TabContent","TabPane","Spinner","animation","role","DropdownButton","onSelect","Dropdown","SplitPanel","csrfTokenSlice","setToken","EmpiricalApp","SmallMap","point","setMapObj","zoomControl","Marker","MapCarousel","selectedSample","smallMapObjs","setSmallMapObjs","values","newSmallMapObj","temp_date","getUTCFullYear","getUTCMonth","setUTCMonth","flexShrink","get","params","res","body","MapPanel","SettingsPanel","candidates","filteredCandidates","arr","first","d3","third","interquatile","upperbound","lowerbound","element","removeOutliers","mean","sum","std","Math","sqrt","pow","MODEL_SPECS","numberOfTrees","description","variablesPerSplit","minLeafPopulation","bagFraction","maxNodes","seed","classificationSlice","updateModelSpecs","model_specs","changeModel","model","ClassificationPanel","classificationState","startsWith","message","confusion_matrix","parsed","specName","ModelSpecItem","selectedModel","handleModelSpecChange","OverlayTrigger","trigger","placement","Popover","option","renderInput","App","location","useLocation","token","cookieValue","document","cookie","cookies","trim","substring","decodeURIComponent","getCookie","temp","pathname","currentName","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","csrfTokenReducer","datasetReducer","seasonReducer","sampleReducer","editingReducer","appStatusReducer","appNameReducer","classificationReducer","ReactDOM","render","StrictMode","basename","store","getElementById"],"mappings":"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","file":"static/js/main.02a91469.chunk.js","sourcesContent":["import { Container, Nav, Navbar } from 'react-bootstrap';\nimport { BrowserRouter, Link, NavLink, Route, Switch } from 'react-router-dom'\n\nexport default () => {\n  return (\n    <Navbar className=\"header\" bg=\"dark\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\n      <Container fluid>\n        <Navbar.Brand href=\"/\">Crop Mapping Explorer</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link to={\"/phenology\"} as={NavLink}>Phenology Explorer</Nav.Link>\n            <Nav.Link to={\"/empirical\"} as={NavLink}>Empirical Thresholding</Nav.Link>\n            <Nav.Link to={\"/classification\"} as={NavLink}>Classification</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  )\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const APP_NAME = {\n  \"home\": \"home\",\n  empirical: \"empirical\",\n  phenology: \"phenology\",\n  classification: \"classification\"\n}\n\nexport const appNameSlice = createSlice({\n  name: APP_NAME[\"home\"],\n  initialState: null,\n  reducers: {\n    setAppName: (state, action) => action.payload\n  }\n})\n\nexport const { setAppName } = appNameSlice.actions\n\nexport default appNameSlice.reducer","import { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { APP_NAME, setAppName } from \"../features/phenology/appNameSlice\"\n\nexport function Home() {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setAppName(APP_NAME.home))\n  }, [])\n\n  return (\n    <div>\n      <h1>Hello</h1>\n    </div>\n  )\n}\n\nexport default Home;","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const APP_STATUS = {\n  ready: \"Ready\",\n  running: \"Running...\",\n  finished: \"Finished\",\n}\n\nexport const appStatusSlice = createSlice({\n  name: \"appStatus\",\n  initialState: APP_STATUS.ready,\n  reducers: {\n    setStatus: (state, action) => action.payload\n  }\n})\n\nexport const { setStatus } = appStatusSlice.actions\n\nexport default appStatusSlice.reducer","import React, { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { APP_STATUS } from \"../features/phenology/appStatusSlice\";\n\n\nexport function AppStatusBar(props) {\n\n  const status = useSelector(state => state.appStatus)\n  \n  return (\n    <div\n      className=\"app-status-bar align-items-center d-flex position-absolute\"\n    >\n      <div className=\"d-flex\">\n        <h6 className=\"mb-0\">App Status: <b>{status}</b></h6>\n      </div>\n    </div>\n  )\n}\n\nexport default AppStatusBar;","export const seasonNames = [\"sowing\", \"peak\", \"harvesting\"]\n\nexport const districtList = {\n  \"upload\": \"Upload boundary file (shp)\",\n  \"MORANG\": \"MORANG\",\n  \"SUNSARI\": \"SUNSARI\",\n  \"JHAPA\": \"JHAPA\",\n  \"MAHOTTARI\": \"MAHOTTARI\",\n  \"PARSA\": \"PARSA\",\n  \"RAUTAHAT\": \"RAUTAHAT\",\n  \"SAPTARI\": \"SAPTARI\",\n  \"SARLAHI\": \"SARLAHI\",\n  \"SIRAHA\": \"SIRAHA\",\n  \"BARA\": \"BARA\",\n  \"DHANUSHA\": \"DHANUSHA\",\n  \"CHITAWAN\": \"CHITAWAN\",\n  \"NAWALPARASI_E\": \"NAWALPARASI_E\",\n  \"KAPILBASTU\": \"KAPILBASTU\",\n  \"NAWALPARASI_W\": \"NAWALPARASI_W\",\n  \"RUPANDEHI\": \"RUPANDEHI\",\n  \"BANKE\": \"BANKE\",\n  \"BARDIYA\": \"BARDIYA\",\n  \"DANG\": \"DANG\",\n  \"KAILALI\": \"KAILALI\",\n  \"KANCHANPUR\": \"KANCHANPUR\",\n};\n\nexport const dataList = {\n  radar: {\n    \"COPERNICUS/S1_GRD\":\n      \"Sentinel-1 SAR GRD: C-band Synthetic Aperture Radar Ground Range Detected, log scaling\",\n  },\n  optical: {\n    \"MODIS/006/MOD13Q1\":\n      \"MOD13Q1.006 Terra Vegetation Indices 16-Day Global 250m\",\n    \"LANDSAT/LT05/C01/T1_TOA\":\n      \"USGS Landsat 5 TM Collection 1 Tier 1 TOA Reflectance\",\n    \"LANDSAT/LT05/C01/T1_SR\": \"USGS Landsat 5 Surface Reflectance Tier 1\",\n    \"LANDSAT/LC08/C01/T1_TOA\":\n      \"USGS Landsat 8 Collection 1 Tier 1 TOA Reflectance\",\n    \"COPERNICUS/S2\": \"Sentinel-2 MSI: MultiSpectral Instrument, Level-1C\",\n    \"COPERNICUS/S2_SR\": \"Sentinel-2 MSI: MultiSpectral Instrument, Level-2A\",\n  },\n};\n\nexport const featureList = {\n  radar: {\n    VH: \"VH band\",\n    VV: \"VV band\",\n    \"VH/VV\": \"VH/VV (cross ratio)\",\n  },\n  optical: {\n    NDVI: \"NDVI\",\n    EVI: \"EVI\",\n    NDWI: \"NDWI\",\n    MNDWI: \"MNDWI\",\n  },\n};\n\n\n\nexport const BASEMAPS = {\n  \"Google Maps\": {\n    url: \"https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\",\n    attribution: \"Google\"\n  },\n  \"Google Satellite\": {\n    url: 'https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n    attribution: \"Google\"\n  },\n  \"Google Terrain\": {\n    url: \"https://mt1.google.com/vt/lyrs=p&x={x}&y={y}&z={z}\",\n    attribution: \"Google\",\n  },\n  \"ESRI World Imagery\": {\n    url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n    attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n  }\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\n\nexport const editingSlice = createSlice({\n  name: \"editing\",\n  initialState: false,\n  reducers: {\n    toggle: (state) => !state\n  }\n})\n\nexport const { toggle } = editingSlice.actions\n\nexport default editingSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\";\nimport { idField } from \"../../components/panels/SamplePanel\";\n\nconst initialState = {\n  selected: null,\n  geojson: {\n    type: \"FeatureCollection\",\n    features: [],\n  },\n  classProperty: {\n    name: null,\n    positiveValue: null,\n  },\n\n  phenology: {\n    start_date: \"2019-01\",\n    end_date: \"2019-12\",\n  },\n};\n\nexport const sampleSlice = createSlice({\n  name: \"samples\",\n  initialState,\n  reducers: {\n    replace: (state, action) => {\n      state.geojson = action.payload;\n      state.selected = null;\n      return state;\n    },\n    addFeatures: (state, action) => {\n      state.geojson.features.push(action.payload);\n      return state;\n    },\n    deleteFeature: (state, action) => {\n      let idx = state.geojson.features.findIndex((value, index) => {\n        return value.properties[idField] === action.payload;\n      });\n      state.geojson.features.splice(idx, 1);\n    },\n    selectFeature: (state, action) => {\n      state.selected = action.payload;\n    },\n    setClassProperty: (state, action) => {\n      state.classProperty = { ...state.classProperty, ...action.payload };\n    },\n    changePhenologyDate: (state, action) => {\n      state.phenology = { ...state.phenology, ...action.payload };\n    },\n  },\n});\n\nexport const {\n  replace,\n  addFeatures,\n  deleteFeature,\n  selectFeature,\n  setClassProperty,\n  changePhenologyDate,\n} = sampleSlice.actions;\n\nexport default sampleSlice.reducer;\n","import { useContext, useState } from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { Button, ButtonGroup, Card, Form, ListGroup, Table } from \"react-bootstrap\";\nimport shp from \"shpjs\";\nimport L from \"leaflet\";\nimport { map, layerControlRef, addTileOverlays, panToLatLng, geojsonLayer, setGeojsonLayer, addGeoJsonOverlay } from \"../LeafletMap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  replace,\n  addFeatures,\n  selectFeature,\n  setClassProperty,\n  deleteFeature\n} from \"../../features/phenology/sampleSlice\";\nimport { useEffect } from \"react\";\nimport Chart from \"react-google-charts\";\nimport _, { sample } from 'lodash'\nimport { FileEarmarkArrowUpFill, SaveFill, TrashFill, Upload } from \"react-bootstrap-icons\";\nimport { saveAs } from 'file-saver'\n\nconst json2table = (json) => {\n  return (\n    <Table striped bordered hover>\n      <thead>\n        <th>key</th>\n        <th>value</th>\n      </thead>\n      <tbody>\n        {Object.entries(json).map(([key, val]) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{val}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst prepareChartData = (sample) => {\n  let curve_data = {}\n  Object.entries(sample.properties).forEach(([key, val]) => {\n    if (key.endsWith('_feature')) {\n      let words = key.split('_')\n      let date = new Date(Number.parseInt(words[words.length - 2])).getTime()\n      curve_data[date] = val\n    }\n  })\n\n  if (Object.keys(curve_data).length === 0) {\n    return null\n  }\n\n  let chartData = [['date', 'value']]\n\n  Object.keys(curve_data).sort((a,b)=>Number.parseInt(a)-Number.parseInt(b)).forEach(date => {\n    let row = Array(chartData[0].length).fill(null)\n    row[0] = new Date(Number.parseInt(date))\n    row[1] = curve_data[date]\n    chartData.push(row)\n  })\n  \n  return chartData\n}\n\n// let geojsonLayer = null\n\nexport const idField = \"_$id\"\n\nexport default function SamplePanel() {\n  const [invalidFile, setInvalidFile] = useState(true);\n  const [chartData, setChartData] = useState(null);\n\n  // const [fieldState, setFieldState] = useState(null);\n  // const [positiveValueState, setPositiveValueState] = useState(null);\n\n  const sampleState = useSelector((state) => state.samples);\n  const dispatch = useDispatch();\n\n  // console.log(sampleState.geojson)\n  useEffect(() => {\n    if (typeof sampleState.selected === 'number') {\n      // console.log(sampleState.selected.geometry.coordinates.reverse())\n      let selected_sample = sampleState.geojson.features.filter(f => f.properties[idField] == sampleState.selected)[0]\n      let latlon = [...selected_sample.geometry.coordinates].reverse()\n      panToLatLng(latlon)\n      if (geojsonLayer) {\n        // geojsonLayer.openPopup(latlon)\n        // let a = L.geoJSON()\n        // a.eachLayer(layer => layer.fea)\n        geojsonLayer.eachLayer(layer => {\n          if (layer.feature.properties[idField] === sampleState.selected) {\n            layer.openPopup(latlon)\n          }\n        })\n      }\n      \n      setChartData(prepareChartData(selected_sample))\n    }\n  }, [sampleState.selected, sampleState.geojson])\n\n  useEffect(() => {\n    if (sampleState.classProperty.name === null) return;\n\n    geojsonLayer.eachLayer(layer => {\n      let geoJsonPoint = layer.feature;\n      if (geoJsonPoint.properties[sampleState.classProperty.name] == sampleState.classProperty.positiveValue) {\n        layer.setStyle({\n          radius: 3, \n          fillColor: \"red\", \n          stroke: 0.2,\n          color: \"black\",\n          opacity: 0.5,\n          fillOpacity: 1,\n        })\n      } else {\n        layer.setStyle({\n          radius: 3, \n          fillColor: \"blue\", \n          stroke: 0.2,\n          color: \"black\",\n          opacity: 0.5,\n          fillOpacity: 1\n        })\n      }\n    })\n\n  }, [sampleState.classProperty])\n\n  return (\n    <div className=\"sidebar h-100 d-flex flex-column\">\n      \n      <div className=\"sample-container px-2 pt-2\">\n        <SampleContainer />\n      </div>\n\n      <div className=\"chart-canvas p-2\">\n        <Card className=\"h-100 w-100\">\n          <Card.Body className=\"p-2\">\n          {chartData ?\n            <Chart \n              width=\"100%\" \n              height=\"90%\" \n              chartType=\"LineChart\" \n              loader={<div>Loading Chart...</div>} \n              data={chartData}\n              options={{\n                hAxis: {\n                  title: 'Date',\n                  format: \"yyyy-MM-dd\"\n                },\n                vAxis: {\n                  title: 'Value',\n                },\n                legend: {\n                  position: 'bottom'\n                },\n              }}\n              rootProps={{ 'data-testid': '1' }}\n            />\n            :\n            \"Click on an sample to see its phenology\"\n          }\n          </Card.Body>\n        </Card>\n        {/* <div className=\"chart-canvas w-100 h-100 p-2\">\n        {chartData ?\n          <Chart \n            width=\"100%\" \n            height=\"90%\" \n            chartType=\"LineChart\" \n            loader={<div>Loading Chart...</div>} \n            data={chartData}\n            options={{\n              hAxis: {\n                title: 'Date',\n                format: \"yyyy-MM-dd\"\n              },\n              vAxis: {\n                title: 'Value',\n              },\n              legend: {\n                position: 'bottom'\n              },\n            }}\n            rootProps={{ 'data-testid': '1' }}\n          />\n          :\n          \"Click on an sample to see its phenology\"\n        }\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nconst POSITIVE_STYLE = {\n  radius: 3, \n  fillColor: \"red\", \n  stroke: 0.2,\n  color: \"black\",\n  opacity: 0.5,\n  fillOpacity: 1,\n}\n\nconst NEGATIVE_STYLE = {\n  radius: 3, \n  fillColor: \"blue\", \n  stroke: 0.2,\n  color: \"black\",\n  opacity: 0.5,\n  fillOpacity: 1,\n}\n\nexport const SampleContainer = () => {\n\n  const [fieldState, setFieldState] = useState(null);\n  const [positiveValueState, setPositiveValueState] = useState(null);\n\n  const sampleState = useSelector((state) => state.samples);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (sampleState.classProperty.name === null) return;\n\n    geojsonLayer.eachLayer(layer => {\n      let geoJsonPoint = layer.feature;\n      if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\n        layer.setStyle(POSITIVE_STYLE)\n      } else {\n        layer.setStyle(NEGATIVE_STYLE)\n      }\n    })\n\n  }, [sampleState.classProperty])\n\n\n  const handleUploadFile = async (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      let file = e.target.files[0];\n      let geojson = await shp(await file.arrayBuffer());\n      geojson.features.forEach((feature, i)=> {\n        feature.properties[idField] = i+1   // avoid using 0 to prevent it getting cast to false\n      })\n\n      // if (geojson.features[0].geometry.type !== \"Point\") {\n      // }\n\n      // create geojson layer\n      let layer = L.geoJSON(geojson, {\n        pointToLayer: (geoJsonPoint, latlng) => {\n          if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\n            return L.circleMarker(latlng, POSITIVE_STYLE)\n          } else {\n            return L.circleMarker(latlng, NEGATIVE_STYLE)\n          }\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindPopup(layer => {\n            return ReactDOMServer.renderToString(json2table(layer.feature.properties))\n          }, {\n            maxHeight: \"400\",\n            maxWidth: \"400\",\n          })\n        }\n      })\n      layer.addTo(map);\n      \n      setGeojsonLayer(layer)\n\n      // let overlays = [\n      //   {\n      //     layer: layer,\n      //     name: file.name,\n      //   },\n      // ];\n      addGeoJsonOverlay();\n\n      dispatch(replace(geojson));\n    }\n  };\n\n  const handleSelectClassField = (field) => {\n    dispatch(setClassProperty({\n      name: field,\n      positiveValue: null,\n    }))\n  }\n\n  const handleChangeClassValue = (value) => {\n    dispatch(setClassProperty({\n      positiveValue: value\n    }))\n  }\n\n  const handleSaveSamples = (e) => {\n    console.log(sampleState.geojson)\n    const json_blob = new Blob([JSON.stringify(sampleState.geojson)], {type: \"application/json\"})\n    saveAs(json_blob, \"samples.geojson\")\n  }\n\n  return (\n    <Card className=\"h-100\">\n      <Card.Header>\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <div>\n            <h6 className=\"m-0 p-0\">\n              Samples { `(count: ${sampleState.geojson.features.length})`}\n            </h6>\n          </div>\n          <div>\n            <Button\n              variant=\"light\"\n              size=\"sm\"\n              className=\"h-100 w-100 px-0\"\n              as=\"label\"\n              htmlFor=\"sample-upload\"\n            >\n              <FileEarmarkArrowUpFill />\n            </Button>\n            <input\n              type=\"file\"\n              className=\"d-none\"\n              id=\"sample-upload\"\n              onChange={handleUploadFile}\n            />\n          </div>\n          <div>\n            <Button\n              variant=\"light\"\n              size=\"sm\"\n              className=\"h-100 w-100 px-0\"\n              onClick={handleSaveSamples}\n            >\n              <SaveFill />\n            </Button>\n          </div>\n        </div>\n      </Card.Header>\n      <Card.Body className=\"p-2\">\n        <div className=\"container card mb-2\">\n          <div className=\"p-2\">\n            <div className=\"row align-items-center mb-2\">\n              <div className=\"col-auto\">Class field:</div>\n              <div className=\"col\">\n                <Form.Select \n                  className=\"w-100\"\n                  value={sampleState.classProperty.name || \"\"}\n                  disabled={!!!sampleState.geojson.features.length}\n                  onChange={e => handleSelectClassField(e.target.value)}\n                >\n                  <option></option>\n                  {sampleState.geojson.features.length !== 0 && Object.keys(sampleState.geojson.features[0].properties).map(k => (\n                    <option key={k}>{k}</option>\n                  ))}\n                </Form.Select>\n              </div>\n            </div>\n            <div className=\"row align-items-center\">\n              <div className=\"col-auto\">Class value:</div>\n              <div className=\"col\"> \n                <Form.Select \n                  value={sampleState.classProperty.positiveValue || \"\"}\n                  disabled={!!!sampleState.classProperty.name}\n                  onChange={e => handleChangeClassValue(e.target.value)}\n                >\n                  <option></option>\n                  {sampleState.geojson.features.length !== 0 && [...new Set(sampleState.geojson.features.map(feature => feature.properties[sampleState.classProperty.name]))].map(v => {\n                    return (<option key={v}>{v}</option>)\n                  })\n                  }\n                </Form.Select>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <ListGroup className=\"sample-list\">\n          {sampleState.geojson &&\n            sampleState.geojson.features.map((feature, idx) => (\n              <SampleItem feature={feature} idx={idx} />\n            ))}\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  )\n\n}\n\n\nconst SampleItem = (props) => {\n\n  const { idx, feature } = props;\n\n  const sampleState = useSelector(state => state.samples)\n  const dispatch = useDispatch()\n\n  const handleSelectSample = (idx) => {\n    dispatch(selectFeature(idx));\n  };\n\n  const handleDelete = (e, id) => {\n    e.stopPropagation()\n    console.log(id)\n    geojsonLayer.eachLayer(layer => {\n      \n      if (id === layer.feature.properties[idField]) {\n        geojsonLayer.removeLayer(layer)\n      }\n    })\n    dispatch(deleteFeature(id))\n    dispatch(selectFeature(null))\n  }\n\n  return (\n    <ListGroup.Item\n      action\n      className=\"px-3 py-1\"\n      key={idx}\n      onClick={() => handleSelectSample(feature.properties[idField])}\n      active={feature.properties[idField] == sampleState.selected}\n      style={{backgroundColor: feature.properties[sampleState.classProperty.name] == sampleState.classProperty.positiveValue ? \"lightgreen\" : null}}\n    >\n      <div className=\"d-flex align-items-center flex-row justify-content-between\">\n        <div>\n          {`${feature.properties[idField]} - ${feature.properties[sampleState.classProperty.name]}`}\n        </div>\n        <div >\n          <Button\n            variant=\"light\"\n            size=\"sm\"\n            className=\"h-100 w-100 px-0 bg-transparent\"\n            as=\"label\"\n            onClick={(e) => handleDelete(e, feature.properties[idField])}\n          >\n            <TrashFill />\n          </Button>\n        </div>\n      </div>\n      \n    </ListGroup.Item>\n  )\n}","import {\n  LayersControl,\n  MapContainer,\n  TileLayer,\n  useMap,\n  GeoJSON,\n  Popup,\n} from \"react-leaflet\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport { useMemo, useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport _ from \"lodash\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { useContext } from \"react\";\nimport { BASEMAPS } from \"../utils/constants\";\nimport { toggle } from \"../features/phenology/editingSlice\";\n\nimport { idField } from \"./panels/SamplePanel\"\n\nimport L from \"leaflet\";\n\nimport parse from 'html-react-parser'\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png').default,\n    iconUrl: require('leaflet/dist/images/marker-icon.png').default,\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png').default\n});\n\nconst defaultBaseMap = \"Google Maps\";\n\n// global variable to hold Leaflet-related variables and methods\nexport let map = null;\nexport let layerControlRef = null;\nexport let tileOverlays = [];\nexport let geojsonLayer = null;\nexport const setGeojsonLayer = (layer) => geojsonLayer = layer\n\nexport const addTileOverlays = (overlays) => {\n  if (map && layerControlRef.current) {\n    overlays.forEach((overlay) => {\n      overlay.layer.addTo(map);\n      layerControlRef.current.addOverlay(overlay.layer, overlay.name);\n      tileOverlays.push(overlay.layer);\n    });\n  }\n};\n\nexport const addGeoJsonOverlay = () => {\n  if (geojsonLayer && map && layerControlRef.current) {\n    geojsonLayer.addTo(map);\n    layerControlRef.current.addOverlay(geojsonLayer, \"samples\")\n  }\n}\n\nexport const removeAllOverlays = (state) => {\n  tileOverlays.forEach((layer) => {\n    layerControlRef.current.removeLayer(layer);\n    map.removeLayer(layer);\n  });\n};\n\nexport const panToLatLng = ([lat, lng]) => {\n  if (map) {\n    map.panTo([lat, lng]);\n  }\n};\n\n\nexport function Map(props) {\n  const { info } = props;\n\n  const appName = useSelector(state => state.appName)\n\n  const lcRef = useRef();\n\n  const sampleState = useSelector(state => state.samples)\n\n  useEffect(() => {\n    layerControlRef = lcRef;\n    setTimeout(() => {\n      addTileOverlays(tileOverlays)\n      addGeoJsonOverlay()\n    }, 400)\n    \n  }, []);\n\n\n  useEffect(() => {\n    if (sampleState.selected) {\n\n      let selected_sample = sampleState.geojson.features.filter(f => f.properties[idField] === sampleState.selected)[0]\n      let latlon = [...selected_sample.geometry.coordinates].reverse()\n      panToLatLng(latlon)\n\n    }\n  }, [sampleState.selected])\n\n  useEffect(()=>{\n    if (map) {\n      map.invalidateSize();\n    }\n  },[appName])\n\n  // const displayMap = useMemo(\n  //   () => (\n  //     <MapContainer\n  //       center={[28.5973518, 83.54495724]}\n  //       zoom={8}\n  //       id=\"map\"\n  //       whenCreated={(m) => {\n  //         map = m;\n  //       }}\n  //     >\n  //       <LayersControl ref={lcRef}>\n  //         {/* base maps */}\n  //         {Object.entries(BASEMAPS).map(([name, basemap]) => (\n  //           <LayersControl.BaseLayer\n  //             name={name}\n  //             checked={name === defaultBaseMap}\n  //             key={name}\n  //           >\n  //             <TileLayer url={basemap.url} attribution={basemap.attribution} />\n  //           </LayersControl.BaseLayer>\n  //         ))}\n\n  //       </LayersControl>\n\n  //       {/* {showEditControl ? <EditingControl /> : null} */}\n\n  //       {appName !== \"phenology\" ? <InfoControl info={info} /> : null}\n  //     </MapContainer>\n  //   ),\n  //   []\n  // );\n\n  return (\n    <MapContainer\n      center={[28.5973518, 83.54495724]}\n      zoom={8}\n      id=\"map\"\n      whenCreated={(m) => {\n        map = m;\n      }}\n    >\n      <LayersControl ref={lcRef}>\n        {/* base maps */}\n        {Object.entries(BASEMAPS).map(([name, basemap]) => (\n          <LayersControl.BaseLayer\n            name={name}\n            checked={name === defaultBaseMap}\n            key={name}\n          >\n            <TileLayer url={basemap.url} attribution={basemap.attribution} />\n          </LayersControl.BaseLayer>\n        ))}\n\n      </LayersControl>\n\n      {/* {showEditControl ? <EditingControl /> : null} */}\n\n      {appName !== \"phenology\" ? <InfoControl info={info} /> : null}\n    </MapContainer>\n  );\n}\n\nconst EditingControl = (props) => {\n  const editing = useSelector((state) => state.editing);\n  const dispatch = useDispatch();\n\n  const handleChangeEditing = (e) => {\n    dispatch(toggle());\n  };\n\n  const displayControl = useMemo(\n    () => (\n      <Button\n        variant={editing ? \"warning\" : \"light\"}\n        size=\"sm\"\n        onClick={handleChangeEditing}\n      >\n        Start Editing\n      </Button>\n    ),\n    [editing]\n  );\n\n  return (\n    <div className=\"leaflet-top start-50 top-0\">\n      <div className=\"leaflet-control leaflet-bar\">{displayControl}</div>\n    </div>\n  );\n};\n\nconst InfoControl = (props) => {\n  const { info } = props;\n  return (\n    <div className=\"leaflet-bottom leaflet-left\">\n      <div className=\"leaflet-control leaflet-bar info-board\">\n        {parse(info)}\n      </div>\n    </div>\n  );\n};\n\nconst ChartControl = (props) => {\n  const { render } = props;\n\n  return (\n    <div className=\"leaflet-bottom leaflet-left\">\n      <div className=\"leaflet-control leaflet-bar chart-board\">\n        {typeof render === 'function' && render()}\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default Map;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { dataList, featureList } from \"../../utils/constants\";\n\nconst initialDatasetState = {\n  name: \"COPERNICUS/S1_GRD\",\n  cloud: \"15\",\n  feature: \"VH\",\n  composite: \"median\",\n  composite_days: '15',\n  ascd: false,\n  desc: true,\n  boundary: \"CHITAWAN\",\n  boundary_file: null,\n  crop_mask: \"projects/testee-319020/assets/terai_agri_mask\",\n\n  phenology_start_date: \"2019-01-01\",\n  phenology_end_date: \"2020-01-01\",\n};\n\nexport const datasetSlice = createSlice({\n  name: \"dataset\",\n  initialState: initialDatasetState,\n  reducers: {\n    update: (state, action) => ({ ...state, ...action.payload }),\n    changeDataSource: (state, action) => {\n      let name = action.payload\n      state.name = name\n      if (name in dataList.radar) {\n        state.feature = 'VH'\n      } else if (name in dataList.optical) {\n        state.feature = 'NDVI'\n        state.cloud = \"15\"\n      }\n      return state\n    }\n  },\n});\n\nexport const { update, changeDataSource } = datasetSlice.actions;\n\nexport default datasetSlice.reducer;\n","import { useContext } from \"react\";\nimport { Card, Col, Form, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { dataList, featureList, districtList } from \"../utils/constants\";\nimport { update, changeDataSource } from \"../features/phenology/datasetSlice\";\n\nexport function SatelliteDataFilters(props) {\n  // const ctx = useContext(EmpiricalFormContext);\n  let { disabled } = props;\n\n  const datasetFilters = useSelector((state) => state.dataset);\n  const dispatch = useDispatch();\n\n  const handleChange = (field, value) => {\n    dispatch(update({ [field]: value }));\n  };\n\n  const handleDataChange = (e) => {\n    dispatch(changeDataSource(e.target.value));\n  };\n\n  return (\n    <Card className=\"mb-2 border-secondary\">\n      <Card.Header>\n        <h6 className=\"m-0 p-0\">\n          Satellite Dataset\n        </h6>\n      </Card.Header>\n      <Card.Body>\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_name\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Dataset\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={handleDataChange}\n              value={datasetFilters[\"name\"]}\n            >\n              {Object.entries(dataList).map(([key, value]) => (\n                <optgroup key={key} label={key}>\n                  {Object.entries(value).map(([k, v]) => (\n                    <option key={k} value={k}>\n                      {v}\n                    </option>\n                  ))}\n                </optgroup>\n              ))}\n            </Form.Select>\n          </Col>\n        </Form.Group>\n\n        {datasetFilters[\"name\"] in dataList.optical \n          ? (\n            <Form.Group\n              as={Row}\n              controlId={\"dataset_cloud\"}\n              className=\"align-items-center mb-2\"\n            >\n              <Form.Label column xs=\"auto\">\n                Cloud cover (%)\n              </Form.Label>\n              <Col>\n                <Form.Control\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"1\"\n                  value={datasetFilters[\"cloud\"]}\n                  onChange={(e) => handleChange(\"cloud\", e.target.value)}\n                />\n              </Col>\n            </Form.Group>\n          ) \n          : null\n        }\n\n        <Form.Group as={Row} controlId={\"dataset_orbit\"} className=\"mb-2\">\n          <Form.Label column xs={4}>\n            Orbit\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Check\n              type=\"checkbox\"\n              id={\"desc\"}\n              name={\"desc\"}\n              label=\"Descending\"\n              checked={datasetFilters[\"desc\"]}\n              onChange={(e) => handleChange(\"desc\", e.target.checked)}\n            />\n            <Form.Check\n              type=\"checkbox\"\n              id={\"ascd\"}\n              name={\"ascd\"}\n              label=\"Ascending\"\n              checked={datasetFilters[\"ascd\"]}\n              onChange={(e) => handleChange(\"ascd\", e.target.checked)}\n            />\n          </Col>\n        </Form.Group>\n\n\n        <Form.Group as={Row} controlId={\"dataset_feature\"} className=\"mb-2 align-items-center\">\n          <Form.Label column xs={4}>\n            Feature\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={(e) => handleChange(\"feature\", e.target.value)}\n              value={datasetFilters[\"feature\"]}\n            >\n              {datasetFilters[\"name\"] in dataList.radar\n                ? Object.entries(featureList.radar).map(([key, value]) => (\n                    <option key={key} value={key}>\n                      {value}\n                    </option>\n                  ))\n                : Object.entries(featureList.optical).map(([key, value]) => (\n                    <option key={key} value={key}>\n                      {value}\n                    </option>\n                  ))\n              }\n            </Form.Select>\n          </Col>\n        </Form.Group>\n\n        {/* {datasetFilters[\"composite\"] !== undefined ? ( */}\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_composite\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Composite Type\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={(e) => handleChange(\"composite\", e.target.value)}\n              value={datasetFilters[\"composite\"]}\n            >\n              {[\"minimum\", \"maximum\", \"median\", \"mean\", \"mode\"].map(\n                (type) => (\n                  <option value={type} key={type}>\n                    {type}\n                  </option>\n                )\n              )}\n            </Form.Select>\n          </Col>\n        </Form.Group>\n        {/* )  */}\n        {/* : null} */}\n\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_composite_days\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Composite Days\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Control\n              type=\"number\"\n              onChange={(e) => handleChange(\"composite_days\", e.target.value)}\n              value={datasetFilters[\"composite_days\"]}\n            >\n            </Form.Control>\n          </Col>\n        </Form.Group>\n        \n        \n      </Card.Body>\n    </Card>\n  );\n}\n\nexport const AuxDataFilters = (props) => {\n\n  const datasetFilters = useSelector((state) => state.dataset);\n  const dispatch = useDispatch();\n\n  const handleChange = (field, value) => {\n    dispatch(update({ [field]: value }));\n  };\n\n  return (\n    <Card className=\"mb-2 border-secondary\">\n      <Card.Header>\n        <h6 className=\"m-0 p-0\">\n          Auxiliary Datasets\n        </h6>\n      </Card.Header>\n      <Card.Body>\n      <Form.Group\n          as={Row}\n          controlId={\"dataset_boundary\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Boundary\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={(e) => handleChange(\"boundary\", e.target.value)}\n              value={datasetFilters[\"boundary\"]}\n            >\n              {Object.entries(districtList).map(([key, value]) => (\n                <option value={key} key={key}>\n                  {value}\n                </option>\n              ))}\n            </Form.Select>\n          </Col>\n        </Form.Group>\n\n        {datasetFilters[\"boundary\"] === \"upload\" ? (\n          <Form.Group\n            as={Row}\n            controlId={\"dataset_boundary_file\"}\n            className=\"align-items-center mb-2\"\n          >\n            <Form.Label column xs={4}>\n              Boundary file <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col xs={8}>\n              <Form.Control\n                type=\"file\"\n                className=\"w-100 form-control\"\n                required\n                name=\"boundary_file\"\n                onChange={(e) =>\n                  handleChange(\n                    \"boundary_file\",\n                    URL.createObjectURL(e.target.files[0])\n                  )\n                }\n              />\n            </Col>\n          </Form.Group>\n        ) : null}\n\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_cropmask\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Crop Mask (GEE asset)\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Control\n              type={\"text\"}\n              onChange={(e) => handleChange(\"crop_mask\", e.target.value)}\n              value={datasetFilters[\"crop_mask\"]}\n            />\n          </Col>\n        </Form.Group>\n      </Card.Body>\n    </Card>\n  )\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const SEASONS = {\n  sowing: \"sowing\", \n  peak: \"peak\", \n  harvesting: \"harvesting\"\n};\n\nconst initialState = Object.fromEntries(\n  Object.keys(SEASONS).map((season) => [\n    season,\n    {\n      on: true,\n      start: \"\",\n      end: \"\",\n      min: \"\",\n      max: \"\",\n    },\n  ])\n);\n\nconst reducers = Object.fromEntries(\n  Object.keys(SEASONS).map((season) => [\n    season,\n    (state, action) => {\n      state[season] = { ...state[season], ...action.payload }\n      return state\n    },\n  ])\n);\n\nexport const SEASONSlice = createSlice({\n  name: \"seasons\",\n  initialState,\n  reducers,\n});\n\nexport const actions = SEASONSlice.actions;\n\nexport default SEASONSlice.reducer;\n","import React from \"react\";\nimport { Card, Col, Form, Row } from \"react-bootstrap\";\n\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions } from \"../features/phenology/seasonSlice\";\n\nimport _ from \"lodash\"\n\nexport const SeasonFilterGroup = (props) => {\n  const { name, inputThres, readOnly } = props;\n\n  // use state and actions from redux\n  const appName = useSelector(state => state.appName)\n  const seasonFilter = useSelector(state => state.seasons[name])\n  const sampleState = useSelector(state => state.samples)\n  const dispatch = useDispatch()\n  const action = actions[name]\n\n  // update thresholds after each re-render\n  // useEffect(() => {\n  //   if (!seasonFilter.on) {\n  //     handleChange(\"min\", null);\n  //     handleChange(\"max\", null);\n  //     return;\n  //   }\n  //   // pre-check if all inputs are valid\n  //   if (sampleState.geojson.features.length === 0) return;\n  //   if (Date.parse(seasonFilter.start))\n  // })\n\n  const handleChange = (field, value) => {\n    dispatch(action({[field]: value}))\n  }\n\n  return (\n    <Card className=\"mb-2 border-secondary\">\n      <Row className=\"align-items-center gx-2 m-0 card-header\">\n        <Col xs=\"auto\">\n          <Form.Check\n            type=\"switch\"\n            id={`${name}_switch`}\n            aria-label={name}\n            checked={seasonFilter.on}\n            onChange={(e) => handleChange(\"on\", e.target.checked)}\n          />\n        </Col>\n        <Col xs=\"auto\">\n          <h6 className=\"m-0\">{name.charAt(0).toUpperCase() + name.slice(1)}</h6>\n        </Col>\n      </Row>\n      <fieldset id={`${name}_fields`} disabled={!seasonFilter.on}>\n        <Card.Body>\n          <Form.Group\n            as={Row}\n            className=\"mb-2\"\n            controlId={`${name}_start_fields`}\n          >\n            <Form.Label column sm={4}>\n              Start date <span style={{color: \"red\"}}>*</span>\n            </Form.Label>\n            <Col sm={8}>\n              <Form.Control\n                type=\"date\"\n                required\n                readOnly={readOnly}\n                name={`${name}_start`}\n                value={seasonFilter.start}\n                onChange={(e) => handleChange(\"start\", e.target.value)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group\n            as={Row}\n            className=\"mb-2\"\n            controlId={`${name}_end_fields`}\n          >\n            <Form.Label column sm={4}>\n              End date <span style={{color: \"red\"}}>*</span>\n            </Form.Label>\n            <Col sm={8}>\n              <Form.Control\n                type=\"date\"\n                required\n                readOnly={readOnly}\n                name={`${name}_end`}\n                value={seasonFilter.end}\n                onChange={(e) => handleChange(\"end\", e.target.value)}\n              />\n            </Col>\n          </Form.Group>\n\n          <Form.Group\n            as={Row}\n            className=\"mb-2\"\n            // controlId={`${name}_threshold_fields`}\n          >\n            <Form.Label column sm={4}>\n              Threshold {inputThres ? <span style={{color: \"red\"}}>*</span> : null}\n            </Form.Label>\n            <Col sm={8}>\n              <Row className=\"gx-1 align-items-center\">\n                <Col>\n                  <Form.Control\n                    type=\"number\"\n                    required={inputThres}\n                    readOnly={!inputThres || readOnly}\n                    id={`${name}_min`}\n                    placeholder=\"min\"\n                    step=\"0.01\"\n                    name={`${name}_min`}\n                    value={seasonFilter.min}\n                    onChange={(e) => handleChange(\"min\", e.target.value)}\n                  />\n                </Col>\n                <Col sm=\"auto\">{\"≤ x ≤\"}</Col>\n                <Col>\n                  <Form.Control\n                    type=\"number\"\n                    required={inputThres}\n                    readOnly={!inputThres || readOnly}\n                    id={`${name}_max`}\n                    placeholder=\"max\"\n                    step=\"0.01\"\n                    name={`${name}_max`}\n                    value={seasonFilter.max}\n                    onChange={(e) => handleChange(\"max\", e.target.value)}\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Form.Group>\n        </Card.Body>\n      </fieldset>\n    </Card>\n  );\n}\n\nSeasonFilterGroup.propTypes = {\n  name: PropTypes.string.isRequired,\n  inputThres: PropTypes.bool.isRequired,\n};\n","import { useState } from \"react\"\nimport { Form, TabContainer, Row, Col, Nav, TabContent, TabPane, Button, Spinner, Dropdown, DropdownButton } from \"react-bootstrap\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { seasonNames } from '../../utils/constants'\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport L from 'leaflet'\nimport { map, layerControlRef, addTileOverlays, removeAllOverlays } from \"../LeafletMap\"\nimport { SatelliteDataFilters, AuxDataFilters } from \"../DataFilterGroup\";\nimport { SeasonFilterGroup } from \"../SeasonFilterGroup\";\n\nconst tabNames = {\n  tab1: \"Datasets\",\n  tab2: \"Seasons\"\n}\n\nexport const FilterPanel = (props) => {\n\n  const { setInfo } = props;\n\n  // state from redux store\n  const csrfToken = useSelector(state => state.csrfToken)\n  const datasetFilters = useSelector(state => state.dataset)\n  const seasonFilters = useSelector(state => state.seasons)\n  const editing = useSelector(state => state.editing)\n  const dispatch = useDispatch()\n\n  // local state\n  const [validated, setValidated] = useState(false)\n  // const [success, setSuccess] = useState(undefined); // undefined - normal; false - invalid; true - \n  const [loading, setLoading] = useState(false)\n\n  const [downloadUrl, setDownLoadUrl] = useState({})\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.currentTarget;\n    \n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      setValidated(true)\n      // setSuccess(false)\n      return\n    } \n    \n    // validate passed\n    setValidated(false)\n    // setSuccess(true)\n    // setTimeout(() => setSuccess(undefined), 2000)\n\n    const formData = new FormData()\n\n    let jsonData = {}\n    seasonNames.forEach(name => {\n      if (seasonFilters[name]['on']) {\n        jsonData[name] = _.cloneDeep(seasonFilters[name])\n        delete jsonData[name].on\n      }\n    })\n\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\n    if (jsonData['dataset'].boundary_file) {\n      formData.append('boundary_file', jsonData['dataset'].boundary_file)\n      delete jsonData['dataset'].boundary_file\n    } \n\n    formData.append('json', new Blob([JSON.stringify(jsonData)], {\n      type: 'application/json'\n    }));\n\n    \n    axios.post(\"empirical/\", formData, {\n      baseURL: process.env.PUBLIC_URL,\n      headers: {\n        \"X-CSRFToken\": csrfToken,\n      },\n      \n    }).then(response => {\n      let res_body = response.data\n\n      // add all new overlays\n      let overlays = []\n      Object.keys(res_body).forEach(key => {\n        let layer = new L.TileLayer(res_body[key].tile_url)\n        let overlay = {\n          layer: layer,\n          name: key,\n          url: res_body[key].download_url\n        }\n        overlays.push(overlay)\n\n        if (res_body[key].area) {\n          setInfo(\"Rice area: \" + res_body[key].area.toFixed(3) + \" ha\")\n        }\n      })\n      addTileOverlays(overlays)\n\n      setLoading(false)\n\n    }).catch(reason => {\n      setLoading(false)\n      alert(reason)\n    })\n\n    // set loading state\n    setLoading(true)\n\n    // remove all overlays\n    removeAllOverlays()\n  }\n\n  const handleExport = (key) => {\n    if (key === 'season') {\n      // Object.keys(downloadUrl).map(key => {\n      //   if (key !== \"combined\") {\n\n      //   }\n      // })\n    } else {\n\n    }\n  }\n  \n  return (\n    <div className=\"sidebar h-100 flex-column\">\n      <Form method=\"POST\" onSubmit={handleSubmit} noValidate validated={validated}>\n        <TabContainer defaultActiveKey={tabNames.tab1} unmountOnExit={false}>\n          <Row className=\"tabs-nav g-0 flex-wrap\">\n            <Nav variant=\"pills\" className=\"h-100\">\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle w-100 h-100 h6\" eventKey={tabNames.tab1} >{tabNames.tab1}</Nav.Link>\n              </Col>\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle h-100 w-100 h6\" eventKey={tabNames.tab2} >{tabNames.tab2}</Nav.Link>\n              </Col>\n            </Nav>\n          </Row>\n          <Row className=\"tabs-content g-0 p-2\">\n            <Col>\n              <TabContent>\n                <TabPane eventKey={tabNames.tab1} >\n                  <fieldset >\n                    <SatelliteDataFilters />\n                    {/* {appName === \"empirical\" && <AuxDataFilters />} */}\n                    <AuxDataFilters />\n                  </fieldset>\n                </TabPane>\n                <TabPane eventKey={tabNames.tab2}>\n                  \n                  {seasonNames.map(name => (\n                    <SeasonFilterGroup name={name} key={name} inputThres={true} readOnly={loading} />\n                  ))}\n\n                  <div className=\"d-grid gap-2\">\n                    <Button type=\"submit\" variant={ loading ? \"secondary\" : \"primary\"} disabled={loading}>\n                      {loading ? (\n                        <div>\n                          Running...\n                          <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" ></Spinner>\n                        </div> \n                        ) \n                        : \n                        \"Run\"}\n                    </Button>\n\n                    <DropdownButton id=\"export-dropdown\" title=\"Export\" onSelect={(key, e) => handleExport(key)}>\n                      <Dropdown.Item eventKey=\"season\">Export each season</Dropdown.Item>\n                      <Dropdown.Item eventKey=\"combined\">Export combined</Dropdown.Item>\n                    </DropdownButton>\n                  </div>\n                  \n\n                </TabPane>\n              </TabContent>\n            </Col>\n          </Row>\n        </TabContainer>\n      </Form>\n    </div>\n  )\n}","import PropTypes from 'prop-types'\nimport { useRef } from 'react'\n\nlet ismdwn = 0\n\nexport function SplitPanel(props) {\n\n  const {className, leftPanel, rightPanel} = props\n\n  const panel1 = useRef()\n  const panel2 = useRef()\n\n  function handleMouseDown(event) {\n    ismdwn = 1\n    document.body.addEventListener('mousemove', mV)\n    document.body.addEventListener('mouseup', end)\n  }\n\n  const mV = (e) => {\n    if (ismdwn === 1) {\n      panel1.current.style.flexBasis = Math.min(Number.parseInt(e.clientX), document.body.clientWidth-10) + \"px\"\n    } else {\n      end()\n    }\n  }\n  const end = (e) => {\n    ismdwn = 0\n    document.body.removeEventListener('mouseup', end)\n    document.body.removeEventListener('mousemove', mV)\n    // $('#separator').off('mousemove')\n  }\n\n  return (\n    <div className={\"h-100 \" + className} style={{\"display\": \"flex\"}}>\n      <div className=\"left-panel h-100\" ref={panel1} children={leftPanel}></div>\n\n      <div className=\"panel-separator\" onMouseDown={handleMouseDown}></div>\n\n      <div className=\"right-panel h-100 w-100\" ref={panel2} children={rightPanel}></div>\n\n    </div>\n  )\n\n}\n\nSplitPanel.propTypes = {\n  leftPanel: PropTypes.node,\n  rightPanel: PropTypes.node,\n}\n\nexport default SplitPanel","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const csrfTokenSlice = createSlice({\n  name: \"csrfToken\",\n  initialState: null,\n  reducers: {\n    setToken: (state, action) => action.payload\n  }\n})\n\nexport const { setToken } = csrfTokenSlice.actions\n\nexport default csrfTokenSlice.reducer","import React, { Fragment, useEffect } from \"react\"\nimport { useReducer, useState } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport AppStatusBar from \"../components/AppStatusBar\"\nimport Map, { geojsonLayer } from \"../components/LeafletMap\"\nimport { FilterPanel } from \"../components/panels/FilterPanel\"\nimport Sidebar from \"../components/Sidebar\"\nimport SplitPanel from \"../components/SplitPanel\"\nimport { APP_NAME, setAppName } from \"../features/phenology/appNameSlice\"\nimport { setToken } from \"../features/phenology/csrfTokenSlice\"\nimport { getCookie } from \"../utils/csrfToken\"\n\nexport function EmpiricalApp() {\n\n  const dispatch = useDispatch()\n\n  const [info, setInfo] = useState(\"Please run the app to show area of rice.\")\n\n  useEffect(() => {\n    dispatch(setAppName(APP_NAME.empirical))\n\n  }, [])\n\n\n  return (\n    <Fragment>\n      <AppStatusBar />\n      <SplitPanel \n        className=\"app-main\"\n        leftPanel={<FilterPanel setInfo={setInfo} />} \n        rightPanel={<Map showInfoControl={true} info={info} />} \n      />\n    </Fragment>\n  )\n}\n\nexport default EmpiricalApp;","import axios from \"axios\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\"\nimport { Form, Row, Col, Button, Card } from \"react-bootstrap\"\nimport { useSelector } from \"react-redux\";\nimport { BASEMAPS } from \"../utils/constants\";\nimport _, { sample } from \"lodash\"\n\nimport { idField } from \"./panels/SamplePanel\"\nimport { addTileOverlays } from \"./LeafletMap\";\nimport L from \"leaflet\"\nimport { useDispatch } from \"react-redux\";\nimport { changePhenologyDate } from \"../features/phenology/sampleSlice\";\n\n// let smallMapObjs = {\n  \n// }\n\nconst SmallMap = (props) => {\n\n  const { date, point, setMapObj } = props\n\n  return (\n    <MapContainer\n      center={point || [28.5973518, 83.54495724]}\n      zoom={15}\n      className=\"small-map\"\n      zoomControl={false}\n      whenCreated={(m) => {\n        setMapObj(state => {\n          let new_state = {...state, [date]: m}\n          return new_state\n        })\n      }}\n    >\n      <TileLayer \n        url={BASEMAPS[\"Google Satellite\"].url} \n        attribution={BASEMAPS[\"Google Satellite\"].attribution} \n      />\n      \n      {point && <Marker position={point}/>}\n      \n    </MapContainer>\n  )\n}\n\nexport const MapCarousel = (props) => {\n\n  const sampleSlice = useSelector(state => state.samples)\n  let selectedSample = sampleSlice.geojson.features.filter(f => f.properties[idField] === sampleSlice.selected)[0]\n\n  const dispatch = useDispatch()\n\n  const [smallMapObjs, setSmallMapObjs] = useState({})\n\n\n  // load false color basemaps for small maps\n  // useEffect(() => {\n  //   // TODO: change year to reflect the true year\n  //   let year = 2019 \n  //   axios.get(\"phenology/monthly_composite\", {\n  //     baseURL: process.env.PUBLIC_URL,\n  //     params: {\n  //       year: year,\n  //     }\n  //   }).then(res => {\n  //     let body = res.data\n  //     Object.keys(smallMapObjs).forEach(month => {\n  //       const url = body[month]\n  //       let layer = new L.TileLayer(url)\n  //       layer.addTo(smallMapObjs[month])\n  //     })\n  //   })\n  // }, [])\n\n  // move \n  useEffect(() => {\n    if (sampleSlice.selected) {\n      Object.values(smallMapObjs).forEach(m => {\n        m.panTo([selectedSample.geometry.coordinates[1], selectedSample.geometry.coordinates[0]])\n      })\n    }\n  }, [sampleSlice.selected])\n\n  useEffect(() => {\n    let newSmallMapObj = {}\n    let { start_date, end_date } = sampleSlice.phenology\n    start_date = new Date(start_date)\n    end_date = new Date(end_date)\n    let temp_date = start_date\n    while (temp_date <= end_date) {\n      let key = `${temp_date.getUTCFullYear()}-${temp_date.getUTCMonth()+1}`\n      newSmallMapObj[key] = smallMapObjs[key] \n      temp_date.setUTCMonth(temp_date.getUTCMonth() + 1)\n    }\n    setSmallMapObjs(newSmallMapObj)\n  }, [sampleSlice.phenology])\n\n  const handleClick = (e) => {\n    axios.get(\"phenology/monthly_composite\", {\n      baseURL: process.env.PUBLIC_URL,\n      params: {\n        start_date: sampleSlice.phenology.start_date,\n        end_date: sampleSlice.phenology.end_date\n      }\n    }).then(res => {\n      let body = res.data\n      Object.keys(smallMapObjs).forEach(date => {\n        const url = body[date]\n        let layer = new L.TileLayer(url)\n        layer.addTo(smallMapObjs[date])\n      })\n    })\n  }\n\n  return (\n    <div className=\"map-carousel h-100 d-flex overflow-auto\">\n      <div className=\"ps-2 py-2 pe-1\" style={{width:280, flexShrink: 0}}>\n        <Card className=\"w-100 h-100\">\n          <Card.Body className=\"p-2\">\n            <Form.Group\n              as={Row}\n              controlId={\"phenology_start_date\"}\n              className=\"mb-2\"\n            >\n              \n              <Form.Label column sm=\"3\"> \n                From\n              </Form.Label>\n              <Col sm=\"9\">\n                <Form.Control\n                  type=\"month\"\n                  name={`phenology_start_date`}\n                  value={sampleSlice.phenology.start_date}\n                  onChange={(e) => dispatch(changePhenologyDate({\n                    start_date: e.target.value\n                  }))}\n                  className=\"w-100\"\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group\n              as={Row}\n              controlId={\"phenology_end_date\"}\n            >\n              <Form.Label column sm={\"3\"}>\n                To\n              </Form.Label>\n              <Col sm={\"9\"}>\n                <Form.Control\n                  type=\"month\"\n                  name={`phenology_end_date`}\n                  value={sampleSlice.phenology.end_date}\n                  onChange={(e) => dispatch(changePhenologyDate({\n                    end_date: e.target.value\n                  }))}\n                />\n              </Col>\n              \n            </Form.Group>\n            <Row className=\"pt-2 justify-content-center\">\n              <Col sm=\"auto\">\n                <Button onClick={handleClick}>Load Composites</Button>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </div>\n\n      {Object.keys(smallMapObjs).map(date => (\n        <div className=\"px-1 py-2\" style={{width:250, flexShrink: 0}}>\n          <Card className=\"w-100 h-100\" key={date}>\n            <Card.Header className=\"py-0 text-center\">{date}</Card.Header>\n            <Card.Body className=\"p-0\">\n              <SmallMap \n                point={selectedSample && [...selectedSample.geometry.coordinates].reverse()} \n                date={date}\n                setMapObj={setSmallMapObjs}\n              />\n            </Card.Body>\n          </Card>\n        </div>\n      ))}\n\n    </div>\n  )\n}","import { useContext } from \"react\"\nimport Map from \"../LeafletMap\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { MapCarousel } from \"../MapCarousel\"\n\nexport default function MapPanel(props) {\n\n  const { info } = props\n\n  const appName = useSelector(state => state.appName)\n\n  // const sampleGeoJson = useSelector(state => state.samples)\n\n  return (\n    <div className=\"w-100 h-100 d-flex flex-column\">\n      <div className=\"map-container\">\n        <Map info={info} />\n      </div>\n      {appName === \"phenology\" ? (\n        <div className=\"map-carousel-container\">\n          <MapCarousel />\n        </div>\n      ) : null}\n\n    </div>\n  )\n}","import { Button, Col, Form, Nav, Row, Spinner, TabContainer, TabContent, TabPane } from \"react-bootstrap\";\nimport { SatelliteDataFilters, AuxDataFilters } from \"../DataFilterGroup\";\nimport { seasonNames } from '../../utils/constants'\nimport { SeasonFilterGroup } from \"../SeasonFilterGroup\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\"\nimport * as d3 from \"d3\"\nimport { layerControlRef } from \"../LeafletMap\";\nimport { replace, setResult } from \"../../features/phenology/sampleSlice\";\nimport { idField } from \"./SamplePanel\";\nimport { useEffect } from \"react\";\nimport { actions } from \"../../features/phenology/seasonSlice\"\n\nconst tabNames = {\n  tab1: \"Datasets\",\n  tab2: \"Seasons\"\n}\n\nconst removeOutliers = (arr) => {\n  let first = d3.quantile(arr, 0.25)\n  let third = d3.quantile(arr, 0.75)\n  let interquatile = third - first\n  let upperbound = third + interquatile * 1.5\n  let lowerbound = first - interquatile * 1.5\n  return arr.filter(element => element > lowerbound && element < upperbound)\n}\n\nexport default function SettingsPanel(props) {\n\n  const csrfToken = useSelector(state => state.csrfToken)\n  const datasetFilters = useSelector(state => state.dataset)\n  const seasonFilters = useSelector(state => state.seasons)\n  const sampleState = useSelector(state => state.samples)\n  const editing = useSelector(state => state.editing)\n  const dispatch = useDispatch()\n\n  const [loading, setLoading] = useState(false)\n  const [validated, setValidated] = useState(false)\n\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.currentTarget;\n    \n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      setValidated(true)\n      // setSuccess(false)\n      return\n    } \n\n    setValidated(false)\n\n    // const formData = new FormData()\n\n    let jsonData = {}\n\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\n    delete jsonData.dataset.boundary_file\n\n    let samples = _.cloneDeep(sampleState.geojson)\n\n    // get rid of existing phenology info\n    samples.features.forEach(feature => {\n      Object.keys(feature.properties).forEach(key => {\n        if (key.endsWith('_feature')) {\n          delete feature.properties[key]\n        }\n      })\n    })\n\n    jsonData['samples'] = samples\n    jsonData['phenology_dates'] = sampleState.phenology\n\n    // send request\n    axios.post(\"phenology/\", jsonData, {\n      baseURL: process.env.PUBLIC_URL,\n      headers: {\n        \"X-CSRFToken\": csrfToken,\n      },\n      \n    }).then(response => {\n      let res_body = response.data\n\n      // update the properties of the existing samples\n      // let new_samples = samples\n      res_body.features.forEach(feature => {\n        let cur_feature = samples.features.filter(v => v.properties[idField] === feature.properties[idField])[0]\n        cur_feature.properties = feature.properties\n      })\n      dispatch(replace(samples))\n\n      setLoading(false)\n\n    }).catch(reason => {\n      setLoading(false)\n      alert(reason)\n    })\n\n    // set loading state\n    setLoading(true)\n\n  }\n\n  const handleRefresh = (e) => {\n    if (sampleState.geojson.features.length === 0) {\n      alert(\"Please upload the ground truth samples first.\")\n      return;\n    }\n\n    Object.keys(seasonFilters).forEach(season => { \n      let seasonFilter = seasonFilters[season];\n      if (seasonFilter.on) {\n        let start_date = new Date(seasonFilter.start)\n        let end_date = new Date(seasonFilter.end)\n\n        let candidates = []\n\n        sampleState.geojson.features.forEach(sample => {\n          // let candidates = []\n          if (sample.properties[sampleState.classProperty.name] !== sampleState.classProperty.positiveValue) {\n            return;\n          }\n          Object.entries(sample.properties).forEach(([key, val]) => {\n            if (key.endsWith('_feature')) {\n              let words = key.split('_')\n              let date = new Date(Number.parseInt(words[words.length - 2])).getTime()\n              if (start_date.getTime() <= date && date <= end_date.getTime()) {\n                candidates.push(val)\n              }\n            }\n          })\n        })\n\n        if (candidates.length === 0) {\n          return;\n        } \n\n        // compute mean, std\n        let filteredCandidates = removeOutliers(candidates)\n        let mean = _.sum(filteredCandidates) / filteredCandidates.length;\n        let std = Math.sqrt(_.sum(_.map(filteredCandidates, v => Math.pow(v - mean, 2))) / filteredCandidates.length);\n        \n        let action = actions[season];\n        dispatch(action({\"min\": (mean - std).toFixed(2), \"max\": (mean + std).toFixed(2)}))\n      }\n    })\n  }\n  \n  return (\n    <div className=\"sidebar h-100 flex-column\">\n      \n        <TabContainer defaultActiveKey={tabNames.tab1} unmountOnExit={false}>\n          <Row className=\"tabs-nav g-0 flex-wrap\">\n            <Nav variant=\"pills\" className=\"h-100\">\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle w-100 h-100 h6\" eventKey={tabNames.tab1} >{tabNames.tab1}</Nav.Link>\n              </Col>\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle h-100 w-100 h6\" eventKey={tabNames.tab2} >{tabNames.tab2}</Nav.Link>\n              </Col>\n            </Nav>\n          </Row>\n\n          <Row className=\"tabs-content g-0 p-2\">\n            <Col>\n              <TabContent>\n                <TabPane eventKey={tabNames.tab1} >\n                  <Form method=\"POST\" noValidate validated={validated} onSubmit={handleSubmit}>\n                  <SatelliteDataFilters />\n                  {/* <AuxDataFilters /> */}\n                  \n                    <Button className=\"w-100\" type=\"submit\" variant={ loading ? \"secondary\" : \"primary\" } disabled={loading}>\n                      {loading \n                        ? (\n                          <div>\n                            Running...\n                            <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" ></Spinner>\n                          </div> \n                          ) \n                        : \n                        \"Save settings\"\n                      }\n                    </Button>\n                  </Form>\n                </TabPane>\n\n                <TabPane eventKey={tabNames.tab2} >\n\n                  {seasonNames.map(name => (\n                    <SeasonFilterGroup key={name} name={name} inputThres={false} readOnly={editing} />\n                  ))}\n\n                  <Button className=\"w-100\" onClick={handleRefresh} >Refresh</Button>\n                  \n                </TabPane>\n\n              </TabContent>\n            </Col>\n          </Row>\n        </TabContainer>\n      \n      \n    </div>\n  )\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const MODEL_SPECS = {\n  \"Random Forest\": {\n    numberOfTrees: {\n      type: \"int\",\n      required: true,\n      default: 200,\n      description: \"The number of decision trees to create.\"\n    },\n    variablesPerSplit: {\n      type: \"int\",\n      default: null,\n      description: \"The number of variables per split. If unspecified, uses the square root of the number of variables.\"\n    },\n    minLeafPopulation: {\n      type: \"int\",\n      default: 1,\n      description: \"Only create nodes whose training set contains at least this many points.\"\n    },\n    bagFraction: {\n      type: \"float\",\n      default: 0.5,\n      description: \"The fraction of input to bag per tree.\"\n    },\n    maxNodes: {\n      type: \"int\",\n      default: null,\n      description: \"The maximum number of leaf nodes in each tree. If unspecified, defaults to no limit.\"\n    },\n    seed: {\n      type: \"int\",\n      default: 0,\n      description: \"The randomization seed.\"\n    }\n  },\n  \"Gradient Tree Boost\": {\n  }\n}\n\nconst initialState = {\n  \"start_date\": null,\n  \"end_date\": null,\n  \"training_ratio\": 0.7,\n  \"model\": \"\",\n  \"model_specs\": {}\n}\n\nconst classificationSlice = createSlice({\n  name: \"classification\",\n  initialState: initialState,\n  reducers: {\n    update: (state, action) => ({ ...state, ...action.payload }),\n    updateModelSpecs: (state, action) => {\n      return {...state, \"model_specs\": {...state.model_specs, ...action.payload}}\n    },\n    changeModel: (state, action) => {\n      if (action.payload && action.payload !== state.model) {\n        state.model_specs = {}\n        Object.keys(MODEL_SPECS[action.payload]).forEach(key => {\n          if (\"default\" in MODEL_SPECS[action.payload][key]) {\n            state.model_specs[key] = MODEL_SPECS[action.payload][key][\"default\"]\n          } else {\n            state.model_specs[key] = null\n          }\n        })\n        \n      }\n\n      state.model = action.payload\n    }\n  }\n})\n\nexport const { update, updateModelSpecs, changeModel} = classificationSlice.actions\n\nexport default classificationSlice.reducer","import { useState } from \"react\"\nimport { Form, TabContainer, Row, Col, Nav, TabContent, TabPane, Button, Spinner, Dropdown, DropdownButton, Card, OverlayTrigger, Popover } from \"react-bootstrap\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { seasonNames } from '../../utils/constants'\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport L from 'leaflet'\nimport { map, layerControlRef, addTileOverlays, removeAllOverlays } from \"../LeafletMap\"\nimport { SatelliteDataFilters, AuxDataFilters } from \"../DataFilterGroup\";\n\n// import {update as updateDatasetFilters } from \"../../features/phenology/datasetSlice\"\nimport { update, changeModel, updateModelSpecs, MODEL_SPECS } from \"../../features/phenology/classificationSlice\"\nimport { InfoCircle, InfoCircleFill, InfoSquare, QuestionCircle } from \"react-bootstrap-icons\";\nimport { SampleContainer } from \"./SamplePanel\";\n\nconst tabNames = {\n  tab1: \"Datasets\",\n  tab2: \"Samples\",\n  tab3: \"Classification\",\n}\n\nexport const ClassificationPanel = (props) => {\n\n  const { setInfo } = props;\n\n  // state from redux store\n  const csrfToken = useSelector(state => state.csrfToken)\n  const datasetFilters = useSelector(state => state.dataset)\n  // const seasonFilters = useSelector(state => state.seasons)\n  const classificationState = useSelector(state => state.classification)\n  const sampleState = useSelector(state => state.samples)\n  const dispatch = useDispatch()\n\n  // local state\n  const [validated, setValidated] = useState(false)\n  // const [success, setSuccess] = useState(undefined); // undefined - normal; false - invalid; true - \n  const [loading, setLoading] = useState(false)\n\n  const [downloadUrl, setDownLoadUrl] = useState({})\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.currentTarget;\n    \n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      setValidated(true)\n      // setSuccess(false)\n      return\n    } \n    \n    // validate passed\n    setValidated(false)\n    // setSuccess(true)\n    // setTimeout(() => setSuccess(undefined), 2000)\n\n    const formData = new FormData()\n\n    let jsonData = {}\n\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\n    if (jsonData['dataset'].boundary_file) {\n      formData.append('boundary_file', jsonData['dataset'].boundary_file)\n      delete jsonData['dataset'].boundary_file\n    } \n    jsonData['classification'] = _.cloneDeep(classificationState)\n    jsonData['classification']['class_property'] = sampleState['classProperty']\n    let model_specs = jsonData['classification']['model_specs']\n    for (let key in model_specs) {\n      if (model_specs[key] === null) {\n        delete model_specs[key]\n      }\n    }\n\n\n    formData.append('json', new Blob([JSON.stringify(jsonData)], {\n      type: 'application/json'\n    }));\n    \n    if (sampleState.geojson.features.length !== 0) {\n      formData.append('samples', new Blob([JSON.stringify(sampleState.geojson)], {\n        type: 'application/json'\n      }));\n    }\n    \n    axios.post(\"classification/\", formData, {\n      baseURL: process.env.PUBLIC_URL,\n      headers: {\n        \"X-CSRFToken\": csrfToken,\n      },\n      \n    }).then(response => {\n      let res_body = response.data\n\n      // add all new overlays\n      let overlays = []\n      let key = \"classification_result\"\n      let layer = new L.TileLayer(res_body[key].tile_url)\n      let overlay = {\n        layer: layer,\n        name: key,\n        url: res_body[key].download_url\n      }\n      overlays.push(overlay)\n\n      let message = \"\"\n\n      if (res_body.area) {\n        message += \"Rice area: <b>\" + res_body.area.toFixed(3) + \" ha</b>\\n\"\n      }\n      \n      if (res_body.confusion_matrix) {\n        let parsed = JSON.parse(res_body.confusion_matrix)\n        message += \n        `Confusion matrix:\n          <table class=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\"></th>\n              <th scope=\"col\">0</th>\n              <th scope=\"col\">1</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th scope=\"row\">0</td>\n              <td >${parsed[0][0]}</td>\n              <td >${parsed[0][1]}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">1</td>\n              <td >${parsed[1][0]}</td>\n              <td >${parsed[1][0]}</td>\n            </tr>\n          </tbody>\n          </table>\n          `\n      }\n\n      addTileOverlays(overlays)\n\n      setInfo(message)\n\n      setLoading(false)\n\n    }).catch(reason => {\n      setLoading(false)\n      alert(reason)\n    })\n\n    // set loading state\n    setLoading(true)\n\n    // remove all overlays before loading results\n    removeAllOverlays()\n  }\n\n  const handleExport = (key) => {\n    if (key === 'season') {\n      // Object.keys(downloadUrl).map(key => {\n      //   if (key !== \"combined\") {\n\n      //   }\n      // })\n    } else {\n\n    }\n  }\n\n  const handleChange = (field, value) => {\n    if (field === \"model\") {\n      dispatch(changeModel(value))\n    } else if (field.startsWith(\"model\")) {\n      dispatch(updateModelSpecs({ [field.split('.')[1]]: value}))\n    } else {\n      dispatch(update({ [field]: value }))\n    }\n    \n  }\n  \n  return (\n    <div className=\"sidebar h-100 flex-column\">\n      <Form method=\"POST\" onSubmit={handleSubmit} noValidate validated={validated}>\n        <TabContainer defaultActiveKey={tabNames.tab1} unmountOnExit={false}>\n          <Row className=\"tabs-nav g-0 flex-wrap\">\n            <Nav variant=\"pills\" className=\"h-100\">\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle w-100 h-100 h6 mb-0\" eventKey={tabNames.tab1} >{tabNames.tab1}</Nav.Link>\n              </Col>\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle h-100 w-100 h6 mb-0\" eventKey={tabNames.tab2} >{tabNames.tab2}</Nav.Link>\n              </Col>\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle h-100 w-100 h6 mb-0\" eventKey={tabNames.tab3} >{tabNames.tab3}</Nav.Link>\n              </Col>\n            </Nav>\n          </Row>\n          <Row className=\"tabs-content g-0 p-2\">\n            <Col>\n              <TabContent>\n                <TabPane eventKey={tabNames.tab1} >\n                  <fieldset >\n                    <SatelliteDataFilters />\n                    {/* {appName === \"empirical\" && <AuxDataFilters />} */}\n                    <AuxDataFilters />\n                  </fieldset>\n                </TabPane>\n\n                <TabPane eventKey={tabNames.tab2}>         \n                  <SampleContainer />\n                </TabPane>\n\n                <TabPane eventKey={tabNames.tab3} >\n                  <Card className=\"mb-2 border-secondary\">\n                    <Card.Header>\n                      <h6 className=\"m-0 p-0\">\n                        Image Date Range\n                      </h6>\n                    </Card.Header>\n                    <Card.Body>\n                      <Form.Group\n                        as={Row}\n                        controlId={\"date_start\"}\n                        className=\"mb-2 align-items-center\"\n                      >\n                        <Form.Label column xs={4}>\n                          Start Date:\n                        </Form.Label>\n                        <Col xs={8}>\n                          <Form.Control\n                            type=\"date\"\n                            value={classificationState[\"start_date\"]}\n                            onChange={(e) => handleChange(\"start_date\", e.target.value)}\n                          />\n                        </Col>\n                      </Form.Group>\n\n                      <Form.Group\n                        as={Row}\n                        controlId={\"date_end\"}\n                        className=\"mb-2 align-items-center\"\n                      >\n                        <Form.Label column xs={4}>\n                          End Date:\n                        </Form.Label>\n                        <Col xs={8}>\n                          <Form.Control\n                            type=\"date\"\n                            value={classificationState[\"end_date\"]}\n                            onChange={(e) => handleChange(\"end_date\", e.target.value)}\n                          />\n                        </Col>\n                      </Form.Group>\n\n                    </Card.Body>\n                  </Card>\n\n                  <Card className=\"mb-2 border-secondary\">\n                    <Card.Header>\n                      <h6 className=\"m-0 p-0\">\n                        Classification Details\n                      </h6>\n                    </Card.Header>\n                    <Card.Body>\n\n                      <Form.Group\n                        as={Row}\n                        controlId={\"train_test_ratio\"}\n                        className=\"mb-2 align-items-center\"\n                      >\n                        <Form.Label column xs={4}>\n                          Training Ratio: \n                        </Form.Label>\n                        <Col xs={8}>\n                          <Form.Control\n                            type=\"number\"\n                            step={\"0.05\"}\n                            value={classificationState[\"training_ratio\"]}\n                            onChange={(e) => handleChange(\"training_ratio\", e.target.value)}\n                          />\n                        </Col>\n\n                      </Form.Group>\n\n                      <Form.Group\n                        as={Row}\n                        controlId={\"model\"}\n                        className=\"mb-2 align-items-center\"\n                      >\n                        <Form.Label column xs={4}>\n                          Model:\n                        </Form.Label>\n                        <Col xs={8}>\n                          <Form.Select\n                            value={classificationState[\"model\"]}\n                            onChange={(e) => handleChange(\"model\", e.target.value)}\n                          >\n                            <option key=\"\"></option>\n                            {Object.keys(MODEL_SPECS).map(name => (\n                              <option key={name}>{name}</option>\n                            ))}\n                            {/* <option key=\"random_forest\">Random Forest</option>\n                            <option key=\"gradient_tree_boost\">Gradient Tree Boost</option> */}\n                          </Form.Select>\n                        </Col>\n                      </Form.Group>\n\n                      {classificationState[\"model\"] && Object.keys(MODEL_SPECS[classificationState[\"model\"]]).map(key => (\n                        <ModelSpecItem specName={key} handleChange={handleChange}/>\n                      ))}\n\n                    </Card.Body>\n                  </Card>\n                  \n                  <Button \n                    className=\"w-100\"\n                    type=\"submit\" \n                    variant={ loading ? \"secondary\" : \"primary\"} \n                    disabled={loading}\n                  >\n                    {loading ? (\n                      <div>\n                        Running...\n                        <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" ></Spinner>\n                      </div> \n                      ) \n                      : \n                      \"Run\"}\n                  </Button>\n                  \n                </TabPane>\n\n              </TabContent>\n            </Col>\n          </Row>\n        </TabContainer>\n      </Form>\n    </div>\n  )\n}\n\nconst ModelSpecItem = ({specName, handleChange}) => {\n\n  const classificationState = useSelector(state => state.classification)\n\n  let selectedModel = classificationState[\"model\"]\n\n  const handleModelSpecChange = (e) => {\n    handleChange(`model.${specName}`, e.target.value)\n  }\n\n  let renderLabel = () => {\n    return (\n      <Form.Label column xs={4}>\n        {specName}\n        {\"  \"}\n        <OverlayTrigger\n          trigger=\"hover\"\n          placement=\"right\"\n          overlay={\n            <Popover>\n              <Popover.Body>\n                {MODEL_SPECS[selectedModel][specName][\"description\"]}\n              </Popover.Body>\n            </Popover>\n          }\n        >\n          <InfoCircle />\n        </OverlayTrigger>\n      </Form.Label>\n    )\n  }\n\n  let renderInput = () => {\n    switch (MODEL_SPECS[selectedModel][specName][\"type\"]) {\n      case \"int\":\n        return (\n          <Form.Control\n            type=\"number\"\n            placeholder=\"Leave blank to use default value\"\n            step={\"1\"}\n            value={classificationState[\"model_specs\"][specName]}\n            onChange={handleModelSpecChange}\n          />\n        )\n      case \"float\":\n        return (\n          <Form.Control\n            type=\"number\"\n            placeholder=\"Leave blank to use default value\"\n            step={\"0.1\"}\n            value={classificationState[\"model_specs\"][specName]}\n            onChange={handleModelSpecChange}\n          />\n        )\n      case \"string\":\n        return (\n          <Form.Control\n            type=\"text\"\n            value={classificationState[\"model_specs\"][specName]}\n            onChange={handleModelSpecChange}\n          />\n        )\n      case \"select\":\n        return (\n          <Form.Select \n            value={classificationState[\"model_specs\"][specName]}\n            onChange={handleModelSpecChange}\n          >\n          {MODEL_SPECS[selectedModel][specName][\"options\"].map(option => (\n            <option key={option}>{option}</option>\n          ))}\n          </Form.Select>\n        )\n      default:\n        return (<></>);\n    }\n  }\n\n  return (\n    <Form.Group\n      as={Row}\n      controlId={specName}\n      className=\"mb-2 align-items-center\"\n    >\n      {renderLabel()}\n      <Col xs={8}>\n        {renderInput()}\n      </Col>\n    </Form.Group>\n  )\n\n}","import { Container, Nav, Navbar, Row } from 'react-bootstrap';\nimport { BrowserRouter, NavLink, Route, Switch, useLocation } from 'react-router-dom'\nimport Header from './components/Header'\nimport Home from './pages/Home';\nimport EmpiricalApp from './pages/EmpiricalApp';\nimport PhenologyApp from './pages/PhenologyApp';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { getCookie } from './utils/csrfToken';\nimport { setToken } from './features/phenology/csrfTokenSlice';\nimport ClassificationApp from './pages/ClassificationApp';\nimport { FilterPanel } from './components/panels/FilterPanel';\nimport AppStatusBar from './components/AppStatusBar';\nimport Map from './components/LeafletMap';\nimport SettingsPanel from './components/panels/SettingsPanel';\nimport { ClassificationPanel } from './components/panels/ClassificationPanel';\nimport SamplePanel from './components/panels/SamplePanel';\nimport MapPanel from './components/panels/MapPanel';\nimport { APP_NAME, setAppName } from './features/phenology/appNameSlice';\n\nimport './App.css'\n\n\nfunction App() {\n\n  const location = useLocation()\n\n  const dispatch = useDispatch()\n\n  const appName = useSelector(state => state.appName)\n\n  const [info, setInfo] = useState(\"Please run the app to show area of rice.\")\n\n  useEffect(() => {\n    let token = getCookie('csrftoken')\n    dispatch(setToken(token))\n  }, [])\n\n  useEffect(() => {\n    let temp = location.pathname.split('/')\n    let currentName = temp[temp.length - 1] || \"home\"\n    \n    dispatch(setAppName(APP_NAME[currentName]))\n  }, [location])\n\n  return (\n    <div className=\"d-flex flex-column vh-100 vw-100\">\n      <Header />\n      <AppStatusBar />\n      <div className=\"main d-flex flex-row h-100 w-100\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n        <div className=\"left-panel\">\n          <Switch>\n          <Route exact path=\"/empirical\">\n            {/* <EmpiricalApp /> */}\n            <FilterPanel setInfo={setInfo} />\n          </Route>\n          <Route exact path=\"/phenology\">\n            {/* <PhenologyApp /> */}\n            <SettingsPanel />\n          </Route>\n          <Route exact path=\"/classification\">\n            {/* <ClassificationApp /> */}\n            <ClassificationPanel setInfo={setInfo} />\n          </Route>\n          </Switch>\n        </div>\n\n        <div className=\"mid-panel h-100\">\n          <Switch>\n            <Route exact path={[\"/empirical\", \"/phenology\", \"/classification\"]}>\n              <MapPanel info={info}/>\n            </Route>\n          </Switch>\n        </div>\n\n        \n          <Route exact path=\"/phenology\">\n            <div className='right-panel'>\n              <SamplePanel />\n            </div>\n          </Route>\n        \n      </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","export function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport csrfTokenReducer from \"./features/phenology/csrfTokenSlice\";\nimport datasetReducer from './features/phenology/datasetSlice'\nimport sampleReducer from \"./features/phenology/sampleSlice\";\nimport seasonReducer from \"./features/phenology/seasonSlice\";\nimport editingReducer from \"./features/phenology/editingSlice\";\nimport appStatusReducer from \"./features/phenology/appStatusSlice\";\nimport appNameReducer from \"./features/phenology/appNameSlice\";\nimport classificationReducer from \"./features/phenology/classificationSlice\";\n\nexport default configureStore({\n    reducer: {\n        csrfToken: csrfTokenReducer,\n        dataset: datasetReducer,\n        seasons: seasonReducer,\n        samples: sampleReducer,\n        editing: editingReducer,\n        appStatus: appStatusReducer,\n        appName: appNameReducer,\n        classification: classificationReducer,\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}