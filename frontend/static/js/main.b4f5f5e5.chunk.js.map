{"version":3,"sources":["utils/constants.js","features/editingSlice.js","features/sampleSlice.js","components/SampleContainer.jsx","components/LeafletMap.jsx","features/appStatusSlice.js","features/logSlice.js","components/ExportImages.jsx","apps/classification/ClassificationActions.jsx","apps/empirical/EmpiricalActions.jsx","features/datasetSlice.js","components/DataFilterGroup.jsx","features/seasonSlice.js","components/SeasonFilterGroup.jsx","apps/phenology/PhenologyActions.jsx","components/ExportStatus.jsx","components/Header.jsx","features/appNameSlice.js","components/Home.jsx","features/csrfTokenSlice.js","components/AppStatusBar.jsx","components/ChartContainer.jsx","components/SeasonPanel.jsx","apps/phenology/PhenologyRight.jsx","apps/phenology/PhenologyLeft.jsx","apps/empirical/EmpiricalLeft.jsx","apps/empirical/EmpiricalRight.jsx","features/classificationSlice.js","components/ClassificationFilters.jsx","apps/classification/ClassificationLeft.jsx","apps/classification/ClassificationRight.jsx","components/MapCarousel.jsx","components/LogPanel.jsx","App.js","utils/csrfToken.js","reportWebVitals.js","store.js","index.js"],"names":["districtList","dataList","radar","optical","featureList","VH","VV","NDVI","EVI","NDWI","MNDWI","BASEMAPS","url","attribution","editingSlice","createSlice","name","initialState","reducers","toggle","state","actions","sampleSlice","selected","geojson","type","features","classProperty","positiveValue","phenology","start_date","end_date","replace","action","payload","addFeatures","push","deleteFeature","idx","findIndex","value","index","properties","idField","splice","selectFeature","setClassProperty","changePhenologyDate","POSITIVE_STYLE","radius","fillColor","stroke","color","opacity","fillOpacity","NEGATIVE_STYLE","SampleContainer","sampleState","useSelector","samples","dispatch","useDispatch","useEffect","geojsonLayer","eachLayer","layer","feature","setStyle","selected_sample","filter","f","latlon","geometry","coordinates","reverse","panToLatLng","openPopup","handleUploadFile","e","a","target","files","length","file","shp","arrayBuffer","forEach","i","map","removeLayer","L","geoJSON","pointToLayer","geoJsonPoint","latlng","circleMarker","onEachFeature","bindPopup","ReactDOMServer","renderToString","json","Table","striped","bordered","hover","Object","entries","key","val","JSON","stringify","maxHeight","maxWidth","addTo","setGeojsonLayer","addGeoJsonOverlay","Card","className","Header","Stack","direction","gap","Button","variant","size","as","htmlFor","id","onChange","onClick","console","log","json_blob","Blob","saveAs","Body","Form","Select","disabled","field","keys","k","Set","v","ListGroup","SampleItem","props","Item","handleSelectSample","active","style","backgroundColor","stopPropagation","handleDelete","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","default","iconUrl","shadowUrl","layerControlRef","tileOverlays","addTileOverlays","overlays","current","overlay","addOverlay","removeAllOverlays","lat","lng","panTo","Map","appName","lcRef","useRef","setTimeout","invalidateSize","MapContainer","center","zoom","whenCreated","m","LayersControl","ref","basemap","BaseLayer","checked","TileLayer","appStatusSlice","status","info","setStatus","setInfo","logSlice","appendLog","time","Date","toLocaleString","ExportImages","downloadUrl","csrfToken","datasetFilters","dataset","seasonFilters","seasons","classificationState","classification","DropdownButton","title","onSelect","formData","FormData","jsonData","op","_","cloneDeep","boundary_file","append","model_specs","axios","post","baseURL","process","headers","then","response","res_body","data","catch","error","handleExport","Dropdown","eventKey","ClassificationActions","useState","loading","setLoading","setDownLoadUrl","tile_url","download_url","message","area","toFixed","confusion_matrix","parsed","parse","oa","kappa","Spinner","animation","role","EmpiricalActions","setValidated","preventDefault","currentTarget","checkValidity","datasetSlice","cloud","composite","composite_days","ascd","desc","boundary","use_crop_mask","crop_mask","phenology_start_date","phenology_end_date","update","changeDataSource","SatelliteDataFilters","handleChange","Group","Row","controlId","Label","column","xs","Col","label","Control","min","max","step","Check","AuxDataFilters","required","URL","createObjectURL","changeOp","changeSeasonName","oldName","newName","addSeason","start","end","deleteSeason","modifySeason","SeasonSlice","SeasonFilterGroup","inputThres","readOnly","seasonFilter","setName","editing","setEditing","ToggleButton","plaintext","defaultValue","sm","placeholder","PhenologyActions","endsWith","alert","candidates","sample","words","split","date","Number","parseInt","getTime","filteredCandidates","arr","first","d3","third","interquatile","upperbound","lowerbound","element","removeOutliers","mean","sum","std","Math","sqrt","pow","state2color","ExportStatus","setTasks","task","setTask","show","setShow","taskId","setTaskId","get","Modal","onHide","Accordion","Badge","bg","responseType","Navbar","expand","fixed","Container","fluid","Brand","href","Toggle","Collapse","Nav","Link","to","NavLink","NavDropdown","APP_NAME","home","empirical","appNameSlice","setAppName","Home","csrfTokenSlice","setToken","AppStatusBar","ChartContainer","chartModalShow","setChartModalShow","chartData","setChartData","curve_data","sort","b","row","Array","fill","prepareChartData","csv","join","positiveSamples","curveData","undefined","d","fullscreen","closeButton","Title","ChartArea","width","height","chartType","loader","options","hAxis","format","vAxis","legend","position","pointSize","rootProps","legendToggle","SeasonPanel","tabNames","PhenologyRight","TabContainer","defaultActiveKey","unmountOnExit","TabContent","TabPane","PhenologyLeft","validated","method","noValidate","EmpiricalLeft","EmpiricalRight","handleChangeLogicalOperation","MODEL_SPECS","numberOfTrees","description","variablesPerSplit","minLeafPopulation","bagFraction","maxNodes","seed","classificationSlice","updateModelSpecs","changeModel","model","ClassificationFilters","startsWith","specName","ModelSpecItem","selectedModel","handleModelSpecChange","OverlayTrigger","trigger","placement","Popover","option","renderInput","ClassificationLeft","ClassificationRight","SmallMap","point","setMapObj","zoomControl","Marker","MapCarousel","selectedSample","smallMapObjs","setSmallMapObjs","values","newSmallMapObj","temp_date","getUTCFullYear","getUTCMonth","setUTCMonth","flexShrink","params","res","body","LogPanel","leftSize","rightSize","App","location","useLocation","token","cookieValue","document","cookie","cookies","trim","substring","decodeURIComponent","getCookie","temp","pathname","currentName","exact","path","defaultSize","minSize","maxSize","primary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","csrfTokenReducer","datasetReducer","seasonReducer","sampleReducer","editingReducer","appStatus","appStatusReducer","appNameReducer","classificationReducer","logReducer","ReactDOM","render","StrictMode","basename","store","getElementById"],"mappings":"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","file":"static/js/main.b4f5f5e5.chunk.js","sourcesContent":["export const districtList = {\n  \"upload\": \"Upload boundary file (shp)\",\n  \"MORANG\": \"MORANG\",\n  \"SUNSARI\": \"SUNSARI\",\n  \"JHAPA\": \"JHAPA\",\n  \"MAHOTTARI\": \"MAHOTTARI\",\n  \"PARSA\": \"PARSA\",\n  \"RAUTAHAT\": \"RAUTAHAT\",\n  \"SAPTARI\": \"SAPTARI\",\n  \"SARLAHI\": \"SARLAHI\",\n  \"SIRAHA\": \"SIRAHA\",\n  \"BARA\": \"BARA\",\n  \"DHANUSHA\": \"DHANUSHA\",\n  \"CHITAWAN\": \"CHITAWAN\",\n  \"NAWALPARASI_E\": \"NAWALPARASI_E\",\n  \"KAPILBASTU\": \"KAPILBASTU\",\n  \"NAWALPARASI_W\": \"NAWALPARASI_W\",\n  \"RUPANDEHI\": \"RUPANDEHI\",\n  \"BANKE\": \"BANKE\",\n  \"BARDIYA\": \"BARDIYA\",\n  \"DANG\": \"DANG\",\n  \"KAILALI\": \"KAILALI\",\n  \"KANCHANPUR\": \"KANCHANPUR\",\n};\n\nexport const dataList = {\n  radar: {\n    \"COPERNICUS/S1_GRD\":\n      \"Sentinel-1 SAR GRD: C-band Synthetic Aperture Radar Ground Range Detected, log scaling\",\n  },\n  optical: {\n    // \"MODIS/006/MOD13Q1\":\n    //   \"MOD13Q1.006 Terra Vegetation Indices 16-Day Global 250m\",\n    \"LANDSAT/LT05/C01/T1_TOA\":\n      \"USGS Landsat 5 TM Collection 1 Tier 1 TOA Reflectance\",\n    \"LANDSAT/LT05/C01/T1_SR\": \"USGS Landsat 5 Surface Reflectance Tier 1\",\n    \"LANDSAT/LC08/C01/T1_TOA\":\n      \"USGS Landsat 8 Collection 1 Tier 1 TOA Reflectance\",\n    \"COPERNICUS/S2\": \"Sentinel-2 MSI: MultiSpectral Instrument, Level-1C\",\n    \"COPERNICUS/S2_SR\": \"Sentinel-2 MSI: MultiSpectral Instrument, Level-2A\",\n  },\n};\n\nexport const featureList = {\n  radar: {\n    VH: \"VH band\",\n    VV: \"VV band\",\n    \"VH/VV\": \"VH/VV (cross ratio)\",\n  },\n  optical: {\n    NDVI: \"NDVI\",\n    EVI: \"EVI\",\n    NDWI: \"NDWI\",\n    MNDWI: \"MNDWI\",\n  },\n};\n\n\n\nexport const BASEMAPS = {\n  \"Google Maps\": {\n    url: \"https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\",\n    attribution: \"Google\"\n  },\n  \"Google Satellite\": {\n    url: 'https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n    attribution: \"Google\"\n  },\n  \"Google Terrain\": {\n    url: \"https://mt1.google.com/vt/lyrs=p&x={x}&y={y}&z={z}\",\n    attribution: \"Google\",\n  },\n  \"ESRI World Imagery\": {\n    url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n    attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n  }\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\n\nexport const editingSlice = createSlice({\n  name: \"editing\",\n  initialState: false,\n  reducers: {\n    toggle: (state) => !state\n  }\n})\n\nexport const { toggle } = editingSlice.actions\n\nexport default editingSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\";\nimport { idField } from \"../components/SampleContainer\";\n\nconst initialState = {\n  selected: null,\n  geojson: {\n    type: \"FeatureCollection\",\n    features: [],\n  },\n  classProperty: {\n    name: null,\n    positiveValue: null,\n  },\n\n  phenology: {\n    start_date: \"2019-01\",\n    end_date: \"2019-12\",\n  },\n};\n\nexport const sampleSlice = createSlice({\n  name: \"samples\",\n  initialState,\n  reducers: {\n    replace: (state, action) => {\n      state.geojson = action.payload;\n      state.selected = null;\n      return state;\n    },\n    addFeatures: (state, action) => {\n      state.geojson.features.push(action.payload);\n      return state;\n    },\n    deleteFeature: (state, action) => {\n      let idx = state.geojson.features.findIndex((value, index) => {\n        return value.properties[idField] === action.payload;\n      });\n      state.geojson.features.splice(idx, 1);\n    },\n    selectFeature: (state, action) => {\n      state.selected = action.payload;\n    },\n    setClassProperty: (state, action) => {\n      state.classProperty = { ...state.classProperty, ...action.payload };\n    },\n    changePhenologyDate: (state, action) => {\n      state.phenology = { ...state.phenology, ...action.payload };\n    },\n  },\n});\n\nexport const {\n  replace,\n  addFeatures,\n  deleteFeature,\n  selectFeature,\n  setClassProperty,\n  changePhenologyDate,\n} = sampleSlice.actions;\n\nexport default sampleSlice.reducer;\n","import ReactDOMServer from \"react-dom/server\";\r\nimport { Button, ButtonGroup, Card, Col, Container, Form, ListGroup, Modal, Nav, Row, Stack, TabContainer, TabContent, Table, TabPane } from \"react-bootstrap\";\r\nimport shp from \"shpjs\";\r\nimport L from \"leaflet\";\r\nimport { map, layerControlRef, addTileOverlays, panToLatLng, geojsonLayer, setGeojsonLayer, addGeoJsonOverlay } from \"../components/LeafletMap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  replace,\r\n  addFeatures,\r\n  selectFeature,\r\n  setClassProperty,\r\n  deleteFeature\r\n} from \"../features/sampleSlice\";\r\nimport { useEffect } from \"react\";\r\nimport _, { sample } from 'lodash'\r\nimport { ArrowsFullscreen, FileEarmarkArrowUpFill, SaveFill, TrashFill, Upload } from \"react-bootstrap-icons\";\r\nimport { saveAs } from 'file-saver'\r\n\r\n\r\nexport const idField = \"_$id\"\r\n\r\nconst POSITIVE_STYLE = {\r\n  radius: 3, \r\n  fillColor: \"red\", \r\n  stroke: 0.2,\r\n  color: \"black\",\r\n  opacity: 0.5,\r\n  fillOpacity: 1,\r\n}\r\n\r\nconst NEGATIVE_STYLE = {\r\n  radius: 3, \r\n  fillColor: \"blue\", \r\n  stroke: 0.2,\r\n  color: \"black\",\r\n  opacity: 0.5,\r\n  fillOpacity: 1,\r\n}\r\n\r\n\r\nconst json2table = (json) => {\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <th>key</th>\r\n        <th>value</th>\r\n      </thead>\r\n      <tbody>\r\n        {Object.entries(json).map(([key, val]) => (\r\n          <tr key={key}>\r\n            <td>{key}</td>\r\n            <td>{JSON.stringify(val)}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\n\r\nexport const SampleContainer = () => {\r\n\r\n\r\n  const sampleState = useSelector((state) => state.samples);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (sampleState.classProperty.name === null) return;\r\n\r\n    geojsonLayer.eachLayer(layer => {\r\n      let geoJsonPoint = layer.feature;\r\n      if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\r\n        layer.setStyle(POSITIVE_STYLE)\r\n      } else {\r\n        layer.setStyle(NEGATIVE_STYLE)\r\n      }\r\n    })\r\n\r\n  }, [sampleState.classProperty])\r\n\r\n  useEffect(() => {\r\n    if (typeof sampleState.selected === 'number') {\r\n      // console.log(sampleState.selected.geometry.coordinates.reverse())\r\n      let selected_sample = sampleState.geojson.features.filter(f => f.properties[idField] == sampleState.selected)[0]\r\n      let latlon = [...selected_sample.geometry.coordinates].reverse()\r\n      panToLatLng(latlon)\r\n      if (geojsonLayer) {\r\n        // geojsonLayer.openPopup(latlon)\r\n        // let a = L.geoJSON()\r\n        // a.eachLayer(layer => layer.fea)\r\n        geojsonLayer.eachLayer(layer => {\r\n          if (layer.feature.properties[idField] === sampleState.selected) {\r\n            layer.openPopup(latlon)\r\n          }\r\n        })\r\n      }\r\n      \r\n      \r\n    }\r\n  }, [sampleState.selected, sampleState.geojson])\r\n\r\n\r\n  const handleUploadFile = async (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      let file = e.target.files[0];\r\n      let geojson = await shp(await file.arrayBuffer());\r\n      geojson.features.forEach((feature, i)=> {\r\n        feature.properties[idField] = i+1   // avoid using 0 to prevent it getting cast to false\r\n      })\r\n\r\n      // if (geojson.features[0].geometry.type !== \"Point\") {\r\n      // }\r\n      if (geojsonLayer) {\r\n        map.removeLayer(geojsonLayer)\r\n      }\r\n      // create geojson layer\r\n      let layer = L.geoJSON(geojson, {\r\n        pointToLayer: (geoJsonPoint, latlng) => {\r\n          if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\r\n            return L.circleMarker(latlng, POSITIVE_STYLE)\r\n          } else {\r\n            return L.circleMarker(latlng, NEGATIVE_STYLE)\r\n          }\r\n        },\r\n        onEachFeature: (feature, layer) => {\r\n          layer.bindPopup(layer => {\r\n            return ReactDOMServer.renderToString(json2table(layer.feature.properties))\r\n          }, {\r\n            maxHeight: \"400\",\r\n            maxWidth: \"400\",\r\n          })\r\n        }\r\n      })\r\n      layer.addTo(map);\r\n      \r\n      setGeojsonLayer(layer)\r\n\r\n      // let overlays = [\r\n      //   {\r\n      //     layer: layer,\r\n      //     name: file.name,\r\n      //   },\r\n      // ];\r\n      addGeoJsonOverlay();\r\n\r\n      dispatch(replace(geojson));\r\n    }\r\n  };\r\n\r\n  const handleSelectClassField = (field) => {\r\n    dispatch(setClassProperty({\r\n      name: field,\r\n      positiveValue: null,\r\n    }))\r\n  }\r\n\r\n  const handleChangeClassValue = (value) => {\r\n    dispatch(setClassProperty({\r\n      positiveValue: value\r\n    }))\r\n  }\r\n\r\n  const handleSaveSamples = (e) => {\r\n    console.log(sampleState.geojson)\r\n    const json_blob = new Blob([JSON.stringify(sampleState.geojson)], {type: \"application/json\"})\r\n    saveAs(json_blob, \"samples.geojson\")\r\n  }\r\n\r\n  return (\r\n    <Card className=\"h-100 w-100 overflow-auto\">\r\n      <Card.Header>\r\n        <Stack direction=\"horizontal\" gap={2}>\r\n          <div className=\"me-auto\">\r\n            <h6 className=\"m-0 p-0\">\r\n              Samples { `(count: ${sampleState.geojson.features.length})`}\r\n            </h6>\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              variant=\"primary\"\r\n              size=\"sm\"\r\n              className=\"h-100 w-100\"\r\n              as=\"label\"\r\n              htmlFor=\"sample-uploa\"\r\n            >\r\n              Upload\r\n            </Button>\r\n            <input\r\n              type=\"file\"\r\n              className=\"d-none\"\r\n              id=\"sample-uploa\"\r\n              onChange={handleUploadFile}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Button\r\n              variant=\"secondary\"\r\n              size=\"sm\"\r\n              className=\"h-100 w-100\"\r\n              onClick={handleSaveSamples}\r\n            >\r\n              Download\r\n            </Button>\r\n          </div>\r\n\r\n        </Stack>\r\n\r\n      </Card.Header>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"container card mb-2\">\r\n          <div className=\"p-2\">\r\n            <div className=\"row align-items-center mb-2\">\r\n              <div className=\"col-auto\">Class field:</div>\r\n              <div className=\"col\">\r\n                <Form.Select \r\n                  className=\"w-100\"\r\n                  value={sampleState.classProperty.name || \"\"}\r\n                  disabled={!!!sampleState.geojson.features.length}\r\n                  onChange={e => handleSelectClassField(e.target.value)}\r\n                >\r\n                  <option></option>\r\n                  {sampleState.geojson.features.length !== 0 && Object.keys(sampleState.geojson.features[0].properties).map(k => (\r\n                    <option key={k}>{k}</option>\r\n                  ))}\r\n                </Form.Select>\r\n              </div>\r\n            </div>\r\n            <div className=\"row align-items-center\">\r\n              <div className=\"col-auto\">Class value:</div>\r\n              <div className=\"col\"> \r\n                <Form.Select \r\n                  value={sampleState.classProperty.positiveValue || \"\"}\r\n                  disabled={!!!sampleState.classProperty.name}\r\n                  onChange={e => handleChangeClassValue(e.target.value)}\r\n                >\r\n                  <option></option>\r\n                  {sampleState.geojson.features.length !== 0 && [...new Set(sampleState.geojson.features.map(feature => feature.properties[sampleState.classProperty.name]))].map(v => {\r\n                    return (<option key={v}>{v}</option>)\r\n                  })\r\n                  }\r\n                </Form.Select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <ListGroup className=\"sample-list\">\r\n          {sampleState.geojson &&\r\n            sampleState.geojson.features.map((feature, idx) => (\r\n              <SampleItem feature={feature} idx={idx} />\r\n            ))}\r\n        </ListGroup>\r\n      </Card.Body>\r\n\r\n\r\n    </Card>\r\n  )\r\n\r\n}\r\n\r\n\r\nconst SampleItem = (props) => {\r\n\r\n  const { idx, feature } = props;\r\n\r\n  const sampleState = useSelector(state => state.samples)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleSelectSample = (idx) => {\r\n    dispatch(selectFeature(idx));\r\n  };\r\n\r\n  const handleDelete = (e, id) => {\r\n    e.stopPropagation()\r\n    console.log(id)\r\n    geojsonLayer.eachLayer(layer => {\r\n      \r\n      if (id === layer.feature.properties[idField]) {\r\n        geojsonLayer.removeLayer(layer)\r\n      }\r\n    })\r\n    dispatch(deleteFeature(id))\r\n    dispatch(selectFeature(null))\r\n  }\r\n\r\n  return (\r\n    <ListGroup.Item\r\n      action\r\n      className=\"px-3 py-1\"\r\n      key={idx}\r\n      onClick={() => handleSelectSample(feature.properties[idField])}\r\n      active={feature.properties[idField] == sampleState.selected}\r\n      style={{backgroundColor: feature.properties[sampleState.classProperty.name] == sampleState.classProperty.positiveValue ? \"lightgreen\" : null}}\r\n    >\r\n      <div className=\"d-flex align-items-center flex-row justify-content-between\">\r\n        <div>\r\n          {`${feature.properties[idField]} - ${feature.properties[sampleState.classProperty.name]}`}\r\n        </div>\r\n        <div >\r\n          <Button\r\n            variant=\"light\"\r\n            size=\"sm\"\r\n            className=\"h-100 w-100 px-0 bg-transparent\"\r\n            as=\"label\"\r\n            onClick={(e) => handleDelete(e, feature.properties[idField])}\r\n          >\r\n            <TrashFill />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      \r\n    </ListGroup.Item>\r\n  )\r\n}","import {\n  LayersControl,\n  MapContainer,\n  TileLayer,\n  useMap,\n  GeoJSON,\n  Popup,\n} from \"react-leaflet\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport { useMemo, useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport _ from \"lodash\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { useContext } from \"react\";\nimport { BASEMAPS } from \"../utils/constants\";\nimport { toggle } from \"../features/editingSlice\";\n\n\nimport L from \"leaflet\";\n\nimport parse from 'html-react-parser'\nimport { idField } from \"./SampleContainer\";\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png').default,\n    iconUrl: require('leaflet/dist/images/marker-icon.png').default,\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png').default\n});\n\nconst defaultBaseMap = \"Google Maps\";\n\n// global variable to hold Leaflet-related variables and methods\nexport let map = null;\nexport let layerControlRef = null;\nexport let tileOverlays = [];\nexport let geojsonLayer = null;\nexport const setGeojsonLayer = (layer) => geojsonLayer = layer\n\nexport const addTileOverlays = (overlays) => {\n  if (map && layerControlRef.current) {\n    overlays.forEach((overlay) => {\n      overlay.layer.addTo(map);\n      layerControlRef.current.addOverlay(overlay.layer, overlay.name);\n      tileOverlays.push(overlay.layer);\n    });\n  }\n};\n\nexport const addGeoJsonOverlay = () => {\n  if (geojsonLayer && map && layerControlRef.current) {\n    geojsonLayer.addTo(map);\n    layerControlRef.current.addOverlay(geojsonLayer, \"samples\")\n  }\n}\n\nexport const removeAllOverlays = (state) => {\n  tileOverlays.forEach((layer) => {\n    layerControlRef.current.removeLayer(layer);\n    map.removeLayer(layer);\n  });\n};\n\nexport const panToLatLng = ([lat, lng]) => {\n  if (map) {\n    map.panTo([lat, lng]);\n  }\n};\n\n\nexport function Map(props) {\n  // const { info } = props;\n\n  const appName = useSelector(state => state.appName)\n\n  const lcRef = useRef();\n\n  const sampleState = useSelector(state => state.samples)\n\n  useEffect(() => {\n    layerControlRef = lcRef;\n    setTimeout(() => {\n      addTileOverlays(tileOverlays)\n      addGeoJsonOverlay()\n    }, 400)\n    \n  }, []);\n\n\n  useEffect(() => {\n    if (sampleState.selected) {\n\n      let selected_sample = sampleState.geojson.features.filter(f => f.properties[idField] === sampleState.selected)[0]\n      let latlon = [...selected_sample.geometry.coordinates].reverse()\n      panToLatLng(latlon)\n\n    }\n  }, [sampleState.selected])\n\n  useEffect(()=>{\n    if (map) {\n      map.invalidateSize();\n    }\n  },[appName])\n\n  // const displayMap = useMemo(\n  //   () => (\n  //     <MapContainer\n  //       center={[28.5973518, 83.54495724]}\n  //       zoom={8}\n  //       id=\"map\"\n  //       whenCreated={(m) => {\n  //         map = m;\n  //       }}\n  //     >\n  //       <LayersControl ref={lcRef}>\n  //         {/* base maps */}\n  //         {Object.entries(BASEMAPS).map(([name, basemap]) => (\n  //           <LayersControl.BaseLayer\n  //             name={name}\n  //             checked={name === defaultBaseMap}\n  //             key={name}\n  //           >\n  //             <TileLayer url={basemap.url} attribution={basemap.attribution} />\n  //           </LayersControl.BaseLayer>\n  //         ))}\n\n  //       </LayersControl>\n\n  //       {/* {showEditControl ? <EditingControl /> : null} */}\n\n  //       {appName !== \"phenology\" ? <InfoControl info={info} /> : null}\n  //     </MapContainer>\n  //   ),\n  //   []\n  // );\n\n  return (\n    <MapContainer\n      center={[28.5973518, 83.54495724]}\n      zoom={8}\n      id=\"map\"\n      whenCreated={(m) => {\n        map = m;\n      }}\n    >\n      <LayersControl ref={lcRef}>\n        {/* base maps */}\n        {Object.entries(BASEMAPS).map(([name, basemap]) => (\n          <LayersControl.BaseLayer\n            name={name}\n            checked={name === defaultBaseMap}\n            key={name}\n          >\n            <TileLayer url={basemap.url} attribution={basemap.attribution} />\n          </LayersControl.BaseLayer>\n        ))}\n\n      </LayersControl>\n\n      {/* {showEditControl ? <EditingControl /> : null} */}\n\n      {/* {appName !== \"phenology\" ? <InfoControl /> : null} */}\n    </MapContainer>\n  );\n}\n\n\n// const InfoControl = (props) => {\n//   // const { info } = props;\n\n//   const appStatus = useSelector(state => state.appStatus)\n\n//   return (\n//     <div className=\"leaflet-bottom leaflet-left\">\n//       <div className=\"leaflet-control leaflet-bar info-board\">\n//         {parse(appStatus.info)}\n//       </div>\n//     </div>\n//   );\n// };\n\n\n\nexport default Map;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const APP_STATUS = {\n  ready: \"Ready\",\n  running: \"Running...\",\n  finished: \"Finished\",\n}\n\nexport const appStatusSlice = createSlice({\n  name: \"appStatus\",\n  initialState: {\n    status: APP_STATUS.ready,\n    info: \"Please run the app to show area of rice.\"\n  },\n  reducers: {\n    setStatus: (state, action) => {\n      state.status = action.payload\n      return state\n    },\n    setInfo: (state, action) => {\n      state.info = action.payload\n      return state\n    }\n  }\n})\n\nexport const { setStatus, setInfo } = appStatusSlice.actions\n\nexport default appStatusSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\n\r\nexport const logSlice = createSlice({\r\n  name: \"log\",\r\n  initialState: \"\",\r\n  reducers: {\r\n    appendLog: (state, action) => {\r\n      const d = new Date()\r\n      let time = d.toLocaleString()\r\n      state += `<p><b>[${time}]</b> ${action.payload}<br></p>`\r\n      return state\r\n    },\r\n  }\r\n})\r\n\r\nexport const { appendLog } = logSlice.actions\r\nexport default logSlice.reducer","import axios from 'axios'\r\nimport {saveAs} from 'file-saver'\r\n\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nimport _ from \"lodash\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { appendLog } from '../features/logSlice';\r\n\r\n\r\nexport const ExportImages = ({downloadUrl}) => {\r\n\r\n  const csrfToken = useSelector(state => state.csrfToken)\r\n  const datasetFilters = useSelector(state => state.dataset)\r\n  const seasonFilters = useSelector(state => state.seasons)\r\n  const appName = useSelector(state => state.appName)\r\n  const classificationState = useSelector(state => state.classification)\r\n  const sampleState = useSelector(state => state.samples)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleExport = (key) => {\r\n    if (key === 'toJpeg') {\r\n      // export to jpeg\\\r\n      if (downloadUrl !== \"\") {\r\n        saveAs(downloadUrl, 'result.jpg')\r\n      }\r\n    } else {\r\n      // export to google drive\r\n      const formData = new FormData()\r\n      const jsonData = {}\r\n\r\n      if (appName === \"empirical\") {\r\n        \r\n        jsonData['op'] = seasonFilters.op\r\n        jsonData['seasons'] = seasonFilters.seasons\r\n\r\n        jsonData['dataset'] = _.cloneDeep(datasetFilters)\r\n        if (jsonData['dataset'].boundary_file) {\r\n          formData.append('boundary_file', jsonData['dataset'].boundary_file)\r\n          delete jsonData['dataset'].boundary_file\r\n        } \r\n\r\n        formData.append('json', new Blob([JSON.stringify(jsonData)], {\r\n          type: 'application/json'\r\n        }));\r\n      } else if (appName === \"classification\") {\r\n\r\n        jsonData['dataset'] = _.cloneDeep(datasetFilters)\r\n        if (jsonData['dataset'].boundary_file) {\r\n          formData.append('boundary_file', jsonData['dataset'].boundary_file)\r\n          delete jsonData['dataset'].boundary_file\r\n        } \r\n        jsonData['classification'] = _.cloneDeep(classificationState)\r\n        jsonData['classification']['class_property'] = sampleState['classProperty']\r\n        let model_specs = jsonData['classification']['model_specs']\r\n        for (let key in model_specs) {\r\n          if (model_specs[key] === null) {\r\n            delete model_specs[key]\r\n          }\r\n        }\r\n\r\n        formData.append('json', new Blob([JSON.stringify(jsonData)], {\r\n          type: 'application/json'\r\n        }));\r\n        \r\n        if (sampleState.geojson.features.length !== 0) {\r\n          formData.append('samples', new Blob([JSON.stringify(sampleState.geojson)], {\r\n            type: 'application/json'\r\n          }));\r\n        }\r\n      }\r\n\r\n      \r\n      axios.post(appName + \"/export\", formData, {\r\n        baseURL: process.env.PUBLIC_URL,\r\n        headers: {\r\n          \"X-CSRFToken\": csrfToken,\r\n        },\r\n        \r\n      }).then(response => {\r\n        let res_body = response.data\r\n        // console.log(res_body)\r\n        dispatch(appendLog(\"Export task ID: <b>\" + res_body + \"</b>. Please use this ID to check export task status.\"))\r\n\r\n      }).catch(error => {\r\n        // setLoading(false)\r\n        dispatch(appendLog(\"<b>Failed</b> with the reason: \" + error.response.data))\r\n      })\r\n\r\n      dispatch(appendLog(\"Run export task with parameters: <br>\" + JSON.stringify(jsonData)))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DropdownButton \r\n      id=\"export-dropdown\" \r\n      size=\"sm\"\r\n      title=\"Export\" \r\n      onSelect={(key, e) => handleExport(key)}\r\n    >\r\n      <Dropdown.Item eventKey=\"toJpeg\" disabled={downloadUrl===\"\"}>Download as thumbnail</Dropdown.Item>\r\n      <Dropdown.Item eventKey=\"toDrive\">Export to Google Drive</Dropdown.Item>\r\n    </DropdownButton>\r\n  )\r\n}","import { ButtonGroup, Button, Spinner, Dropdown, DropdownButton, Card, OverlayTrigger, Popover, Stack } from \"react-bootstrap\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport L from 'leaflet'\r\nimport { map, layerControlRef, addTileOverlays, removeAllOverlays } from \"../../components/LeafletMap\"\r\n\r\nimport { setInfo } from \"../../features/appStatusSlice\";\r\nimport { useState } from \"react\";\r\nimport { ExportImages } from \"../../components/ExportImages\";\r\nimport { appendLog } from \"../../features/logSlice\";\r\n\r\n\r\nexport const ClassificationActions = () => {\r\n\r\n  const csrfToken = useSelector(state => state.csrfToken)\r\n  const datasetFilters = useSelector(state => state.dataset)\r\n  // const seasonFilters = useSelector(state => state.seasons)\r\n  const appName = useSelector(state => state.appName)\r\n  const classificationState = useSelector(state => state.classification)\r\n  const sampleState = useSelector(state => state.samples)\r\n  const dispatch = useDispatch()\r\n\r\n  // local state\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // const [success, setSuccess] = useState(undefined); // undefined - normal; false - invalid; true - \r\n\r\n  const [downloadUrl, setDownLoadUrl] = useState(\"\")\r\n\r\n  const handleSubmit = () => {\r\n\r\n    const formData = new FormData()\r\n\r\n    let jsonData = {}\r\n\r\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\r\n    if (jsonData['dataset'].boundary_file) {\r\n      formData.append('boundary_file', jsonData['dataset'].boundary_file)\r\n      delete jsonData['dataset'].boundary_file\r\n    } \r\n    jsonData['classification'] = _.cloneDeep(classificationState)\r\n    jsonData['classification']['class_property'] = sampleState['classProperty']\r\n    let model_specs = jsonData['classification']['model_specs']\r\n    for (let key in model_specs) {\r\n      if (model_specs[key] === null) {\r\n        delete model_specs[key]\r\n      }\r\n    }\r\n\r\n\r\n    formData.append('json', new Blob([JSON.stringify(jsonData)], {\r\n      type: 'application/json'\r\n    }));\r\n    \r\n    if (sampleState.geojson.features.length !== 0) {\r\n      formData.append('samples', new Blob([JSON.stringify(sampleState.geojson)], {\r\n        type: 'application/json'\r\n      }));\r\n    }\r\n    \r\n    axios.post(\"classification/\", formData, {\r\n      baseURL: process.env.PUBLIC_URL,\r\n      headers: {\r\n        \"X-CSRFToken\": csrfToken,\r\n      },\r\n      \r\n    }).then(response => {\r\n      let res_body = response.data\r\n\r\n      // add all new overlays\r\n      let overlays = []\r\n      let key = \"classification_result\"\r\n      let layer = new L.TileLayer(res_body[key].tile_url)\r\n      let overlay = {\r\n        layer: layer,\r\n        name: key,\r\n        url: res_body[key].download_url\r\n      }\r\n      overlays.push(overlay)\r\n\r\n      setDownLoadUrl(res_body[key].download_url)\r\n\r\n      let message = \"\"\r\n\r\n      if (res_body.area) {\r\n        message += \"Rice area: <b>\" + res_body.area.toFixed(3) + \" ha</b><br>\"\r\n      }\r\n      \r\n      if (res_body.confusion_matrix) {\r\n        let parsed = JSON.parse(res_body.confusion_matrix)\r\n        let oa = res_body.oa\r\n        let kappa = res_body.kappa\r\n        message += \r\n        `Confusion matrix:\r\n        <div>\r\n          <table class=\"table table-bordered table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\"></th>\r\n              <th scope=\"col\">0</th>\r\n              <th scope=\"col\">1</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <th scope=\"row\">0</td>\r\n              <td >${parsed[0][0]}</td>\r\n              <td >${parsed[0][1]}</td>\r\n            </tr>\r\n            <tr>\r\n              <th scope=\"row\">1</td>\r\n              <td >${parsed[1][0]}</td>\r\n              <td >${parsed[1][1]}</td>\r\n            </tr>\r\n          </tbody>\r\n          </table>\r\n          </div>\r\n\r\n          <p>Overall Accuracy: <b>${oa}</b></p>\r\n          <p>Kappa: <b>${kappa}</b></p>\r\n          `\r\n      }\r\n\r\n      addTileOverlays(overlays)\r\n\r\n      dispatch(appendLog(message))\r\n\r\n      setLoading(false)\r\n\r\n    }).catch(error => {\r\n      setLoading(false)\r\n      dispatch(appendLog(\"<b>Failed</b> with the reason: \" + error.response.data))\r\n    })\r\n\r\n    dispatch(appendLog(\"Run supervised classification with the following parameters: <br>\" + JSON.stringify(jsonData)))\r\n\r\n    // set loading state\r\n    setLoading(true)\r\n\r\n    // remove all overlays before loading results\r\n    removeAllOverlays()\r\n  }\r\n\r\n  return (\r\n    <Stack direction=\"horizontal\" gap={2}>\r\n      <Button \r\n        size=\"sm\" \r\n        onClick={handleSubmit}\r\n        variant={ loading ? \"secondary\" : \"primary\"} \r\n        disabled={loading}\r\n        style={{\"width\": \"100px\"}}\r\n      >\r\n        {loading ? (\r\n          <div className=\"d-flex align-items-center\">\r\n            <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" ></Spinner>\r\n            <div>Running </div>\r\n          </div> \r\n          ) \r\n          : \r\n          \"Run\"}\r\n      </Button>\r\n\r\n      <ExportImages downloadUrl={downloadUrl} />\r\n\r\n    </Stack>\r\n  )\r\n}","import { Button, ButtonGroup, Spinner, Stack } from \"react-bootstrap\"\r\nimport { useState } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport L from 'leaflet'\r\nimport { addTileOverlays, removeAllOverlays } from \"../../components/LeafletMap\"\r\n\r\nimport {setInfo} from \"../../features/appStatusSlice\"\r\nimport { ExportImages } from \"../../components/ExportImages\";\r\nimport { appendLog } from \"../../features/logSlice\";\r\n\r\n\r\n\r\nexport const EmpiricalActions = () => {\r\n\r\n  const csrfToken = useSelector(state => state.csrfToken)\r\n  const datasetFilters = useSelector(state => state.dataset)\r\n  const seasonFilters = useSelector(state => state.seasons)\r\n  const dispatch = useDispatch()\r\n\r\n  // local state\r\n  const [validated, setValidated] = useState(false)\r\n  // const [success, setSuccess] = useState(undefined); // undefined - normal; false - invalid; true - \r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const [downloadUrl, setDownLoadUrl] = useState(\"\")\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    const form = e.currentTarget;\r\n    \r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      setValidated(true)\r\n      // setSuccess(false)\r\n      return\r\n    } \r\n    \r\n    // validate passed\r\n    setValidated(false)\r\n    // setSuccess(true)\r\n    // setTimeout(() => setSuccess(undefined), 2000)\r\n\r\n    const formData = new FormData()\r\n\r\n    let jsonData = {}\r\n    jsonData['op'] = seasonFilters.op\r\n    jsonData['seasons'] = seasonFilters.seasons\r\n\r\n\r\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\r\n    if (jsonData['dataset'].boundary_file) {\r\n      formData.append('boundary_file', jsonData['dataset'].boundary_file)\r\n      delete jsonData['dataset'].boundary_file\r\n    } \r\n\r\n    formData.append('json', new Blob([JSON.stringify(jsonData)], {\r\n      type: 'application/json'\r\n    }));\r\n\r\n    \r\n    axios.post(\"empirical/\", formData, {\r\n      baseURL: process.env.PUBLIC_URL,\r\n      headers: {\r\n        \"X-CSRFToken\": csrfToken,\r\n      },\r\n      \r\n    }).then(response => {\r\n      let res_body = response.data\r\n      setDownLoadUrl(res_body['combined'].download_url)\r\n      // add all new overlays\r\n      let overlays = []\r\n      Object.keys(res_body).forEach(key => {\r\n        let layer = new L.TileLayer(res_body[key].tile_url)\r\n        let overlay = {\r\n          layer: layer,\r\n          name: key,\r\n          url: res_body[key].download_url\r\n        }\r\n        overlays.push(overlay)\r\n\r\n        if (res_body[key].area) {\r\n          dispatch(appendLog(\"Rice area: <b>\" + res_body[key].area.toFixed(3) + \" ha</b>\\n\"))\r\n        }\r\n      })\r\n      addTileOverlays(overlays)\r\n\r\n      setLoading(false)\r\n\r\n    }).catch(error => {\r\n      setLoading(false)\r\n      dispatch(appendLog(\"<b>Failed</b> with the reason: \" + error.response.data))\r\n    })\r\n\r\n    dispatch(appendLog(\"Run threshold-based classification with the following parameters: <br>\" + JSON.stringify(jsonData)))\r\n\r\n    // set loading state\r\n    setLoading(true)\r\n\r\n    // remove all overlays\r\n    removeAllOverlays()\r\n  }\r\n\r\n  return (\r\n    <Stack direction=\"horizontal\" gap={2}>\r\n      <Button \r\n        size=\"sm\"\r\n        variant={ loading ? \"secondary\" : \"primary\"} \r\n        disabled={loading}\r\n        onClick={handleSubmit}\r\n        style={{\"width\": \"100px\"}}\r\n      >\r\n        {loading ? (\r\n          <div className=\"d-flex align-items-center\">\r\n            <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" ></Spinner>\r\n            <div>Running </div>\r\n          </div> \r\n          ) \r\n          : \r\n          \"Run\"}\r\n      </Button>\r\n\r\n      <ExportImages downloadUrl={downloadUrl} />\r\n    </Stack>\r\n  )\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\nimport { dataList, featureList } from \"../utils/constants\";\n\nconst initialDatasetState = {\n  name: \"COPERNICUS/S1_GRD\",\n  cloud: \"15\",\n  feature: \"VH\",\n  composite: \"median\",\n  composite_days: '15',\n  ascd: false,\n  desc: true,\n  boundary: \"CHITAWAN\",\n  boundary_file: null,\n  use_crop_mask: true,\n  crop_mask: \"projects/testee-319020/assets/terai_agri_mask\",\n\n  phenology_start_date: \"2019-01-01\",\n  phenology_end_date: \"2020-01-01\",\n};\n\nexport const datasetSlice = createSlice({\n  name: \"dataset\",\n  initialState: initialDatasetState,\n  reducers: {\n    update: (state, action) => ({ ...state, ...action.payload }),\n    changeDataSource: (state, action) => {\n      let name = action.payload\n      state.name = name\n      if (name in dataList.radar) {\n        state.feature = 'VH'\n      } else if (name in dataList.optical) {\n        state.feature = 'NDVI'\n        state.cloud = \"15\"\n      }\n      return state\n    }\n  },\n});\n\nexport const { update, changeDataSource } = datasetSlice.actions;\n\nexport default datasetSlice.reducer;\n","import { Card, Col, Form, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { dataList, featureList, districtList } from \"../utils/constants\";\nimport { update, changeDataSource } from \"../features/datasetSlice\";\n\nexport function SatelliteDataFilters(props) {\n  // const ctx = useContext(EmpiricalFormContext);\n  let { disabled } = props;\n\n  const datasetFilters = useSelector((state) => state.dataset);\n  const dispatch = useDispatch();\n\n  const handleChange = (field, value) => {\n    dispatch(update({ [field]: value }));\n  };\n\n  const handleDataChange = (e) => {\n    dispatch(changeDataSource(e.target.value));\n  };\n\n  return (\n    <Card className=\"mb-2 border-secondary\">\n      <Card.Header>\n        <h6 className=\"m-0 p-0\">\n          Satellite Dataset\n        </h6>\n      </Card.Header>\n      <Card.Body>\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_name\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Dataset\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={handleDataChange}\n              value={datasetFilters[\"name\"]}\n            >\n              {Object.entries(dataList).map(([key, value]) => (\n                <optgroup key={key} label={key}>\n                  {Object.entries(value).map(([k, v]) => (\n                    <option key={k} value={k}>\n                      {v}\n                    </option>\n                  ))}\n                </optgroup>\n              ))}\n            </Form.Select>\n          </Col>\n        </Form.Group>\n\n        {datasetFilters[\"name\"] in dataList.optical \n          ? (\n            <Form.Group\n              as={Row}\n              controlId={\"dataset_cloud\"}\n              className=\"align-items-center mb-2\"\n            >\n              <Form.Label column xs=\"auto\">\n                Cloud cover (%)\n              </Form.Label>\n              <Col>\n                <Form.Control\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"1\"\n                  value={datasetFilters[\"cloud\"]}\n                  onChange={(e) => handleChange(\"cloud\", e.target.value)}\n                />\n              </Col>\n            </Form.Group>\n          ) \n          : null\n        }\n\n        <Form.Group as={Row} controlId={\"dataset_orbit\"} className=\"mb-2\">\n          <Form.Label column xs={4}>\n            Orbit\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Check\n              type=\"checkbox\"\n              id={\"desc\"}\n              name={\"desc\"}\n              label=\"Descending\"\n              checked={datasetFilters[\"desc\"]}\n              onChange={(e) => handleChange(\"desc\", e.target.checked)}\n            />\n            <Form.Check\n              type=\"checkbox\"\n              id={\"ascd\"}\n              name={\"ascd\"}\n              label=\"Ascending\"\n              checked={datasetFilters[\"ascd\"]}\n              onChange={(e) => handleChange(\"ascd\", e.target.checked)}\n            />\n          </Col>\n        </Form.Group>\n\n\n        <Form.Group as={Row} controlId={\"dataset_feature\"} className=\"mb-2 align-items-center\">\n          <Form.Label column xs={4}>\n            Feature\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={(e) => handleChange(\"feature\", e.target.value)}\n              value={datasetFilters[\"feature\"]}\n            >\n              {datasetFilters[\"name\"] in dataList.radar\n                ? Object.entries(featureList.radar).map(([key, value]) => (\n                    <option key={key} value={key}>\n                      {value}\n                    </option>\n                  ))\n                : Object.entries(featureList.optical).map(([key, value]) => (\n                    <option key={key} value={key}>\n                      {value}\n                    </option>\n                  ))\n              }\n            </Form.Select>\n          </Col>\n        </Form.Group>\n\n        {/* {datasetFilters[\"composite\"] !== undefined ? ( */}\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_composite\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Composite Type\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={(e) => handleChange(\"composite\", e.target.value)}\n              value={datasetFilters[\"composite\"]}\n            >\n              {[\"minimum\", \"maximum\", \"median\", \"mean\", \"mode\"].map(\n                (type) => (\n                  <option value={type} key={type}>\n                    {type}\n                  </option>\n                )\n              )}\n            </Form.Select>\n          </Col>\n        </Form.Group>\n        {/* )  */}\n        {/* : null} */}\n\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_composite_days\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Composite Days\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Control\n              type=\"number\"\n              onChange={(e) => handleChange(\"composite_days\", e.target.value)}\n              value={datasetFilters[\"composite_days\"]}\n            >\n            </Form.Control>\n          </Col>\n        </Form.Group>\n        \n        \n      </Card.Body>\n    </Card>\n  );\n}\n\nexport const AuxDataFilters = (props) => {\n\n  const datasetFilters = useSelector((state) => state.dataset);\n  const dispatch = useDispatch();\n\n  const handleChange = (field, value) => {\n    dispatch(update({ [field]: value }));\n  };\n\n  return (\n    <Card className=\"mb-2 border-secondary\">\n      <Card.Header>\n        <h6 className=\"m-0 p-0\">\n          Auxiliary Datasets\n        </h6>\n      </Card.Header>\n      <Card.Body>\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_boundary\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Boundary\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={(e) => handleChange(\"boundary\", e.target.value)}\n              value={datasetFilters[\"boundary\"]}\n            >\n              {Object.entries(districtList).map(([key, value]) => (\n                <option value={key} key={key}>\n                  {value}\n                </option>\n              ))}\n            </Form.Select>\n          </Col>\n        </Form.Group>\n\n        {datasetFilters[\"boundary\"] === \"upload\" ? (\n          <Form.Group\n            as={Row}\n            controlId={\"dataset_boundary_file\"}\n            className=\"align-items-center mb-2\"\n          >\n            <Form.Label column xs={4}>\n              Boundary file <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col xs={8}>\n              <Form.Control\n                type=\"file\"\n                className=\"w-100 form-control\"\n                required\n                name=\"boundary_file\"\n                onChange={(e) =>\n                  handleChange(\n                    \"boundary_file\",\n                    URL.createObjectURL(e.target.files[0])\n                  )\n                }\n              />\n            </Col>\n          </Form.Group>\n        ) : null}\n\n        <Form.Group\n          as={Row}\n          controlId={\"use_cropmask\"}\n          className=\"align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Crop Mask \n          </Form.Label>\n          <Col xs={8}>\n            <Form.Check \n              type=\"checkbox\" \n              label=\"\" \n              checked={datasetFilters[\"use_crop_mask\"]}\n              onChange={(e) => handleChange(\"use_crop_mask\", e.target.checked)}\n            />\n          </Col>\n\n        </Form.Group>\n        \n        {datasetFilters[\"use_crop_mask\"] ? (\n          <Form.Group\n            as={Row}\n            controlId={\"dataset_cropmask\"}\n            className=\"mb-2 align-items-center\"\n          >\n            <Form.Label column xs={4}>\n              (GEE asset)\n            </Form.Label>\n            <Col xs={8}>\n              <Form.Control\n                type={\"text\"}\n                onChange={(e) => handleChange(\"crop_mask\", e.target.value)}\n                value={datasetFilters[\"crop_mask\"]}\n              />\n            </Col>\n          </Form.Group>\n        ) : null\n        }\n        \n      </Card.Body>\n    </Card>\n  )\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const INITIAL_SEASONS = {\n  transplant: \"transplant\", \n};\n\nconst initialState = {\n  op: \"and\",\n  seasons: [\n    {\n      name: \"transplant\",\n      start: \"\",\n      end: \"\",\n      min: \"\",\n      max: \"\",\n    },\n  ]\n}\n\nconst reducers = {\n  changeOp: (state, action) => {\n    state.op = action.payload\n  },\n  changeSeasonName: (state, action) => {\n    let {oldName, newName} = action.payload\n    let i = state.seasons.findIndex(v => v.name === oldName)\n    if (i !== -1) {\n      state.seasons[i].name = newName\n    }\n    return state\n  },\n  addSeason: (state, action) => {\n    let newSeason = {\n      \"name\": \"None\",\n      start: \"\",\n      end: \"\",\n      min: \"\",\n      max: \"\",\n    }\n    state.seasons.push(newSeason)\n    return state\n  },\n  deleteSeason: (state, action) => {\n    let i = state.seasons.findIndex(v => v.name === action.payload)\n    if (i !== -1) {\n      state.seasons.splice(i, 1)\n    }\n    return state\n  },\n  modifySeason: (state, action) => {\n    let i = state.seasons.findIndex(v => v.name === action.payload.name)\n    if (i !== -1) {\n      state.seasons[i] = {...state.seasons[i], ...action.payload}\n    }\n    return state\n  }\n}\n\n// const initialState = Object.fromEntries(\n//   Object.keys(INITIAL_SEASONS).map((season) => [\n//     season,\n//     {\n//       on: true,\n//       start: \"\",\n//       end: \"\",\n//       min: \"\",\n//       max: \"\",\n//     },\n//   ])\n// );\n\n// const reducers = Object.fromEntries(\n//   Object.keys(INITIAL_SEASONS).map((season) => [\n//     season,\n//     (state, action) => {\n//       state[season] = { ...state[season], ...action.payload }\n//       return state\n//     },\n//   ])\n// );\n\nexport const SeasonSlice = createSlice({\n  name: \"seasons\",\n  initialState,\n  reducers,\n});\n\nexport const {changeOp, changeSeasonName, addSeason, deleteSeason, modifySeason} = SeasonSlice.actions;\n\nexport default SeasonSlice.reducer;\n","import React, { useState } from \"react\";\nimport { Button, Card, Col, Form, Row, ToggleButton } from \"react-bootstrap\";\n\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addSeason, deleteSeason, modifySeason, changeSeasonName } from \"../features/seasonSlice\";\n\nimport _ from \"lodash\"\nimport { PencilSquare } from \"react-bootstrap-icons\";\n\nexport const SeasonFilterGroup = (props) => {\n  const { idx, inputThres, readOnly } = props;\n  \n  // use state and actions from redux\n  const seasonFilter = useSelector(state => state.seasons.seasons[idx])\n  const dispatch = useDispatch()\n  // const action = actions[name]\n\n  const [name, setName] = useState(seasonFilter.name)\n  const [editing, setEditing] = useState(false)\n\n  const handleChange = (field, value) => {\n    dispatch(modifySeason({\n      name: seasonFilter.name, \n      [field]: value\n    }))\n  }\n\n  const handleDeleteSeason = (e) => {\n    dispatch(deleteSeason(seasonFilter.name))\n  }\n\n  const handleClickEdit = (e) => {\n    if (editing) {\n      // if it is currently in editing mode, clicking button again would \n      // confirm editing and save the edited name\n      dispatch(changeSeasonName({\n        oldName: seasonFilter.name, \n        newName: name,\n      }))\n    }\n    setEditing(!editing)\n  }\n\n  const handleEditingName = (e) => {\n    setName(e.target.value)\n  }\n\n  return (\n    <Card className=\"mb-2 border-secondary\">\n      <Row className=\"align-items-center gx-2 m-0 card-header\">\n        <Col xs=\"auto\">\n          \n          <ToggleButton \n            size=\"sm\" \n            type=\"checkbox\"\n            checked={editing}\n            variant=\"outline-secondary\" \n            onClick={handleClickEdit}\n          >\n            <PencilSquare />\n          </ToggleButton>\n        </Col>\n        <Col >\n          {editing ? \n            <Form.Control\n              plaintext={!editing}\n              readOnly={!editing}\n              onChange={handleEditingName}\n              defaultValue={name}\n            /> :\n            <h6 className={\"mb-0\"}>{name}</h6>\n          }\n        </Col>\n        <Col xs=\"auto\">\n          <Button size=\"sm\" variant=\"danger\" onClick={handleDeleteSeason}>\n            X\n          </Button>\n        </Col>\n      </Row>\n      {/* <div className=\"position-absolute end-0\">\n          <Button size=\"sm\">\n            X\n          </Button>\n        </div> */}\n      <fieldset id={`${seasonFilter.name}_fields`}>\n        <Card.Body>\n          <Form.Group\n            as={Row}\n            className=\"mb-2\"\n            controlId={`${seasonFilter.name}_start_fields`}\n          >\n            <Form.Label column sm={4}>\n              Start date <span style={{color: \"red\"}}>*</span>\n            </Form.Label>\n            <Col sm={8}>\n              <Form.Control\n                type=\"date\"\n                required\n                name={`${seasonFilter.name}_start`}\n                value={seasonFilter.start}\n                onChange={(e) => handleChange(\"start\", e.target.value)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group\n            as={Row}\n            className=\"mb-2\"\n            controlId={`${seasonFilter.name}_end_fields`}\n          >\n            <Form.Label column sm={4}>\n              End date <span style={{color: \"red\"}}>*</span>\n            </Form.Label>\n            <Col sm={8}>\n              <Form.Control\n                type=\"date\"\n                required\n                name={`${seasonFilter.name}_end`}\n                value={seasonFilter.end}\n                onChange={(e) => handleChange(\"end\", e.target.value)}\n              />\n            </Col>\n          </Form.Group>\n\n          <Form.Group\n            as={Row}\n            className=\"mb-2\"\n            // controlId={`${name}_threshold_fields`}\n          >\n            <Form.Label column sm={4}>\n              Threshold {inputThres ? <span style={{color: \"red\"}}>*</span> : null}\n            </Form.Label>\n            <Col sm={8}>\n              <Row className=\"gx-1 align-items-center\">\n                <Col>\n                  <Form.Control\n                    type=\"number\"\n                    required={inputThres}\n                    readOnly={!inputThres || readOnly}\n                    id={`${seasonFilter.name}_min`}\n                    placeholder=\"min\"\n                    step=\"0.01\"\n                    name={`${seasonFilter.name}_min`}\n                    value={seasonFilter.min}\n                    onChange={(e) => handleChange(\"min\", e.target.value)}\n                  />\n                </Col>\n                <Col sm=\"auto\">{\"≤ x ≤\"}</Col>\n                <Col>\n                  <Form.Control\n                    type=\"number\"\n                    required={inputThres}\n                    readOnly={!inputThres || readOnly}\n                    id={`${seasonFilter.name}_max`}\n                    placeholder=\"max\"\n                    step=\"0.01\"\n                    name={`${seasonFilter.name}_max`}\n                    value={seasonFilter.max}\n                    onChange={(e) => handleChange(\"max\", e.target.value)}\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Form.Group>\n        </Card.Body>\n      </fieldset>\n    </Card>\n  );\n}\n\nSeasonFilterGroup.propTypes = {\n  name: PropTypes.string.isRequired,\n  inputThres: PropTypes.bool.isRequired,\n};\n","import { Button, Col, Form, Nav, Row, Spinner, TabContainer, TabContent, TabPane, Stack } from \"react-bootstrap\";\r\nimport { SatelliteDataFilters, AuxDataFilters } from \"../../components/DataFilterGroup\";\r\nimport { seasonNames } from '../../utils/constants'\r\nimport { SeasonFilterGroup } from \"../../components/SeasonFilterGroup\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport _ from \"lodash\"\r\nimport * as d3 from \"d3\"\r\nimport { layerControlRef } from \"../../components/LeafletMap\";\r\nimport { replace, setResult } from \"../../features/sampleSlice\";\r\nimport { useEffect } from \"react\";\r\nimport { actions, modifySeason } from \"../../features/seasonSlice\"\r\nimport DateRangeFilters from \"../../components/DateRangeFilters\";\r\n\r\nimport { appendLog } from \"../../features/logSlice\";\r\nimport { idField } from \"../../components/SampleContainer\";\r\n\r\n\r\nconst removeOutliers = (arr) => {\r\n  let first = d3.quantile(arr, 0.25)\r\n  let third = d3.quantile(arr, 0.75)\r\n  let interquatile = third - first\r\n  let upperbound = third + interquatile * 1.5\r\n  let lowerbound = first - interquatile * 1.5\r\n  return arr.filter(element => element > lowerbound && element < upperbound)\r\n}\r\n\r\n\r\n\r\nexport const PhenologyActions = () => {\r\n\r\n  const csrfToken = useSelector(state => state.csrfToken)\r\n  const datasetFilters = useSelector(state => state.dataset)\r\n  const seasonFilters = useSelector(state => state.seasons)\r\n  const sampleState = useSelector(state => state.samples)\r\n  const dispatch = useDispatch()\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [validated, setValidated] = useState(false)\r\n\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    const form = e.currentTarget;\r\n    \r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      setValidated(true)\r\n      // setSuccess(false)\r\n      return\r\n    } \r\n\r\n    setValidated(false)\r\n\r\n    // const formData = new FormData()\r\n\r\n    let jsonData = {}\r\n\r\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\r\n    delete jsonData.dataset.boundary_file\r\n\r\n    let samples = _.cloneDeep(sampleState.geojson)\r\n\r\n    // get rid of existing phenology info\r\n    samples.features.forEach(feature => {\r\n      Object.keys(feature.properties).forEach(key => {\r\n        if (key.endsWith('_feature')) {\r\n          delete feature.properties[key]\r\n        }\r\n      })\r\n    })\r\n\r\n    jsonData['samples'] = samples\r\n    jsonData['phenology_dates'] = sampleState.phenology\r\n\r\n    // send request\r\n    axios.post(\"phenology/\", jsonData, {\r\n      baseURL: process.env.PUBLIC_URL,\r\n      headers: {\r\n        \"X-CSRFToken\": csrfToken,\r\n      },\r\n      \r\n    }).then(response => {\r\n      let res_body = response.data\r\n\r\n      // update the properties of the existing samples\r\n      // let new_samples = samples\r\n      res_body.features.forEach(feature => {\r\n        let cur_feature = samples.features.filter(v => v.properties[idField] === feature.properties[idField])[0]\r\n        cur_feature.properties = feature.properties\r\n      })\r\n      dispatch(replace(samples))\r\n\r\n      setLoading(false)\r\n\r\n    }).catch(error => {\r\n      setLoading(false)\r\n      alert(error.response.data)\r\n    })\r\n\r\n    // set loading state\r\n    setLoading(true)\r\n\r\n  }\r\n\r\n\r\n  const handleRefresh = (e) => {\r\n    if (sampleState.geojson.features.length === 0) {\r\n      alert(\"Please upload the ground truth samples first.\")\r\n      return;\r\n    }\r\n\r\n    seasonFilters.seasons.forEach(seasonFilter => { \r\n      // let seasonFilter = seasonFilters[season];\r\n      \r\n      let start_date = new Date(seasonFilter.start)\r\n      let end_date = new Date(seasonFilter.end)\r\n\r\n      let candidates = []\r\n\r\n      sampleState.geojson.features.forEach(sample => {\r\n        // let candidates = []\r\n        if (sample.properties[sampleState.classProperty.name] !== sampleState.classProperty.positiveValue) {\r\n          return;\r\n        }\r\n        Object.entries(sample.properties).forEach(([key, val]) => {\r\n          if (key.endsWith('_feature')) {\r\n            let words = key.split('_')\r\n            let date = new Date(Number.parseInt(words[words.length - 2])).getTime()\r\n            if (start_date.getTime() <= date && date <= end_date.getTime()) {\r\n              candidates.push(val)\r\n            }\r\n          }\r\n        })\r\n      })\r\n\r\n      if (candidates.length === 0) {\r\n        return;\r\n      } \r\n\r\n      // compute mean, std\r\n      let filteredCandidates = removeOutliers(candidates)\r\n      let mean = _.sum(filteredCandidates) / filteredCandidates.length;\r\n      let std = Math.sqrt(_.sum(_.map(filteredCandidates, v => Math.pow(v - mean, 2))) / filteredCandidates.length);\r\n      \r\n      // let action = actions[season];\r\n      dispatch(modifySeason({\r\n        \"name\": seasonFilter.name,\r\n        \"min\": (mean - std).toFixed(2), \r\n        \"max\": (mean + std).toFixed(2)\r\n      }))\r\n      \r\n    })\r\n  }\r\n  \r\n  return (\r\n    <Stack direction=\"horizontal\" gap={2}>\r\n\r\n      <Button \r\n        size=\"sm\" \r\n        onClick={handleSubmit}\r\n        variant={ loading ? \"secondary\" : \"primary\"} \r\n        disabled={loading}\r\n        style={{\"width\": \"150px\"}}\r\n      >\r\n        {loading \r\n          ? ( \r\n            <div className=\"d-flex align-items-center justify-content-center\">\r\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" ></Spinner>\r\n              <div>Running </div>\r\n            </div> \r\n            ) \r\n          : \r\n          \"Get Phenology\"\r\n        }\r\n      </Button>\r\n\r\n      <Button\r\n        size=\"sm\"\r\n        onClick={handleRefresh}\r\n      >\r\n        Calculate Thresholds\r\n      </Button>\r\n    </Stack>\r\n  )\r\n}","import axios from \"axios\"\r\nimport { Fragment, useState } from \"react\"\r\nimport { Accordion, Badge, Button, Col, Form, Modal, Row, Table } from \"react-bootstrap\"\r\nimport {saveAs} from 'file-saver'\r\n\r\nconst json2table = (json) => {\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <th>key</th>\r\n        <th>value</th>\r\n      </thead>\r\n      <tbody>\r\n        {Object.entries(json).map(([key, val]) => (\r\n          <tr key={key}>\r\n            <td>{key}</td>\r\n            <td>{JSON.stringify(val)}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nconst state2color = {\r\n  'COMPLETED': 'success',\r\n  'RUNNING': 'secondary',\r\n  'READY': 'primary',\r\n  'FAILED': 'danger',\r\n  'CANCELLED': 'warning'\r\n}\r\n\r\nexport const ExportStatus = () => {\r\n\r\n  const [tasks, setTasks] = useState([])\r\n  const [task, setTask] = useState(null)\r\n  const [show, setShow] = useState(false)\r\n  const [taskId, setTaskId] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const refreshTasks = () => {\r\n    axios.get(\"tasks/\")\r\n        .then((v) => {\r\n          setTasks(v.data)\r\n        })\r\n  }\r\n\r\n  const handleOpenStatus = (e) => {\r\n    refreshTasks()\r\n    setShow(true)\r\n  }\r\n\r\n  const handleHide = (e) => {\r\n    setShow(false)\r\n    setTask(null)\r\n    setTaskId(null)\r\n  }\r\n\r\n  const handleSearchTask = (e) => {\r\n    setLoading(true)\r\n    axios.get(\"tasks/\" + taskId)\r\n        .then(v => {\r\n          setTask(v.data)\r\n          setLoading(false)\r\n          if (v.data === null) {\r\n            alert(\"Task not found\")\r\n          }\r\n        })\r\n  }\r\n\r\n  const handleDownloadFile = (e) => {\r\n    axios.get(\"download/\" + taskId, {responseType: 'blob'})\r\n        .then(v => {\r\n          saveAs(new Blob([v.data], {type: \"image/tiff\"}), taskId + \".tif\")\r\n        }) \r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button size=\"sm\" variant=\"info\" onClick={handleOpenStatus}>\r\n        Export Status\r\n      </Button> \r\n\r\n      <Modal size='lg' show={show} onHide={handleHide}>\r\n        <Modal.Header>\r\n          Task Status\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"formPlaintextEmail\">\r\n            <Form.Label column sm=\"auto\">\r\n              Task ID\r\n            </Form.Label>\r\n            <Col sm>\r\n              <Form.Control value={taskId} onChange={e=>setTaskId(e.target.value)}/>\r\n            </Col>\r\n            <Col sm=\"auto\">\r\n              <Button disabled={loading} onClick={handleSearchTask}>\r\n              {loading ? \"Loading\" : \"Search\"}\r\n              </Button>\r\n            </Col>\r\n          </Form.Group>\r\n          \r\n          <Accordion>\r\n            {task !== null ?\r\n              <Accordion.Item eventKey={task.id}>\r\n                <Accordion.Header>\r\n                  <Badge \r\n                    bg={state2color[task.state]}\r\n                  >\r\n                    {task.state}\r\n                  </Badge> {'  '}{task.id} \r\n                  \r\n                </Accordion.Header>\r\n                <Accordion.Body>\r\n                  {json2table(task)}\r\n\r\n                  {task.state === \"COMPLETED\" ? \r\n                    <Button size=\"sm\" onClick={handleDownloadFile}>\r\n                      Download\r\n                    </Button>\r\n                  : null}\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            : null}\r\n          </Accordion>\r\n          \r\n          {/* <Accordion>\r\n            {tasks.map((task, i) => (\r\n              <Accordion.Item eventKey={task.id}>\r\n                <Accordion.Header>\r\n                  <Badge \r\n                    bg={state2color[task.state]}\r\n                  >\r\n                    {task.state}\r\n                  </Badge> {'  '}{task.id} \r\n                </Accordion.Header>\r\n                <Accordion.Body>\r\n                  {json2table(task)}\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            ))}\r\n          </Accordion> */}\r\n        </Modal.Body>\r\n      </Modal>\r\n    </Fragment>\r\n  )\r\n}","import { Button, Container, Nav, Navbar, NavDropdown, Stack } from 'react-bootstrap';\nimport { BoxArrowUpRight } from 'react-bootstrap-icons';\nimport { useSelector } from 'react-redux';\nimport { NavLink, Route, Switch } from 'react-router-dom'\nimport { ClassificationActions } from '../apps/classification/ClassificationActions';\nimport { EmpiricalActions } from '../apps/empirical/EmpiricalActions';\nimport { PhenologyActions } from '../apps/phenology/PhenologyActions';\nimport { ExportStatus } from './ExportStatus';\n\n\n\n\nexport default () => {\n  \n  const appName = useSelector(state => state.appName)\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" className='header' fixed='top'>\n      <Container fluid>\n        <Navbar.Brand href=\"/\">RiceMapEngine</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link to={\"/phenology\"} as={NavLink}>Phenology Explorer</Nav.Link>\n            <NavDropdown title=\"Rice Mapping\">\n              <NavDropdown.Item to={\"/empirical\"} as={NavLink}>\n                Empirical Thresholding\n              </NavDropdown.Item>\n\n              <NavDropdown.Item to={\"/classification\"} as={NavLink}>\n                Supervised Classification\n              </NavDropdown.Item>\n            </NavDropdown>\n            \n            <Nav.Link href={process.env.PUBLIC_URL + '/user-manual.html'} target=\"_blank\">\n              <div className=\"d-flex align-items-center\">\n                <div className=\"pe-1\">User Manual</div>\n                <BoxArrowUpRight />\n              </div>\n            </Nav.Link>\n          </Nav>\n\n          <Stack direction=\"horizontal\" gap={2}>\n            {appName === \"classification\" ?\n              <ClassificationActions />\n            : (\n              appName === \"empirical\" ?\n              <EmpiricalActions />\n              : \n              <PhenologyActions />\n            )\n\n            }\n\n\n            <ExportStatus />\n\n          </Stack>\n          \n        </Navbar.Collapse>\n      </Container>\n\n\n    </Navbar>\n  )\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const APP_NAME = {\n  home: \"home\",\n  empirical: \"empirical\",\n  phenology: \"phenology\",\n  classification: \"classification\"\n}\n\nexport const appNameSlice = createSlice({\n  name: APP_NAME[\"home\"],\n  initialState: null,\n  reducers: {\n    setAppName: (state, action) => action.payload\n  }\n})\n\nexport const { setAppName } = appNameSlice.actions\n\nexport default appNameSlice.reducer","import { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { APP_NAME, setAppName } from \"../features/appNameSlice\"\n\nexport function Home() {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setAppName(APP_NAME.home))\n  }, [])\n\n  return (\n    <div>\n      <h1>Hello</h1>\n    </div>\n  )\n}\n\nexport default Home;","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const csrfTokenSlice = createSlice({\n  name: \"csrfToken\",\n  initialState: null,\n  reducers: {\n    setToken: (state, action) => action.payload\n  }\n})\n\nexport const { setToken } = csrfTokenSlice.actions\n\nexport default csrfTokenSlice.reducer","import React, { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { APP_STATUS } from \"../features/appStatusSlice\";\n\n\nexport function AppStatusBar(props) {\n\n  const status = useSelector(state => state.appStatus)\n  \n  return (\n    <div\n      className=\"app-status-bar align-items-center justify-content-center d-flex w-100\"\n    >\n      <div>\n        <h6 className=\"mb-0\">App Status: <b>{status.status}</b></h6>\n      </div>\n    </div>\n  )\n}\n\nexport default AppStatusBar;","import { Fragment, useContext, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport _ from 'lodash'\r\nimport { idField } from \"./SampleContainer\";\r\nimport { Button, Card, Dropdown, DropdownButton, Modal } from \"react-bootstrap\";\r\nimport { ArrowsFullscreen } from \"react-bootstrap-icons\";\r\nimport { saveAs } from 'file-saver'\r\n\r\nconst prepareChartData = (sample) => {\r\n  let curve_data = {}\r\n  Object.entries(sample.properties).forEach(([key, val]) => {\r\n    if (key.endsWith('_feature')) {\r\n      let words = key.split('_')\r\n      let date = new Date(Number.parseInt(words[words.length - 2])).getTime()\r\n      curve_data[date] = val === 99999 ? null : val\r\n    }\r\n  })\r\n\r\n  if (Object.keys(curve_data).length === 0) {\r\n    return null\r\n  }\r\n\r\n  let chartData = [['date', 'value']]\r\n\r\n  Object.keys(curve_data).sort((a,b)=>Number.parseInt(a)-Number.parseInt(b)).forEach(date => {\r\n    let row = Array(chartData[0].length).fill(null)\r\n    row[0] = new Date(Number.parseInt(date))\r\n    row[1] = curve_data[date]\r\n    chartData.push(row)\r\n  })\r\n  \r\n  return chartData\r\n}\r\n\r\n\r\nexport const ChartContainer = () => {\r\n\r\n  \r\n  const [chartModalShow, setChartModalShow] = useState(false);\r\n\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  const sampleState = useSelector((state) => state.samples);\r\n\r\n\r\n  useEffect(() => {\r\n    if (typeof sampleState.selected === 'number') {\r\n      // console.log(sampleState.selected.geometry.coordinates.reverse())\r\n      let selected_sample = sampleState.geojson.features.filter(f => f.properties[idField] == sampleState.selected)[0]\r\n      setChartData(prepareChartData(selected_sample))\r\n    }\r\n  }, [sampleState.selected, sampleState.geojson])\r\n\r\n\r\n  const handleClose = () => setChartModalShow(false)\r\n  const handleShow = () => setChartModalShow(true)\r\n\r\n  const handleSelect = (eventKey, e) => {\r\n    let csv = \"\"\r\n    if (eventKey === \"one\") {\r\n      csv = chartData.map(e => {\r\n        return e.join(\",\")\r\n      }).join(\"\\n\")\r\n    } else {\r\n      \r\n      let positiveSamples = sampleState.geojson.features.filter(v => {\r\n        return v.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue\r\n      })\r\n\r\n      let curveData = {}\r\n\r\n      positiveSamples.forEach(sample => {\r\n        Object.entries(sample.properties).forEach(([key, val]) => {\r\n          if (key.endsWith('_feature')) {\r\n            let words = key.split('_')\r\n            let date = new Date(Number.parseInt(words[words.length - 2])).getTime()\r\n            if (curveData[date] === undefined) {\r\n              curveData[date] = []\r\n            }\r\n            curveData[date].push(val === 99999 ? null : val)\r\n\r\n          }\r\n        })\r\n      })\r\n\r\n      csv = Object.entries(curveData).sort((a, b) => a[0] - b[0]).map(([d, v]) => {\r\n        return new Date(Number.parseInt(d)) + \",\" + v.join(\",\") \r\n      }).join(\"\\n\")\r\n      \r\n    }\r\n\r\n    let file = new Blob([csv], {type: 'text/csv;charset=utf-8'})\r\n    saveAs(file, 'phenology.csv')\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Card className=\"h-100 w-100\">\r\n        <Card.Body className=\"p-2\">\r\n          <ChartArea chartData={chartData}/>\r\n\r\n          <div className=\"position-absolute bottom-0 end-0 d-flex justify-content-end mb-1\">\r\n            \r\n            <DropdownButton \r\n              size=\"sm\" \r\n              title=\"Download...\" \r\n              onSelect={handleSelect}\r\n            >\r\n              <Dropdown.Item eventKey={\"one\"} disabled={!!!chartData}>\r\n                Phenology of the selected sample\r\n              </Dropdown.Item>\r\n              <Dropdown.Item eventKey={\"all\"}>\r\n                Phenology of all {sampleState.classProperty.positiveValue} samples\r\n              </Dropdown.Item>\r\n            </DropdownButton>\r\n\r\n            <Button size=\"sm\" variant=\"secondary\" onClick={handleShow}>\r\n              <ArrowsFullscreen size={11}/>\r\n            </Button>\r\n          </div>\r\n\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <Modal \r\n        fullscreen\r\n        show={chartModalShow} \r\n        onHide={handleClose}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Phenology Chart</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <ChartArea chartData={chartData} />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </Fragment>\r\n    \r\n  )\r\n}\r\n\r\nconst ChartArea = ({chartData}) => {\r\n\r\n  // const [chartData, setChartData] = useState(null);\r\n\r\n  return (\r\n    chartData ?\r\n        <Chart \r\n          width=\"100%\" \r\n          height=\"90%\" \r\n          chartType=\"LineChart\" \r\n          loader={<div>Loading Chart...</div>} \r\n          data={chartData}\r\n          options={{\r\n            hAxis: {\r\n              title: 'Date',\r\n              format: \"yyyy-MM-dd\"\r\n            },\r\n            vAxis: {\r\n              title: 'Value',\r\n            },\r\n            legend: {\r\n              position: 'bottom'\r\n            },\r\n            pointSize: 3,\r\n          }}\r\n          rootProps={{ 'data-testid': '1' }}\r\n          legendToggle\r\n          \r\n        />\r\n    :\r\n    \"Select a sample to show its phenology.\"\r\n  )\r\n}","import { Fragment, useContext, useState } from \"react\";\r\nimport { Button, ButtonGroup, Card, Col, Container, Form, ListGroup, Modal, Nav, Row, TabContainer, TabContent, Table, TabPane } from \"react-bootstrap\";\r\nimport shp from \"shpjs\";\r\nimport L from \"leaflet\";\r\nimport { map, layerControlRef, addTileOverlays, panToLatLng, geojsonLayer, setGeojsonLayer, addGeoJsonOverlay } from \"../components/LeafletMap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport _, { sample } from 'lodash'\r\n\r\nimport { SeasonFilterGroup } from \"../components/SeasonFilterGroup\";\r\nimport * as d3 from \"d3\"\r\nimport { addSeason, changeOp, deleteSeason, modifySeason } from \"../features/seasonSlice\"\r\nimport { SampleContainer, idField } from \"../components/SampleContainer\";\r\nimport { Plus, PlusLg, PlusSquare } from \"react-bootstrap-icons\";\r\n\r\n\r\n\r\n\r\n\r\nexport const SeasonPanel = () => {\r\n\r\n  const appName = useSelector(state => state.appName)\r\n  const sampleState = useSelector((state) => state.samples);\r\n\r\n  const seasonFilters = useSelector(state => state.seasons)\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  \r\n\r\n  const handleAddSeason = () => {\r\n    dispatch(addSeason())\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      \r\n      {seasonFilters.seasons.map((seasonFilter, i) => (\r\n        <SeasonFilterGroup \r\n          key={i} \r\n          idx={i} \r\n          readOnly={false}\r\n          inputThres={appName !== \"phenology\"} \r\n        />\r\n      ))}\r\n\r\n      <div className=\"mb-2\">\r\n        <Button variant=\"secondary\" className=\"w-100\" onClick={handleAddSeason}>\r\n          <PlusSquare /> {\" \"}\r\n          Add phenology phase\r\n        </Button>\r\n      </div>\r\n      \r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default SeasonPanel","import { Button, ButtonGroup, Card, Col, Container, Form, ListGroup, Modal, Nav, Row, Stack, TabContainer, TabContent, Table, TabPane } from \"react-bootstrap\";\r\nimport _, { sample } from 'lodash'\r\nimport { actions, modifySeason } from \"../../features/seasonSlice\"\r\nimport { SampleContainer, idField } from \"../../components/SampleContainer\";\r\nimport { ChartArea, ChartContainer } from \"../../components/ChartContainer\";\r\nimport SeasonPanel from \"../../components/SeasonPanel\";\r\n\r\nconst tabNames = {\r\n  tab1: \"Samples\",\r\n  tab2: \"Phenology Phases\"\r\n}\r\n\r\n\r\n\r\nexport default function PhenologyRight() {\r\n\r\n  \r\n  return (\r\n    <div className=\"h-100 d-flex flex-column\">\r\n\r\n      <TabContainer defaultActiveKey={tabNames.tab1} unmountOnExit={false}>\r\n        <Row className=\"tabs-nav g-0 flex-wrap\">\r\n          <Nav variant=\"pills\" className=\"h-100\">\r\n            <Col className=\"h-100 align-items-center p-1\">\r\n              <Nav.Link className=\"tab-title align-middle w-100 h-100 h6 mb-0\" eventKey={tabNames.tab1} >{tabNames.tab1}</Nav.Link>\r\n            </Col>\r\n            <Col className=\"h-100 align-items-center p-1\">\r\n              <Nav.Link className=\"tab-title align-middle h-100 w-100 h6 mb-0\" eventKey={tabNames.tab2} >{tabNames.tab2}</Nav.Link>\r\n            </Col>\r\n          </Nav>\r\n        </Row>\r\n\r\n        <Row className=\"overflow-auto h-100 g-0 mb-auto\">\r\n          <Col className=\"h-100 w-100\">\r\n            <TabContent className=\"h-100 w-100\">\r\n              <TabPane eventKey={tabNames.tab1} className=\"h-100 w-100\">\r\n\r\n                <div className=\"sample-container h-100 px-2 pt-2\">\r\n                  <SampleContainer />\r\n                </div>\r\n\r\n                <div className=\"chart-canvas w-100 px-2 pt-2\">\r\n                  <ChartContainer />\r\n                </div>\r\n\r\n              </TabPane>\r\n\r\n              <TabPane eventKey={tabNames.tab2} className=\"h-100 p-2\">\r\n\r\n                <SeasonPanel />\r\n\r\n                \r\n              </TabPane>\r\n\r\n            </TabContent>\r\n          </Col>\r\n        </Row>\r\n      </TabContainer>\r\n\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import { Form } from \"react-bootstrap\";\r\nimport { SatelliteDataFilters, AuxDataFilters } from \"../../components/DataFilterGroup\";\r\nimport { useState } from \"react\";\r\nimport _ from \"lodash\"\r\n\r\n\r\n\r\n\r\nexport default function PhenologyLeft(props) {\r\n\r\n  const [validated, setValidated] = useState(false)\r\n\r\n  \r\n  return (\r\n    <div className=\"h-100 flex-column p-2\">\r\n    \r\n      <Form method=\"POST\" noValidate validated={validated} >\r\n        <SatelliteDataFilters />\r\n        {/* <AuxDataFilters /> */}\r\n\r\n        {/* <DateRangeFilters /> */}\r\n      \r\n\r\n      </Form>\r\n\r\n    </div>\r\n  )\r\n}","import { useState } from \"react\"\r\nimport { Form } from \"react-bootstrap\"\r\nimport _ from \"lodash\";\r\nimport { SatelliteDataFilters, AuxDataFilters } from \"../../components/DataFilterGroup\";\r\n\r\n\r\nexport const EmpiricalLeft = (props) => {\r\n\r\n\r\n  // local state\r\n  const [validated, setValidated] = useState(false)\r\n  // const [success, setSuccess] = useState(undefined); // undefined - normal; false - invalid; true - \r\n\r\n\r\n  return (\r\n    <div className=\"sidebar h-100 flex-column p-2\">\r\n      <Form method=\"POST\" noValidate validated={validated}>\r\n        \r\n        <fieldset >\r\n          <SatelliteDataFilters />\r\n          {/* {appName === \"empirical\" && <AuxDataFilters />} */}\r\n          <AuxDataFilters />\r\n        </fieldset>\r\n                \r\n      </Form>\r\n    </div>\r\n  )\r\n}","import { Form, Card } from \"react-bootstrap\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport _ from \"lodash\";\r\n\r\nimport { changeOp } from \"../../features/seasonSlice\";\r\nimport SeasonPanel from \"../../components/SeasonPanel\";\r\n\r\n\r\nexport default function EmpiricalRight() {\r\n\r\n  const seasonFilters = useSelector(state => state.seasons)\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  const handleChangeLogicalOperation = (op) => {\r\n    dispatch(changeOp(op))\r\n  }\r\n  \r\n  return (\r\n    <div className=\"h-100 d-flex flex-column p-2\">\r\n      \r\n      <Card className=\"mb-2\">\r\n        <Card.Body className=\"d-flex\">\r\n          <div className=\"px-2\">\r\n            Aggregate method\r\n          </div>\r\n          <div className=\"d-flex flex-grow-1 justify-content-around\">\r\n            <Form.Check \r\n              checked={seasonFilters.op === \"and\"}\r\n              type={\"radio\"}\r\n              label={\"All\"}\r\n              onChange={() => handleChangeLogicalOperation(\"and\")}\r\n            />\r\n            <Form.Check\r\n              checked={seasonFilters.op === \"or\"}\r\n              type={\"radio\"}\r\n              label={\"Any\"}\r\n              onChange={() => handleChangeLogicalOperation(\"or\")}\r\n            />\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <SeasonPanel />\r\n\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const MODEL_SPECS = {\n  \"Random Forest\": {\n    numberOfTrees: {\n      type: \"int\",\n      required: true,\n      default: 200,\n      description: \"The number of decision trees to create.\"\n    },\n    variablesPerSplit: {\n      type: \"int\",\n      default: null,\n      description: \"The number of variables per split. If unspecified, uses the square root of the number of variables.\"\n    },\n    minLeafPopulation: {\n      type: \"int\",\n      default: 1,\n      description: \"Only create nodes whose training set contains at least this many points.\"\n    },\n    bagFraction: {\n      type: \"float\",\n      default: 0.5,\n      description: \"The fraction of input to bag per tree.\"\n    },\n    maxNodes: {\n      type: \"int\",\n      default: null,\n      description: \"The maximum number of leaf nodes in each tree. If unspecified, defaults to no limit.\"\n    },\n    seed: {\n      type: \"int\",\n      default: 0,\n      description: \"The randomization seed.\"\n    }\n  },\n}\n\nconst initialState = {\n  \"start_date\": null,\n  \"end_date\": null,\n  \"training_ratio\": 0.7,\n  \"model\": \"\",\n  \"model_specs\": {}\n}\n\nconst classificationSlice = createSlice({\n  name: \"classification\",\n  initialState: initialState,\n  reducers: {\n    update: (state, action) => ({ ...state, ...action.payload }),\n    updateModelSpecs: (state, action) => {\n      return {...state, \"model_specs\": {...state.model_specs, ...action.payload}}\n    },\n    changeModel: (state, action) => {\n      if (action.payload && action.payload !== state.model) {\n        state.model_specs = {}\n        Object.keys(MODEL_SPECS[action.payload]).forEach(key => {\n          if (\"default\" in MODEL_SPECS[action.payload][key]) {\n            state.model_specs[key] = MODEL_SPECS[action.payload][key][\"default\"]\n          } else {\n            state.model_specs[key] = null\n          }\n        })\n        \n      }\n\n      state.model = action.payload\n    }\n  }\n})\n\nexport const { update, updateModelSpecs, changeModel} = classificationSlice.actions\n\nexport default classificationSlice.reducer","import { Fragment, useState } from \"react\"\r\nimport { Form, TabContainer, Row, Col, Nav, TabContent, TabPane, Button, Spinner, Dropdown, DropdownButton, Card, OverlayTrigger, Popover } from \"react-bootstrap\"\r\nimport _ from \"lodash\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport L from 'leaflet'\r\nimport { map, layerControlRef, addTileOverlays, removeAllOverlays } from \"./LeafletMap\"\r\nimport { SatelliteDataFilters, AuxDataFilters } from \"./DataFilterGroup\";\r\n\r\n// import {update as updateDatasetFilters } from \"../../features/datasetSlice\"\r\nimport { update, changeModel, updateModelSpecs, MODEL_SPECS } from \"../features/classificationSlice\"\r\nimport { InfoCircle, InfoCircleFill, InfoSquare, QuestionCircle } from \"react-bootstrap-icons\";\r\n\r\n\r\n// import {update as updateDatasetFilters } from \"../../features/datasetSlice\"\r\n\r\n\r\n\r\n\r\nexport const ClassificationFilters = (props) => {\r\n\r\n  // const seasonFilters = useSelector(state => state.seasons)\r\n  const classificationState = useSelector(state => state.classification)\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  const handleChange = (field, value) => {\r\n    if (field === \"model\") {\r\n      dispatch(changeModel(value))\r\n    } else if (field.startsWith(\"model\")) {\r\n      dispatch(updateModelSpecs({ [field.split('.')[1]]: value}))\r\n    } else {\r\n      dispatch(update({ [field]: value }))\r\n    }\r\n    \r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Card className=\"mb-2 border-secondary\">\r\n        <Card.Header>\r\n          <h6 className=\"m-0 p-0\">\r\n            Image Date Range\r\n          </h6>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Form.Group\r\n            as={Row}\r\n            controlId={\"date_start\"}\r\n            className=\"mb-2 align-items-center\"\r\n          >\r\n            <Form.Label column xs={4}>\r\n              Start Date:\r\n            </Form.Label>\r\n            <Col xs={8}>\r\n              <Form.Control\r\n                type=\"date\"\r\n                value={classificationState[\"start_date\"]}\r\n                onChange={(e) => handleChange(\"start_date\", e.target.value)}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Form.Group\r\n            as={Row}\r\n            controlId={\"date_end\"}\r\n            className=\"mb-2 align-items-center\"\r\n          >\r\n            <Form.Label column xs={4}>\r\n              End Date:\r\n            </Form.Label>\r\n            <Col xs={8}>\r\n              <Form.Control\r\n                type=\"date\"\r\n                value={classificationState[\"end_date\"]}\r\n                onChange={(e) => handleChange(\"end_date\", e.target.value)}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <Card className=\"mb-2 border-secondary\">\r\n        <Card.Header>\r\n          <h6 className=\"m-0 p-0\">\r\n            Classification Details\r\n          </h6>\r\n        </Card.Header>\r\n        <Card.Body>\r\n\r\n          <Form.Group\r\n            as={Row}\r\n            controlId={\"train_test_ratio\"}\r\n            className=\"mb-2 align-items-center\"\r\n          >\r\n            <Form.Label column xs={4}>\r\n              Training Ratio: \r\n            </Form.Label>\r\n            <Col xs={8}>\r\n              <Form.Control\r\n                type=\"number\"\r\n                step={\"0.05\"}\r\n                value={classificationState[\"training_ratio\"]}\r\n                onChange={(e) => handleChange(\"training_ratio\", e.target.value)}\r\n              />\r\n            </Col>\r\n\r\n          </Form.Group>\r\n\r\n          <Form.Group\r\n            as={Row}\r\n            controlId={\"model\"}\r\n            className=\"mb-2 align-items-center\"\r\n          >\r\n            <Form.Label column xs={4}>\r\n              Model:\r\n            </Form.Label>\r\n            <Col xs={8}>\r\n              <Form.Select\r\n                value={classificationState[\"model\"]}\r\n                onChange={(e) => handleChange(\"model\", e.target.value)}\r\n              >\r\n                <option key=\"\"></option>\r\n                {Object.keys(MODEL_SPECS).map(name => (\r\n                  <option key={name}>{name}</option>\r\n                ))}\r\n                {/* <option key=\"random_forest\">Random Forest</option>\r\n                <option key=\"gradient_tree_boost\">Gradient Tree Boost</option> */}\r\n              </Form.Select>\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          {classificationState[\"model\"] && Object.keys(MODEL_SPECS[classificationState[\"model\"]]).map(key => (\r\n            <ModelSpecItem specName={key} handleChange={handleChange}/>\r\n          ))}\r\n\r\n        </Card.Body>\r\n      </Card>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nconst ModelSpecItem = ({specName, handleChange}) => {\r\n\r\n  const classificationState = useSelector(state => state.classification)\r\n\r\n  let selectedModel = classificationState[\"model\"]\r\n\r\n  const handleModelSpecChange = (e) => {\r\n    handleChange(`model.${specName}`, e.target.value)\r\n  }\r\n\r\n  let renderLabel = () => {\r\n    return (\r\n      <Form.Label column xs={4}>\r\n        {specName}\r\n        {\"  \"}\r\n        <OverlayTrigger\r\n          trigger=\"hover\"\r\n          placement=\"right\"\r\n          overlay={\r\n            <Popover>\r\n              <Popover.Body>\r\n                {MODEL_SPECS[selectedModel][specName][\"description\"]}\r\n              </Popover.Body>\r\n            </Popover>\r\n          }\r\n        >\r\n          <InfoCircle />\r\n        </OverlayTrigger>\r\n      </Form.Label>\r\n    )\r\n  }\r\n\r\n  let renderInput = () => {\r\n    switch (MODEL_SPECS[selectedModel][specName][\"type\"]) {\r\n      case \"int\":\r\n        return (\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"Leave blank to use default value\"\r\n            step={\"1\"}\r\n            value={classificationState[\"model_specs\"][specName]}\r\n            onChange={handleModelSpecChange}\r\n          />\r\n        )\r\n      case \"float\":\r\n        return (\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"Leave blank to use default value\"\r\n            step={\"0.1\"}\r\n            value={classificationState[\"model_specs\"][specName]}\r\n            onChange={handleModelSpecChange}\r\n          />\r\n        )\r\n      case \"string\":\r\n        return (\r\n          <Form.Control\r\n            type=\"text\"\r\n            value={classificationState[\"model_specs\"][specName]}\r\n            onChange={handleModelSpecChange}\r\n          />\r\n        )\r\n      case \"select\":\r\n        return (\r\n          <Form.Select \r\n            value={classificationState[\"model_specs\"][specName]}\r\n            onChange={handleModelSpecChange}\r\n          >\r\n          {MODEL_SPECS[selectedModel][specName][\"options\"].map(option => (\r\n            <option key={option}>{option}</option>\r\n          ))}\r\n          </Form.Select>\r\n        )\r\n      default:\r\n        return (<></>);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form.Group\r\n      as={Row}\r\n      controlId={specName}\r\n      className=\"mb-2 align-items-center\"\r\n    >\r\n      {renderLabel()}\r\n      <Col xs={8}>\r\n        {renderInput()}\r\n      </Col>\r\n    </Form.Group>\r\n  )\r\n\r\n}","import { useState } from \"react\"\r\nimport { Form } from \"react-bootstrap\"\r\nimport _ from \"lodash\";\r\n\r\nimport { SatelliteDataFilters, AuxDataFilters } from \"../../components/DataFilterGroup\";\r\n\r\nimport { ClassificationFilters } from \"../../components/ClassificationFilters\";\r\n\r\n\r\n\r\nexport const ClassificationLeft = (props) => {\r\n\r\n  // local state\r\n  const [validated, setValidated] = useState(false)\r\n  // const [success, setSuccess] = useState(undefined); // undefined - normal; false - invalid; true - \r\n\r\n  \r\n  return (\r\n    <div className=\"sidebar h-100 flex-column p-2\">\r\n      <Form method=\"POST\" noValidate validated={validated}>\r\n        <fieldset >\r\n          <SatelliteDataFilters />\r\n          <AuxDataFilters />\r\n        </fieldset>\r\n\r\n        <ClassificationFilters />\r\n\r\n\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import { SampleContainer } from \"../../components/SampleContainer\"\r\n\r\n\r\nexport const ClassificationRight = () => {\r\n\r\n  return (\r\n    <div className=\"flex-column p-2\">\r\n      <SampleContainer />\r\n    </div>\r\n  )\r\n}","import axios from \"axios\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\"\nimport { Form, Row, Col, Button, Card } from \"react-bootstrap\"\nimport { useSelector } from \"react-redux\";\nimport { BASEMAPS } from \"../utils/constants\";\nimport _, { sample } from \"lodash\"\n\n\nimport { addTileOverlays } from \"./LeafletMap\";\nimport L from \"leaflet\"\nimport { useDispatch } from \"react-redux\";\nimport { changePhenologyDate } from \"../features/sampleSlice\";\nimport { idField } from \"./SampleContainer\";\n\n// let smallMapObjs = {\n  \n// }\n\nconst SmallMap = (props) => {\n\n  const { date, point, setMapObj } = props\n\n  return (\n    <MapContainer\n      center={point || [28.5973518, 83.54495724]}\n      zoom={15}\n      className=\"small-map\"\n      zoomControl={false}\n      whenCreated={(m) => {\n        setMapObj(state => {\n          let new_state = {...state, [date]: m}\n          return new_state\n        })\n      }}\n    >\n      <TileLayer \n        url={BASEMAPS[\"Google Satellite\"].url} \n        attribution={BASEMAPS[\"Google Satellite\"].attribution} \n      />\n      \n      {point && <Marker position={point}/>}\n      \n    </MapContainer>\n  )\n}\n\nexport const MapCarousel = (props) => {\n\n  const sampleSlice = useSelector(state => state.samples)\n  let selectedSample = sampleSlice.geojson.features.filter(f => f.properties[idField] === sampleSlice.selected)[0]\n\n  const dispatch = useDispatch()\n\n  const [smallMapObjs, setSmallMapObjs] = useState({})\n\n\n  // move \n  useEffect(() => {\n    if (sampleSlice.selected) {\n      Object.values(smallMapObjs).forEach(m => {\n        m.panTo([selectedSample.geometry.coordinates[1], selectedSample.geometry.coordinates[0]])\n      })\n    }\n  }, [sampleSlice.selected])\n\n  useEffect(() => {\n    let newSmallMapObj = {}\n    let { start_date, end_date } = sampleSlice.phenology\n    start_date = new Date(start_date)\n    end_date = new Date(end_date)\n    let temp_date = start_date\n    while (temp_date <= end_date) {\n      let key = `${temp_date.getUTCFullYear()}-${temp_date.getUTCMonth()+1}`\n      newSmallMapObj[key] = smallMapObjs[key] \n      temp_date.setUTCMonth(temp_date.getUTCMonth() + 1)\n    }\n    setSmallMapObjs(newSmallMapObj)\n  }, [sampleSlice.phenology])\n\n  const handleClick = (e) => {\n    axios.get(\"phenology/monthly_composite\", {\n      baseURL: process.env.PUBLIC_URL,\n      params: {\n        start_date: sampleSlice.phenology.start_date,\n        end_date: sampleSlice.phenology.end_date\n      }\n    }).then(res => {\n      let body = res.data\n      Object.keys(smallMapObjs).forEach(date => {\n        const url = body[date]\n        let layer = new L.TileLayer(url)\n        layer.addTo(smallMapObjs[date])\n      })\n    })\n  }\n\n  return (\n    <div className=\"map-carousel h-100 d-flex overflow-auto\">\n      <div className=\"ps-2 py-2 pe-1\" style={{width:280, flexShrink: 0}}>\n        <Card className=\"w-100 h-100\">\n          <Card.Header>\n            <h6 className=\"m-0 p-0\">\n              Phenology Date Range\n              </h6>\n          </Card.Header>\n          <Card.Body className=\"p-2\">\n            <Form.Group\n              as={Row}\n              controlId={\"phenology_start_date\"}\n              className=\"mb-2\"\n            >\n              \n              <Form.Label column sm=\"3\"> \n                From\n              </Form.Label>\n              <Col sm=\"9\">\n                <Form.Control\n                  type=\"month\"\n                  name={`phenology_start_date`}\n                  value={sampleSlice.phenology.start_date}\n                  onChange={(e) => dispatch(changePhenologyDate({\n                    start_date: e.target.value\n                  }))}\n                  className=\"w-100\"\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group\n              as={Row}\n              controlId={\"phenology_end_date\"}\n            >\n              <Form.Label column sm={\"3\"}>\n                To\n              </Form.Label>\n              <Col sm={\"9\"}>\n                <Form.Control\n                  type=\"month\"\n                  name={`phenology_end_date`}\n                  value={sampleSlice.phenology.end_date}\n                  onChange={(e) => dispatch(changePhenologyDate({\n                    end_date: e.target.value\n                  }))}\n                />\n              </Col>\n              \n            </Form.Group>\n            <Row className=\"pt-2 justify-content-center\">\n              <Col sm=\"auto\">\n                <Button onClick={handleClick}>Load Composites</Button>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </div>\n\n      {Object.keys(smallMapObjs).map(date => (\n        <div className=\"px-1 py-2\" style={{width:250, flexShrink: 0}}>\n          <Card className=\"w-100 h-100\" key={date}>\n            <Card.Header className=\"py-0 text-center\">{date}</Card.Header>\n            <Card.Body className=\"p-0\">\n              <SmallMap \n                point={selectedSample && [...selectedSample.geometry.coordinates].reverse()} \n                date={date}\n                setMapObj={setSmallMapObjs}\n              />\n            </Card.Body>\n          </Card>\n        </div>\n      ))}\n\n    </div>\n  )\n}","import { useSelector } from \"react-redux\"\r\nimport parse from 'html-react-parser'\r\n\r\nexport const LogPanel = () => {\r\n\r\n  const log = useSelector(state => state.log)\r\n  \r\n  return (\r\n    <div className=\"w-100 h-100 p-2 bg-white overflow-auto text-break d-flex flex-column-reverse\">\r\n      <div>\r\n      {parse(log)}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import {\n  Route,\n  Switch,\n  useLocation,\n} from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Home from \"./components/Home\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { getCookie } from \"./utils/csrfToken\";\nimport { setToken } from \"./features/csrfTokenSlice\";\n\nimport AppStatusBar from \"./components/AppStatusBar\";\nimport Map from \"./components/LeafletMap\";\n\n\nimport { APP_NAME, setAppName } from \"./features/appNameSlice\";\n\nimport \"./App.css\";\nimport SplitPane from \"react-split-pane\";\nimport PhenologyRight from \"./apps/phenology/PhenologyRight\";\nimport PhenologyLeft from \"./apps/phenology/PhenologyLeft\";\nimport { EmpiricalLeft } from \"./apps/empirical/EmpiricalLeft\";\nimport EmpiricalRight from \"./apps/empirical/EmpiricalRight\";\nimport { ClassificationLeft } from \"./apps/classification/ClassificationLeft\";\nimport { ClassificationRight } from \"./apps/classification/ClassificationRight\";\nimport { MapCarousel } from \"./components/MapCarousel\";\nimport { LogPanel } from \"./components/LogPanel\";\n\nconst leftSize = {\n  \"default\": \"20%\",\n  \"max\": \"40%\"\n}\n\nconst rightSize = {\n  \"default\": \"25%\",\n  \"max\": \"40%\"\n}\n\nfunction App() {\n  const location = useLocation();\n\n  const dispatch = useDispatch();\n\n  const appName = useSelector(state => state.appName)\n\n  // const [info, setInfo] = useState(\"Please run the app to show area of rice.\");\n\n  useEffect(() => {\n    let token = getCookie(\"csrftoken\");\n    dispatch(setToken(token));\n  }, []);\n\n  useEffect(() => {\n    let temp = location.pathname.split(\"/\");\n    let currentName = temp[temp.length - 1] || \"home\";\n\n    dispatch(setAppName(APP_NAME[currentName]));\n  }, [location]);\n\n  return (\n    <div className=\"vh-100 vw-100\">\n      <Header />\n      <div className=\"main d-flex h-100 w-100\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n\n          <Route path={[\"/empirical\", \"/phenology\", \"/classification\"]}>\n\n            <SplitPane\n              split=\"vertical\"\n              defaultSize={leftSize[\"default\"]}\n              minSize={0}\n              maxSize={leftSize[\"max\"]}\n              className=\"h-100 position-static\"\n            >\n              {/* left panel */}\n              <div className=\"h-100 w-100\">\n                <Switch>\n                  <Route exact path=\"/empirical\">\n                    <EmpiricalLeft  />\n                  </Route>\n                  <Route exact path=\"/phenology\">\n                    <PhenologyLeft />\n                  </Route>\n                  <Route exact path=\"/classification\">\n                    <ClassificationLeft  />\n                  </Route>\n                </Switch>\n              </div>\n\n              <SplitPane \n                split=\"vertical\" \n                primary=\"second\" \n                defaultSize={rightSize[\"default\"]}\n                minSize={0}\n                maxSize={rightSize[\"max\"]}\n              >\n                {/* Mid panel */}\n                <div className=\"h-100 w-100\">\n                  {/* <MapPanel /> */}\n                  <SplitPane \n                    split=\"horizontal\" \n                    primary=\"second\" \n                    defaultSize={250} \n                    maxSize={400}\n                    minSize={0}\n                  >\n                    <div className=\"w-100 h-100\">\n                      <Map />\n                    </div>\n\n                    <div className=\"w-100\">\n                      {appName === \"phenology\" ? (<MapCarousel />) : <LogPanel />}\n                    </div>\n\n                  </SplitPane>\n                </div>\n\n                {/* Right panel */}\n                <div className=\"h-100\">\n                  <Route exact path=\"/phenology\">\n                    <div className=\"h-100 w-100\">\n                      <PhenologyRight />\n                    </div>\n                  </Route>\n                  <Route exact path=\"/empirical\">\n                    <EmpiricalRight />\n                  </Route>\n                  <Route exact path=\"/classification\">\n                    <ClassificationRight />\n                  </Route>\n                </div>\n              </SplitPane>\n            </SplitPane>\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport csrfTokenReducer from \"./features/csrfTokenSlice\";\nimport datasetReducer from './features/datasetSlice'\nimport sampleReducer from \"./features/sampleSlice\";\nimport seasonReducer from \"./features/seasonSlice\";\nimport editingReducer from \"./features/editingSlice\";\nimport appStatusReducer from \"./features/appStatusSlice\";\nimport appNameReducer from \"./features/appNameSlice\";\nimport classificationReducer from \"./features/classificationSlice\";\nimport logReducer from \"./features/logSlice\";\n\nexport default configureStore({\n    reducer: {\n        csrfToken: csrfTokenReducer,\n        dataset: datasetReducer,\n        seasons: seasonReducer,\n        samples: sampleReducer,\n        editing: editingReducer,\n        appStatus: appStatusReducer,\n        appName: appNameReducer,\n        classification: classificationReducer,\n        log: logReducer,\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}