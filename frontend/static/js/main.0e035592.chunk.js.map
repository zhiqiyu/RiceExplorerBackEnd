{"version":3,"sources":["components/Header.jsx","features/phenology/appNameSlice.js","pages/Home.jsx","features/phenology/appStatusSlice.js","components/AppStatusBar.jsx","utils/constants.js","features/phenology/editingSlice.js","features/phenology/sampleSlice.js","components/panels/SamplePanel.jsx","components/LeafletMap.jsx","features/phenology/datasetSlice.js","components/DataFilterGroup.jsx","features/phenology/seasonSlice.js","components/SeasonFilterGroup.jsx","components/panels/FilterPanel.jsx","components/Sidebar.jsx","components/SplitPanel.jsx","features/phenology/csrfTokenSlice.js","pages/EmpiricalApp.jsx","components/MapCarousel.jsx","components/panels/MapPanel.jsx","components/panels/SettingsPanel.jsx","pages/PhenologyApp.jsx","features/phenology/classificationSlice.js","components/panels/ClassificationPanel.jsx","pages/ClassificationApp.jsx","App.js","utils/csrfToken.js","reportWebVitals.js","store.js","index.js"],"names":["Navbar","bg","variant","expand","className","fixed","Container","fluid","Brand","href","Toggle","Collapse","id","Nav","Link","to","as","NavLink","APP_NAME","appNameSlice","createSlice","name","initialState","reducers","setAppName","state","action","payload","actions","Home","dispatch","useDispatch","useEffect","appStatusSlice","setStatus","AppStatusBar","props","status","useSelector","appStatus","seasonNames","districtList","dataList","radar","optical","featureList","VH","VV","NDVI","EVI","NDWI","MNDWI","BASEMAPS","url","attribution","editingSlice","toggle","sampleSlice","selected","geojson","type","features","classProperty","positiveValue","replace","addFeatures","push","deleteFeature","idx","findIndex","value","index","properties","idField","splice","selectFeature","setClassProperty","SamplePanel","useState","chartData","setChartData","sampleState","samples","selected_sample","filter","f","latlon","geometry","coordinates","reverse","panToLatLng","geojsonLayer","eachLayer","layer","feature","openPopup","sample","curve_data","Object","entries","forEach","key","val","endsWith","words","split","date","Date","Number","parseInt","length","getTime","keys","sort","a","b","row","Array","fill","prepareChartData","setStyle","radius","fillColor","stroke","color","opacity","fillOpacity","width","height","chartType","loader","data","options","hAxis","title","format","vAxis","legend","position","rootProps","SampleContainer","handleUploadFile","e","target","files","file","shp","arrayBuffer","i","L","geoJSON","pointToLayer","geoJsonPoint","latlng","circleMarker","onEachFeature","bindPopup","ReactDOMServer","renderToString","json","Table","striped","bordered","hover","map","maxHeight","maxWidth","addTo","setGeojsonLayer","overlays","addTileOverlays","Card","Header","Button","size","htmlFor","onChange","onClick","console","log","json_blob","Blob","JSON","stringify","saveAs","Body","Form","Select","field","k","Set","v","ListGroup","SampleItem","Item","handleSelectSample","active","style","backgroundColor","stopPropagation","removeLayer","handleDelete","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","default","iconUrl","shadowUrl","layerControlRef","tileOverlays","current","overlay","addOverlay","removeAllOverlays","lat","lng","panTo","EditingControl","editing","handleChangeEditing","displayControl","useMemo","InfoControl","info","Map","showEditControl","showInfoControl","lcRef","useRef","setTimeout","MapContainer","center","zoom","whenCreated","m","LayersControl","ref","basemap","BaseLayer","checked","TileLayer","datasetSlice","cloud","composite","composite_days","ascd","desc","boundary","boundary_file","crop_mask","update","changeDataSource","SatelliteDataFilters","disabled","datasetFilters","dataset","handleChange","Group","Row","controlId","Label","column","xs","Col","label","Control","min","max","step","Check","AuxDataFilters","class","required","URL","createObjectURL","SEASONS","sowing","peak","harvesting","fromEntries","season","on","start","end","SEASONSlice","SeasonFilterGroup","inputThres","readOnly","seasonFilter","appName","seasons","charAt","toUpperCase","slice","sm","placeholder","tabNames","FilterPanel","setInfo","csrfToken","seasonFilters","validated","setValidated","loading","setLoading","method","onSubmit","preventDefault","currentTarget","checkValidity","formData","FormData","jsonData","_","cloneDeep","append","axios","post","baseURL","process","headers","then","response","res_body","tile_url","download_url","area","toFixed","catch","reason","alert","noValidate","TabContainer","defaultActiveKey","unmountOnExit","eventKey","TabContent","TabPane","Spinner","animation","role","DropdownButton","onSelect","Dropdown","Sidebar","ismdwn","SplitPanel","leftPanel","rightPanel","panel1","panel2","mV","flexBasis","Math","clientX","document","body","clientWidth","removeEventListener","children","onMouseDown","event","addEventListener","csrfTokenSlice","setToken","EmpiricalApp","smallMapObjs","SmallMap","month","point","zoomControl","Marker","MapCarousel","selectedSample","date_start","date_end","get","params","year","res","values","flex","MapPanel","SettingsPanel","start_date","end_date","candidates","filteredCandidates","arr","first","d3","third","interquatile","upperbound","lowerbound","element","removeOutliers","mean","sum","std","sqrt","pow","PhenologyApp","MODEL_SPECS","numberOfTrees","description","variablesPerSplit","minLeafPopulation","bagFraction","maxNodes","seed","classificationSlice","updateModelSpecs","model_specs","changeModel","model","ClassificationPanel","classificationState","classification","startsWith","specName","ModelSpecItem","selectedModel","handleModelSpecChange","OverlayTrigger","trigger","placement","Popover","option","renderInput","ClassificationApp","App","token","cookieValue","cookie","cookies","trim","substring","decodeURIComponent","getCookie","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","csrfTokenReducer","datasetReducer","seasonReducer","sampleReducer","editingReducer","appStatusReducer","appNameReducer","classificationReducer","ReactDOM","render","StrictMode","basename","store","getElementById"],"mappings":"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","file":"static/js/main.0e035592.chunk.js","sourcesContent":["import { Container, Nav, Navbar } from 'react-bootstrap';\nimport { BrowserRouter, Link, NavLink, Route, Switch } from 'react-router-dom'\n\nexport default () => {\n  return (\n    <header>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" className=\"header\" fixed=\"top\">\n        <Container fluid>\n          <Navbar.Brand href=\"/\">Crop Mapping Explorer</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"me-auto\">\n              <Nav.Link to={\"/phenology\"} as={NavLink}>Phenology Explorer</Nav.Link>\n              <Nav.Link to={\"/empirical\"} as={NavLink}>Empirical Thresholding</Nav.Link>\n              <Nav.Link to={\"/classification\"} as={NavLink}>Classification</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </header>\n  )\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const APP_NAME = {\n  home: \"home\",\n  empirical: \"empirical\",\n  phenology: \"phenology\",\n  classification: \"classification\"\n}\n\nexport const appNameSlice = createSlice({\n  name: \"appName\",\n  initialState: null,\n  reducers: {\n    setAppName: (state, action) => action.payload\n  }\n})\n\nexport const { setAppName } = appNameSlice.actions\n\nexport default appNameSlice.reducer","import { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { APP_NAME, setAppName } from \"../features/phenology/appNameSlice\"\n\nexport function Home() {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setAppName(APP_NAME.home))\n  }, [])\n\n  return (\n    <div>\n      <h1>Hello</h1>\n    </div>\n  )\n}\n\nexport default Home;","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const APP_STATUS = {\n  ready: \"Ready\",\n  running: \"Running...\",\n  finished: \"Finished\",\n}\n\nexport const appStatusSlice = createSlice({\n  name: \"appStatus\",\n  initialState: APP_STATUS.ready,\n  reducers: {\n    setStatus: (state, action) => action.payload\n  }\n})\n\nexport const { setStatus } = appStatusSlice.actions\n\nexport default appStatusSlice.reducer","import React, { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { APP_STATUS } from \"../features/phenology/appStatusSlice\";\n\n\nexport function AppStatusBar(props) {\n\n  const status = useSelector(state => state.appStatus)\n  \n  return (\n    <div\n      className=\"app-status-bar align-items-center d-flex position-absolute\"\n    >\n      <div className=\"d-flex\">\n        <h6 className=\"mb-0\">App Status: <b>{status}</b></h6>\n      </div>\n    </div>\n  )\n}\n\nexport default AppStatusBar;","export const seasonNames = [\"sowing\", \"peak\", \"harvesting\"]\n\nexport const districtList = {\n  \"upload\": \"Upload boundary file (shp)\",\n  \"MORANG\": \"MORANG\",\n  \"SUNSARI\": \"SUNSARI\",\n  \"JHAPA\": \"JHAPA\",\n  \"MAHOTTARI\": \"MAHOTTARI\",\n  \"PARSA\": \"PARSA\",\n  \"RAUTAHAT\": \"RAUTAHAT\",\n  \"SAPTARI\": \"SAPTARI\",\n  \"SARLAHI\": \"SARLAHI\",\n  \"SIRAHA\": \"SIRAHA\",\n  \"BARA\": \"BARA\",\n  \"DHANUSHA\": \"DHANUSHA\",\n  \"CHITAWAN\": \"CHITAWAN\",\n  \"NAWALPARASI_E\": \"NAWALPARASI_E\",\n  \"KAPILBASTU\": \"KAPILBASTU\",\n  \"NAWALPARASI_W\": \"NAWALPARASI_W\",\n  \"RUPANDEHI\": \"RUPANDEHI\",\n  \"BANKE\": \"BANKE\",\n  \"BARDIYA\": \"BARDIYA\",\n  \"DANG\": \"DANG\",\n  \"KAILALI\": \"KAILALI\",\n  \"KANCHANPUR\": \"KANCHANPUR\",\n};\n\nexport const dataList = {\n  radar: {\n    \"COPERNICUS/S1_GRD\":\n      \"Sentinel-1 SAR GRD: C-band Synthetic Aperture Radar Ground Range Detected, log scaling\",\n  },\n  optical: {\n    \"MODIS/006/MOD13Q1\":\n      \"MOD13Q1.006 Terra Vegetation Indices 16-Day Global 250m\",\n    \"LANDSAT/LT05/C01/T1_TOA\":\n      \"USGS Landsat 5 TM Collection 1 Tier 1 TOA Reflectance\",\n    \"LANDSAT/LT05/C01/T1_SR\": \"USGS Landsat 5 Surface Reflectance Tier 1\",\n    \"LANDSAT/LC08/C01/T1_TOA\":\n      \"USGS Landsat 8 Collection 1 Tier 1 TOA Reflectance\",\n    \"COPERNICUS/S2\": \"Sentinel-2 MSI: MultiSpectral Instrument, Level-1C\",\n    \"COPERNICUS/S2_SR\": \"Sentinel-2 MSI: MultiSpectral Instrument, Level-2A\",\n  },\n};\n\nexport const featureList = {\n  radar: {\n    VH: \"VH band\",\n    VV: \"VV band\",\n    \"VH/VV\": \"VH/VV (cross ratio)\",\n  },\n  optical: {\n    NDVI: \"NDVI\",\n    EVI: \"EVI\",\n    NDWI: \"NDWI\",\n    MNDWI: \"MNDWI\",\n  },\n};\n\n\n\nexport const BASEMAPS = {\n  \"Google Maps\": {\n    url: \"https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\",\n    attribution: \"Google\"\n  },\n  \"Google Satellite\": {\n    url: 'https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n    attribution: \"Google\"\n  },\n  \"Google Terrain\": {\n    url: \"https://mt1.google.com/vt/lyrs=p&x={x}&y={y}&z={z}\",\n    attribution: \"Google\",\n  },\n  \"ESRI World Imagery\": {\n    url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n    attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n  }\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\n\nexport const editingSlice = createSlice({\n  name: \"editing\",\n  initialState: false,\n  reducers: {\n    toggle: (state) => !state\n  }\n})\n\nexport const { toggle } = editingSlice.actions\n\nexport default editingSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\";\nimport { idField } from \"../../components/panels/SamplePanel\";\n\nconst initialState = {\n  selected: null,\n  geojson: {\n    type: \"FeatureCollection\",\n    features: [],\n  },\n  classProperty: {\n    name: null,\n    positiveValue: null,\n  }\n};\n\nexport const sampleSlice = createSlice({\n  name: \"samples\",\n  initialState,\n  reducers: {\n    replace: (state, action) => {\n      state.geojson = action.payload\n      state.selected = null\n      return state\n    },\n    addFeatures: (state, action) => {\n      state.geojson.features.push(action.payload)\n      return state\n    },\n    deleteFeature: (state, action) => {\n      let idx = state.geojson.features.findIndex((value, index) => {\n        return value.properties[idField] === action.payload\n      })\n      state.geojson.features.splice(idx, 1)\n    },\n    selectFeature: (state, action) => {\n      state.selected = action.payload\n    },\n    setClassProperty: (state, action) => {\n      state.classProperty = {...state.classProperty, ...action.payload}\n    }\n  },\n});\n\nexport const { replace, addFeatures, deleteFeature, selectFeature, setClassProperty } = sampleSlice.actions\n\nexport default sampleSlice.reducer\n","import { useContext, useState } from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { Button, ButtonGroup, Card, Form, ListGroup, Table } from \"react-bootstrap\";\nimport shp from \"shpjs\";\nimport L from \"leaflet\";\nimport { map, layerControlRef, addTileOverlays, panToLatLng, geojsonLayer, setGeojsonLayer, addGeoJsonOverlay } from \"../LeafletMap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  replace,\n  addFeatures,\n  selectFeature,\n  setClassProperty,\n  deleteFeature\n} from \"../../features/phenology/sampleSlice\";\nimport { useEffect } from \"react\";\nimport Chart from \"react-google-charts\";\nimport _, { sample } from 'lodash'\nimport { FileEarmarkArrowUpFill, SaveFill, TrashFill, Upload } from \"react-bootstrap-icons\";\nimport { saveAs } from 'file-saver'\n\nconst json2table = (json) => {\n  return (\n    <Table striped bordered hover>\n      <thead>\n        <th>key</th>\n        <th>value</th>\n      </thead>\n      <tbody>\n        {Object.entries(json).map(([key, val]) => (\n          <tr>\n            <td>{key}</td>\n            <td>{val}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst prepareChartData = (sample) => {\n  let curve_data = {}\n  Object.entries(sample.properties).forEach(([key, val]) => {\n    if (key.endsWith('_feature')) {\n      let words = key.split('_')\n      let date = new Date(Number.parseInt(words[words.length - 2])).getTime()\n      curve_data[date] = val\n    }\n  })\n\n  if (Object.keys(curve_data).length === 0) {\n    return null\n  }\n\n  let chartData = [['date', 'value']]\n\n  Object.keys(curve_data).sort((a,b)=>Number.parseInt(a)-Number.parseInt(b)).forEach(date => {\n    let row = Array(chartData[0].length).fill(null)\n    row[0] = new Date(Number.parseInt(date))\n    row[1] = curve_data[date]\n    chartData.push(row)\n  })\n  \n  // Object.keys(seasons).forEach((season, i) => {\n  //   Object.keys(seasons[season]).sort((a,b)=>Number.parseInt(a)-Number.parseInt(b)).forEach(date => {\n  //     let row = Array(chartData[0].length).fill(null)\n  //     row[0] = new Date(Number.parseInt(date))\n  //     row[i+1] = seasons[season][date]\n  //     chartData.push(row)\n  //   })\n  // })\n  return chartData\n}\n\n// let geojsonLayer = null\n\nexport const idField = \"_$id\"\n\nexport default function SamplePanel() {\n  const [invalidFile, setInvalidFile] = useState(true);\n  const [chartData, setChartData] = useState(null);\n\n  // const [fieldState, setFieldState] = useState(null);\n  // const [positiveValueState, setPositiveValueState] = useState(null);\n\n  const sampleState = useSelector((state) => state.samples);\n  const dispatch = useDispatch();\n\n  // console.log(sampleState.geojson)\n  useEffect(() => {\n    if (typeof sampleState.selected === 'number') {\n      // console.log(sampleState.selected.geometry.coordinates.reverse())\n      let selected_sample = sampleState.geojson.features.filter(f => f.properties[idField] === sampleState.selected)[0]\n      let latlon = [...selected_sample.geometry.coordinates].reverse()\n      panToLatLng(latlon)\n      if (geojsonLayer) {\n        // geojsonLayer.openPopup(latlon)\n        // let a = L.geoJSON()\n        // a.eachLayer(layer => layer.fea)\n        geojsonLayer.eachLayer(layer => {\n          if (layer.feature.properties[idField] === sampleState.selected) {\n            layer.openPopup(latlon)\n          }\n        })\n      }\n      \n      setChartData(prepareChartData(selected_sample))\n    }\n  }, [sampleState.selected, sampleState.geojson])\n\n  useEffect(() => {\n    if (sampleState.classProperty.name === null) return;\n\n    geojsonLayer.eachLayer(layer => {\n      let geoJsonPoint = layer.feature;\n      if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\n        layer.setStyle({\n          radius: 3, \n          fillColor: \"red\", \n          stroke: 0.2,\n          color: \"black\",\n          opacity: 0.5,\n          fillOpacity: 1,\n        })\n      } else {\n        layer.setStyle({\n          radius: 3, \n          fillColor: \"blue\", \n          stroke: 0.2,\n          color: \"black\",\n          opacity: 0.5,\n          fillOpacity: 1\n        })\n      }\n    })\n\n  }, [sampleState.classProperty])\n\n  // const setGeoJsonStyle = (geoJsonPoint, latlng) => {\n  //   if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\n  //     return L.circleMarker(latlng, {\n  //       radius: 3, \n  //       fillColor: \"red\", \n  //       stroke: 0.2,\n  //       color: \"black\",\n  //       opacity: 0.5,\n  //       fillOpacity: 1,\n  //     })\n  //   } else {\n  //     return L.circleMarker(latlng, {\n  //       radius: 3, \n  //       fillColor: \"blue\", \n  //       stroke: 0.2,\n  //       color: \"black\",\n  //       opacity: 0.5,\n  //       fillOpacity: 1\n  //     })\n  //   }\n  // }\n\n  // const handleUploadFile = async (e) => {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     let file = e.target.files[0];\n  //     let geojson = await shp(await file.arrayBuffer());\n  //     geojson.features.forEach((feature, i)=> {\n  //       feature.properties[idField] = i+1\n  //     })\n\n  //     // if (geojson.features[0].geometry.type !== \"Point\") {\n  //     // }\n\n  //     // create geojson layer\n  //     let layer = L.geoJSON(geojson, {\n  //       pointToLayer: (geoJsonPoint, latlng) => {\n  //         if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\n  //           return L.circleMarker(latlng, {\n  //             radius: 3, \n  //             fillColor: \"red\", \n  //             stroke: 0.2,\n  //             color: \"black\",\n  //             opacity: 0.5,\n  //             fillOpacity: 1,\n  //           })\n  //         } else {\n  //           return L.circleMarker(latlng, {\n  //             radius: 3, \n  //             fillColor: \"blue\", \n  //             stroke: 0.2,\n  //             color: \"black\",\n  //             opacity: 0.5,\n  //             fillOpacity: 1\n  //           })\n  //         }\n  //       },\n  //       onEachFeature: (feature, layer) => {\n  //         layer.bindPopup(layer => {\n  //           return ReactDOMServer.renderToString(json2table(layer.feature.properties))\n  //         }, {\n  //           maxHeight: \"400\",\n  //           maxWidth: \"400\",\n  //         })\n  //       }\n  //     })\n  //     layer.addTo(map);\n      \n  //     setGeojsonLayer(layer)\n\n  //     // let overlays = [\n  //     //   {\n  //     //     layer: layer,\n  //     //     name: file.name,\n  //     //   },\n  //     // ];\n  //     // addTileOverlays(overlays);\n  //     addGeoJsonOverlay()\n\n  //     dispatch(replace(geojson));\n  //   }\n  // };\n\n  // const handleSelectSample = (idx) => {\n  //   dispatch(selectFeature(idx));\n  // };\n\n  // const handleSelectClassField = (field) => {\n  //   dispatch(setClassProperty({\n  //     name: field,\n  //     positiveValue: null,\n  //   }))\n  // }\n\n  // const handleChangeClassValue = (value) => {\n  //   dispatch(setClassProperty({\n  //     positiveValue: value\n  //   }))\n  // }\n\n  // const handleSaveClassProperty = (e) => {\n  //   e.preventDefault()\n\n  //   dispatch(setClassProperty({\n  //     name: fieldState,\n  //     positiveValue: positiveValueState,\n  //   }))\n  // }\n\n  return (\n    <div className=\"sidebar h-100 d-flex flex-column\">\n      \n      <div className=\"sample-container px-2 pt-2\">\n        <SampleContainer />\n        {/* <div>\n          <Card className=\"h-100\">\n            <Card.Header>\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                  <h6 className=\"m-0 p-0\">\n                    Samples { `(count: ${sampleState.geojson.features.length})`}\n                  </h6>\n                </div>\n                <div>\n                  <Button\n                    variant=\"light\"\n                    size=\"sm\"\n                    className=\"h-100 w-100 px-0\"\n                    as=\"label\"\n                    htmlFor=\"sample-upload\"\n                  >\n                    <FileEarmarkArrowUpFill />\n                  </Button>\n                  <input\n                    type=\"file\"\n                    className=\"d-none\"\n                    id=\"sample-upload\"\n                    onChange={handleUploadFile}\n                  />\n                </div>\n              </div>\n            </Card.Header>\n            <Card.Body className=\"p-2\">\n              <div className=\"container card mb-2\">\n                <div className=\"p-2\">\n                  <div className=\"row align-items-center mb-2\">\n                    {/* <Form onSubmit={handleSaveClassProperty}> \n                    <div className=\"col-auto\">Class field:</div>\n                    <div className=\"col\">\n                      <Form.Select \n                        className=\"w-100\"\n                        value={sampleState.classProperty.name}\n                        onChange={e => handleSelectClassField(e.target.value)}\n                      >\n                        {sampleState.geojson.features.length !== 0 && Object.keys(sampleState.geojson.features[0].properties).map(k => (\n                          <option key={k}>{k}</option>\n                        ))}\n                      </Form.Select>\n                    </div>\n                  </div>\n                  <div className=\"row align-items-center\">\n                    <div className=\"col-auto\">Class value:</div>\n                    <div className=\"col\"> \n                      <Form.Select \n                        value={sampleState.classProperty.positiveValue}\n                        onChange={e => handleChangeClassValue(e.target.value)}\n                      >\n                        <option selected></option>\n                        {sampleState.geojson.features.length !== 0 && [...new Set(sampleState.geojson.features.map(feature => feature.properties[sampleState.classProperty.name]))].map(v => {\n                          return (<option key={v}>{v}</option>)\n                        })\n                        }\n                      </Form.Select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <ListGroup className=\"sample-list\">\n                {sampleState.geojson &&\n                  sampleState.geojson.features.map((feature, idx) => (\n                    <SampleItem feature={feature} idx={idx} />\n                  ))}\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div> */}\n      </div>\n\n      <div className=\"chart-canvas p-2\">\n        <div className=\"w-100 h-100 bg-white\">\n        {chartData ?\n          <Chart \n            width=\"100%\" \n            height=\"90%\" \n            chartType=\"LineChart\" \n            loader={<div>Loading Chart...</div>} \n            data={chartData}\n            options={{\n              hAxis: {\n                title: 'Date',\n                format: \"yyyy-MM-dd\"\n              },\n              vAxis: {\n                title: 'Value',\n              },\n              legend: {\n                position: 'bottom'\n              },\n            }}\n            rootProps={{ 'data-testid': '1' }}\n          />\n          :\n          \"Click on an sample to see its phenology\"\n        }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const SampleContainer = () => {\n  // const [invalidFile, setInvalidFile] = useState(true);\n  // const [chartData, setChartData] = useState(null);\n\n  const [fieldState, setFieldState] = useState(null);\n  const [positiveValueState, setPositiveValueState] = useState(null);\n\n  const sampleState = useSelector((state) => state.samples);\n  const dispatch = useDispatch();\n\n  // console.log(sampleState.geojson)\n  // useEffect(() => {\n  //   if (typeof sampleState.selected === 'number') {\n  //     // console.log(sampleState.selected.geometry.coordinates.reverse())\n  //     let selected_sample = sampleState.geojson.features.filter(f => f.properties[idField] === sampleState.selected)[0]\n  //     let latlon = [...selected_sample.geometry.coordinates].reverse()\n  //     panToLatLng(latlon)\n  //     if (geojsonLayer) {\n  //       // geojsonLayer.openPopup(latlon)\n  //       // let a = L.geoJSON()\n  //       // a.eachLayer(layer => layer.fea)\n  //       geojsonLayer.eachLayer(layer => {\n  //         if (layer.feature.properties[idField] === sampleState.selected) {\n  //           layer.openPopup(latlon)\n  //         }\n  //       })\n  //     }\n      \n  //     setChartData(prepareChartData(selected_sample))\n  //   }\n  // }, [sampleState.selected, sampleState.geojson])\n\n  useEffect(() => {\n    if (sampleState.classProperty.name === null) return;\n\n    geojsonLayer.eachLayer(layer => {\n      let geoJsonPoint = layer.feature;\n      if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\n        layer.setStyle({\n          radius: 3, \n          fillColor: \"red\", \n          stroke: 0.2,\n          color: \"black\",\n          opacity: 0.5,\n          fillOpacity: 1,\n        })\n      } else {\n        layer.setStyle({\n          radius: 3, \n          fillColor: \"blue\", \n          stroke: 0.2,\n          color: \"black\",\n          opacity: 0.5,\n          fillOpacity: 1\n        })\n      }\n    })\n\n  }, [sampleState.classProperty])\n\n  // const setGeoJsonStyle = (geoJsonPoint, latlng) => {\n  //   if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\n  //     return L.circleMarker(latlng, {\n  //       radius: 3, \n  //       fillColor: \"red\", \n  //       stroke: 0.2,\n  //       color: \"black\",\n  //       opacity: 0.5,\n  //       fillOpacity: 1,\n  //     })\n  //   } else {\n  //     return L.circleMarker(latlng, {\n  //       radius: 3, \n  //       fillColor: \"blue\", \n  //       stroke: 0.2,\n  //       color: \"black\",\n  //       opacity: 0.5,\n  //       fillOpacity: 1\n  //     })\n  //   }\n  // }\n\n  const handleUploadFile = async (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      let file = e.target.files[0];\n      let geojson = await shp(await file.arrayBuffer());\n      geojson.features.forEach((feature, i)=> {\n        feature.properties[idField] = i+1\n      })\n\n      // if (geojson.features[0].geometry.type !== \"Point\") {\n      // }\n\n      // create geojson layer\n      let layer = L.geoJSON(geojson, {\n        pointToLayer: (geoJsonPoint, latlng) => {\n          if (geoJsonPoint.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue) {\n            return L.circleMarker(latlng, {\n              radius: 3, \n              fillColor: \"red\", \n              stroke: 0.2,\n              color: \"black\",\n              opacity: 0.5,\n              fillOpacity: 1,\n            })\n          } else {\n            return L.circleMarker(latlng, {\n              radius: 3, \n              fillColor: \"blue\", \n              stroke: 0.2,\n              color: \"black\",\n              opacity: 0.5,\n              fillOpacity: 1\n            })\n          }\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindPopup(layer => {\n            return ReactDOMServer.renderToString(json2table(layer.feature.properties))\n          }, {\n            maxHeight: \"400\",\n            maxWidth: \"400\",\n          })\n        }\n      })\n      layer.addTo(map);\n      \n      setGeojsonLayer(layer)\n\n      let overlays = [\n        {\n          layer: layer,\n          name: file.name,\n        },\n      ];\n      addTileOverlays(overlays);\n\n      dispatch(replace(geojson));\n    }\n  };\n\n  const handleSelectClassField = (field) => {\n    dispatch(setClassProperty({\n      name: field,\n      positiveValue: null,\n    }))\n  }\n\n  const handleChangeClassValue = (value) => {\n    dispatch(setClassProperty({\n      positiveValue: value\n    }))\n  }\n\n  const handleSaveSamples = (e) => {\n    console.log(sampleState.geojson)\n    const json_blob = new Blob([JSON.stringify(sampleState.geojson)], {type: \"application/json\"})\n    saveAs(json_blob, \"samples.geojson\")\n  }\n\n  return (\n    <div className=\"sample-container px-2 pt-2\">\n      <Card className=\"h-100\">\n        <Card.Header>\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <div>\n              <h6 className=\"m-0 p-0\">\n                Samples { `(count: ${sampleState.geojson.features.length})`}\n              </h6>\n            </div>\n            <div>\n              <Button\n                variant=\"light\"\n                size=\"sm\"\n                className=\"h-100 w-100 px-0\"\n                as=\"label\"\n                htmlFor=\"sample-upload\"\n              >\n                <FileEarmarkArrowUpFill />\n              </Button>\n              <input\n                type=\"file\"\n                className=\"d-none\"\n                id=\"sample-upload\"\n                onChange={handleUploadFile}\n              />\n            </div>\n            <div>\n              <Button\n                variant=\"light\"\n                size=\"sm\"\n                className=\"h-100 w-100 px-0\"\n                onClick={handleSaveSamples}\n              >\n                <SaveFill />\n              </Button>\n            </div>\n          </div>\n        </Card.Header>\n        <Card.Body className=\"p-2\">\n          <div className=\"container card mb-2\">\n            <div className=\"p-2\">\n              <div className=\"row align-items-center mb-2\">\n                {/* <Form onSubmit={handleSaveClassProperty}> */}\n                <div className=\"col-auto\">Class field:</div>\n                <div className=\"col\">\n                  <Form.Select \n                    className=\"w-100\"\n                    value={sampleState.classProperty.name}\n                    onChange={e => handleSelectClassField(e.target.value)}\n                  >\n                    {sampleState.geojson.features.length !== 0 && Object.keys(sampleState.geojson.features[0].properties).map(k => (\n                      <option key={k}>{k}</option>\n                    ))}\n                  </Form.Select>\n                </div>\n              </div>\n              <div className=\"row align-items-center\">\n                <div className=\"col-auto\">Class value:</div>\n                <div className=\"col\"> \n                  {/* <Form.Control \n                    size=\"sm\" \n                    type=\"text\" \n                    value={positiveValueState}\n                    onChange={e => setPositiveValueState(e.target.value)}\n                  /> */}\n                  <Form.Select \n                    value={sampleState.classProperty.positiveValue}\n                    onChange={e => handleChangeClassValue(e.target.value)}\n                  >\n                    <option selected></option>\n                    {sampleState.geojson.features.length !== 0 && [...new Set(sampleState.geojson.features.map(feature => feature.properties[sampleState.classProperty.name]))].map(v => {\n                      return (<option key={v}>{v}</option>)\n                    })\n                    }\n                  </Form.Select>\n                </div>\n                {/* <div><Button type=\"submit\" >Save</Button></div>\n                </Form> */}\n              </div>\n            </div>\n          </div>\n\n          <ListGroup className=\"sample-list\">\n            {sampleState.geojson &&\n              sampleState.geojson.features.map((feature, idx) => (\n                <SampleItem feature={feature} idx={idx} />\n                // <ListGroup.Item\n                //   action\n                //   className=\"px-3 py-1\"\n                //   key={idx}\n                //   onClick={() => handleSelectSample(feature.properties[idField])}\n                //   active={feature.properties[idField] === sampleState.selected}\n                //   style={{backgroundColor: feature.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue ? \"lightgreen\" : null}}\n                // >\n                //   {`${feature.properties[idField]} - ${feature.properties[sampleState.classProperty.name]}`}\n                // </ListGroup.Item>\n              ))}\n          </ListGroup>\n        </Card.Body>\n      </Card>\n    </div>\n  )\n\n}\n\n\nconst SampleItem = (props) => {\n\n  const { idx, feature } = props;\n\n  const sampleState = useSelector(state => state.samples)\n  const dispatch = useDispatch()\n\n  const handleSelectSample = (idx) => {\n    dispatch(selectFeature(idx));\n  };\n\n  const handleDelete = (e, id) => {\n    e.stopPropagation()\n    console.log(id)\n    geojsonLayer.eachLayer(layer => {\n      \n      if (id === layer.feature.properties[idField]) {\n        geojsonLayer.removeLayer(layer)\n      }\n    })\n    dispatch(deleteFeature(id))\n    dispatch(selectFeature(null))\n  }\n\n  return (\n    <ListGroup.Item\n      action\n      className=\"px-3 py-1\"\n      key={idx}\n      onClick={() => handleSelectSample(feature.properties[idField])}\n      active={feature.properties[idField] === sampleState.selected}\n      style={{backgroundColor: feature.properties[sampleState.classProperty.name] === sampleState.classProperty.positiveValue ? \"lightgreen\" : null}}\n    >\n      <div className=\"d-flex align-items-center flex-row justify-content-between\">\n        <div>\n          {`${feature.properties[idField]} - ${feature.properties[sampleState.classProperty.name]}`}\n        </div>\n        <div >\n          <Button\n            variant=\"light\"\n            size=\"sm\"\n            className=\"h-100 w-100 px-0 bg-transparent\"\n            as=\"label\"\n            onClick={(e) => handleDelete(e, feature.properties[idField])}\n          >\n            <TrashFill />\n          </Button>\n        </div>\n      </div>\n      \n    </ListGroup.Item>\n  )\n}","import {\n  LayersControl,\n  MapContainer,\n  TileLayer,\n  useMap,\n  GeoJSON,\n  Popup,\n} from \"react-leaflet\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport { useMemo, useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport _ from \"lodash\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { useContext } from \"react\";\nimport { BASEMAPS } from \"../utils/constants\";\nimport { toggle } from \"../features/phenology/editingSlice\";\n\nimport { idField } from \"./panels/SamplePanel\"\n\nimport L from \"leaflet\";\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png').default,\n    iconUrl: require('leaflet/dist/images/marker-icon.png').default,\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png').default\n});\n\nconst defaultBaseMap = \"Google Maps\";\n\n// global variable to hold Leaflet-related variables and methods\nexport let map = null;\nexport let layerControlRef = null;\nexport let tileOverlays = [];\nexport let geojsonLayer = null;\nexport const setGeojsonLayer = (layer) => geojsonLayer = layer\n\nexport const addTileOverlays = (overlays) => {\n  if (map && layerControlRef.current) {\n    overlays.forEach((overlay) => {\n      overlay.layer.addTo(map);\n      layerControlRef.current.addOverlay(overlay.layer, overlay.name);\n      tileOverlays.push(overlay.layer);\n    });\n  }\n};\n\nexport const addGeoJsonOverlay = () => {\n  if (geojsonLayer && map && layerControlRef.current) {\n    geojsonLayer.addTo(map);\n    layerControlRef.current.addOverlay(geojsonLayer, \"samples\")\n  }\n}\n\n// export const replaceOverlays = (overlays) => {\n//   overlayLayers.forEach(layer => {\n//     layerControl.removeLayer(layer)\n//     map.removeLayer(layer)\n//   })\n\n//   overlays = action.payload\n//   return state\n// }\n\nexport const removeAllOverlays = (state) => {\n  tileOverlays.forEach((layer) => {\n    layerControlRef.current.removeLayer(layer);\n    map.removeLayer(layer);\n  });\n};\n\nexport const panToLatLng = ([lat, lng]) => {\n  if (map) {\n    map.panTo([lat, lng]);\n  }\n};\n\n\nexport function Map(props) {\n  const { showEditControl, showInfoControl, info } = props;\n\n  const lcRef = useRef();\n\n  const sampleState = useSelector(state => state.samples)\n\n  useEffect(() => {\n    layerControlRef = lcRef;\n    setTimeout(() => {\n      addTileOverlays(tileOverlays)\n      addGeoJsonOverlay()\n    }, 400)\n    \n  }, []);\n\n\n  useEffect(() => {\n    if (sampleState.selected) {\n\n      let selected_sample = sampleState.geojson.features.filter(f => f.properties[idField] === sampleState.selected)[0]\n      let latlon = [...selected_sample.geometry.coordinates].reverse()\n      panToLatLng(latlon)\n\n    }\n  }, [sampleState.selected])\n\n  const displayMap = useMemo(\n    () => (\n      <MapContainer\n        center={[28.5973518, 83.54495724]}\n        zoom={8}\n        id=\"map\"\n        whenCreated={(m) => {\n          map = m;\n        }}\n      >\n        <LayersControl ref={lcRef}>\n          {/* base maps */}\n          {Object.entries(BASEMAPS).map(([name, basemap]) => (\n            <LayersControl.BaseLayer\n              name={name}\n              checked={name === defaultBaseMap}\n              key={name}\n            >\n              <TileLayer url={basemap.url} attribution={basemap.attribution} />\n            </LayersControl.BaseLayer>\n          ))}\n\n        </LayersControl>\n\n        {showEditControl ? <EditingControl /> : null}\n\n        {showInfoControl ? <InfoControl info={info} /> : null}\n      </MapContainer>\n    ),\n    [showEditControl, info]\n  );\n\n  return displayMap;\n}\n\nconst EditingControl = (props) => {\n  const editing = useSelector((state) => state.editing);\n  const dispatch = useDispatch();\n\n  const handleChangeEditing = (e) => {\n    dispatch(toggle());\n  };\n\n  const displayControl = useMemo(\n    () => (\n      <Button\n        variant={editing ? \"warning\" : \"light\"}\n        size=\"sm\"\n        onClick={handleChangeEditing}\n      >\n        Start Editing\n      </Button>\n    ),\n    [editing]\n  );\n\n  return (\n    <div className=\"leaflet-top start-50 top-0\">\n      <div className=\"leaflet-control leaflet-bar\">{displayControl}</div>\n    </div>\n  );\n};\n\nconst InfoControl = (props) => {\n  const { info } = props;\n  return (\n    <div className=\"leaflet-bottom leaflet-left\">\n      <div className=\"leaflet-control leaflet-bar info-board\">\n        {info}\n      </div>\n    </div>\n  );\n};\n\nconst ChartControl = (props) => {\n  const { render } = props;\n\n  return (\n    <div className=\"leaflet-bottom leaflet-left\">\n      <div className=\"leaflet-control leaflet-bar chart-board\">\n        {typeof render === 'function' && render()}\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default Map;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { dataList, featureList } from \"../../utils/constants\";\n\nconst initialDatasetState = {\n  name: \"COPERNICUS/S1_GRD\",\n  cloud: \"15\",\n  feature: \"VH\",\n  composite: \"median\",\n  composite_days: '15',\n  ascd: false,\n  desc: true,\n  boundary: \"CHITAWAN\",\n  boundary_file: null,\n  crop_mask: \"projects/testee-319020/assets/terai_agri_mask\",\n};\n\nexport const datasetSlice = createSlice({\n  name: \"dataset\",\n  initialState: initialDatasetState,\n  reducers: {\n    update: (state, action) => ({ ...state, ...action.payload }),\n    changeDataSource: (state, action) => {\n      let name = action.payload\n      state.name = name\n      if (name in dataList.radar) {\n        state.feature = 'VH'\n      } else if (name in dataList.optical) {\n        state.feature = 'NDVI'\n        state.cloud = \"15\"\n      }\n      return state\n    }\n  },\n});\n\nexport const { update, changeDataSource } = datasetSlice.actions;\n\nexport default datasetSlice.reducer;\n","import { useContext } from \"react\";\nimport { Card, Col, Form, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { dataList, featureList, districtList } from \"../utils/constants\";\nimport { update, changeDataSource } from \"../features/phenology/datasetSlice\";\n\nexport function SatelliteDataFilters(props) {\n  // const ctx = useContext(EmpiricalFormContext);\n  let { disabled } = props;\n\n  const datasetFilters = useSelector((state) => state.dataset);\n  const dispatch = useDispatch();\n\n  const handleChange = (field, value) => {\n    dispatch(update({ [field]: value }));\n  };\n\n  const handleDataChange = (e) => {\n    dispatch(changeDataSource(e.target.value));\n  };\n\n  return (\n    <Card className=\"mb-2 border-secondary\">\n      <Card.Header>\n        <h6 className=\"m-0 p-0\">\n          Satellite Dataset\n        </h6>\n      </Card.Header>\n      <Card.Body>\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_name\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Dataset\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={handleDataChange}\n              value={datasetFilters[\"name\"]}\n            >\n              {Object.entries(dataList).map(([key, value]) => (\n                <optgroup key={key} label={key}>\n                  {Object.entries(value).map(([k, v]) => (\n                    <option key={k} value={k}>\n                      {v}\n                    </option>\n                  ))}\n                </optgroup>\n              ))}\n            </Form.Select>\n          </Col>\n        </Form.Group>\n\n        {datasetFilters[\"name\"] in dataList.optical \n          ? (\n            <Form.Group\n              as={Row}\n              controlId={\"dataset_cloud\"}\n              className=\"align-items-center mb-2\"\n            >\n              <Form.Label column xs=\"auto\">\n                Cloud cover (%)\n              </Form.Label>\n              <Col>\n                <Form.Control\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"1\"\n                  value={datasetFilters[\"cloud\"]}\n                  onChange={(e) => handleChange(\"cloud\", e.target.value)}\n                />\n              </Col>\n            </Form.Group>\n          ) \n          : null\n        }\n\n        <Form.Group as={Row} controlId={\"dataset_orbit\"} className=\"mb-2\">\n          <Form.Label column xs={4}>\n            Orbit\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Check\n              type=\"checkbox\"\n              id={\"desc\"}\n              name={\"desc\"}\n              label=\"Descending\"\n              checked={datasetFilters[\"desc\"]}\n              onChange={(e) => handleChange(\"desc\", e.target.checked)}\n            />\n            <Form.Check\n              type=\"checkbox\"\n              id={\"ascd\"}\n              name={\"ascd\"}\n              label=\"Ascending\"\n              checked={datasetFilters[\"ascd\"]}\n              onChange={(e) => handleChange(\"ascd\", e.target.checked)}\n            />\n          </Col>\n        </Form.Group>\n\n\n        <Form.Group as={Row} controlId={\"dataset_feature\"} className=\"mb-2 align-items-center\">\n          <Form.Label column xs={4}>\n            Feature\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={(e) => handleChange(\"feature\", e.target.value)}\n              value={datasetFilters[\"feature\"]}\n            >\n              {datasetFilters[\"name\"] in dataList.radar\n                ? Object.entries(featureList.radar).map(([key, value]) => (\n                    <option key={key} value={key}>\n                      {value}\n                    </option>\n                  ))\n                : Object.entries(featureList.optical).map(([key, value]) => (\n                    <option key={key} value={key}>\n                      {value}\n                    </option>\n                  ))\n              }\n            </Form.Select>\n          </Col>\n        </Form.Group>\n\n        {/* {datasetFilters[\"composite\"] !== undefined ? ( */}\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_composite\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Composite Type\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={(e) => handleChange(\"composite\", e.target.value)}\n              value={datasetFilters[\"composite\"]}\n            >\n              {[\"minimum\", \"maximum\", \"median\", \"mean\", \"mode\"].map(\n                (type) => (\n                  <option value={type} key={type}>\n                    {type}\n                  </option>\n                )\n              )}\n            </Form.Select>\n          </Col>\n        </Form.Group>\n        {/* )  */}\n        {/* : null} */}\n\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_composite_days\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Composite Days\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Control\n              type=\"number\"\n              onChange={(e) => handleChange(\"composite_days\", e.target.value)}\n              value={datasetFilters[\"composite_days\"]}\n            >\n            </Form.Control>\n          </Col>\n        </Form.Group>\n        \n        \n      </Card.Body>\n    </Card>\n  );\n}\n\nexport const AuxDataFilters = (props) => {\n\n  const datasetFilters = useSelector((state) => state.dataset);\n  const dispatch = useDispatch();\n\n  const handleChange = (field, value) => {\n    dispatch(update({ [field]: value }));\n  };\n\n  return (\n    <Card className=\"mb-2 border-secondary\">\n      <Card.Header>\n        <h6 class=\"m-0 p-0\">\n          Auxiliary Datasets\n        </h6>\n      </Card.Header>\n      <Card.Body>\n      <Form.Group\n          as={Row}\n          controlId={\"dataset_boundary\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Boundary\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Select\n              onChange={(e) => handleChange(\"boundary\", e.target.value)}\n              value={datasetFilters[\"boundary\"]}\n            >\n              {Object.entries(districtList).map(([key, value]) => (\n                <option value={key} key={key}>\n                  {value}\n                </option>\n              ))}\n            </Form.Select>\n          </Col>\n        </Form.Group>\n\n        {datasetFilters[\"boundary\"] === \"upload\" ? (\n          <Form.Group\n            as={Row}\n            controlId={\"dataset_boundary_file\"}\n            className=\"align-items-center mb-2\"\n          >\n            <Form.Label column xs={4}>\n              Boundary file <span style={{ color: \"red\" }}>*</span>\n            </Form.Label>\n            <Col xs={8}>\n              <Form.Control\n                type=\"file\"\n                className=\"w-100 form-control\"\n                required\n                name=\"boundary_file\"\n                onChange={(e) =>\n                  handleChange(\n                    \"boundary_file\",\n                    URL.createObjectURL(e.target.files[0])\n                  )\n                }\n              />\n            </Col>\n          </Form.Group>\n        ) : null}\n\n        <Form.Group\n          as={Row}\n          controlId={\"dataset_cropmask\"}\n          className=\"mb-2 align-items-center\"\n        >\n          <Form.Label column xs={4}>\n            Crop Mask (GEE asset)\n          </Form.Label>\n          <Col xs={8}>\n            <Form.Control\n              type={\"text\"}\n              onChange={(e) => handleChange(\"crop_mask\", e.target.value)}\n              value={datasetFilters[\"crop_mask\"]}\n            />\n          </Col>\n        </Form.Group>\n      </Card.Body>\n    </Card>\n  )\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const SEASONS = {\n  sowing: \"sowing\", \n  peak: \"peak\", \n  harvesting: \"harvesting\"\n};\n\nconst initialState = Object.fromEntries(\n  Object.keys(SEASONS).map((season) => [\n    season,\n    {\n      on: true,\n      start: \"\",\n      end: \"\",\n      min: \"\",\n      max: \"\",\n    },\n  ])\n);\n\nconst reducers = Object.fromEntries(\n  Object.keys(SEASONS).map((season) => [\n    season,\n    (state, action) => {\n      state[season] = { ...state[season], ...action.payload }\n      return state\n    },\n  ])\n);\n\nexport const SEASONSlice = createSlice({\n  name: \"seasons\",\n  initialState,\n  reducers,\n});\n\nexport const actions = SEASONSlice.actions;\n\nexport default SEASONSlice.reducer;\n","import React from \"react\";\nimport { Card, Col, Form, Row } from \"react-bootstrap\";\n\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions } from \"../features/phenology/seasonSlice\";\n\nimport _ from \"lodash\"\n\nexport const SeasonFilterGroup = (props) => {\n  const { name, inputThres, readOnly } = props;\n\n  // use state and actions from redux\n  const appName = useSelector(state => state.appName)\n  const seasonFilter = useSelector(state => state.seasons[name])\n  const sampleState = useSelector(state => state.samples)\n  const dispatch = useDispatch()\n  const action = actions[name]\n\n  // update thresholds after each re-render\n  // useEffect(() => {\n  //   if (!seasonFilter.on) {\n  //     handleChange(\"min\", null);\n  //     handleChange(\"max\", null);\n  //     return;\n  //   }\n  //   // pre-check if all inputs are valid\n  //   if (sampleState.geojson.features.length === 0) return;\n  //   if (Date.parse(seasonFilter.start))\n  // })\n\n  const handleChange = (field, value) => {\n    dispatch(action({[field]: value}))\n  }\n\n  return (\n    <Card className=\"mb-2 border-secondary\">\n      <Row className=\"align-items-center gx-2 m-0 card-header\">\n        <Col xs=\"auto\">\n          <Form.Check\n            type=\"switch\"\n            id={`${name}_switch`}\n            aria-label={name}\n            checked={seasonFilter.on}\n            onChange={(e) => handleChange(\"on\", e.target.checked)}\n          />\n        </Col>\n        <Col xs=\"auto\">\n          <h6 className=\"m-0\">{name.charAt(0).toUpperCase() + name.slice(1)}</h6>\n        </Col>\n      </Row>\n      <fieldset id={`${name}_fields`} disabled={!seasonFilter.on}>\n        <Card.Body>\n          <Form.Group\n            as={Row}\n            className=\"mb-2\"\n            controlId={`${name}_start_fields`}\n          >\n            <Form.Label column sm={4}>\n              Start date <span style={{color: \"red\"}}>*</span>\n            </Form.Label>\n            <Col sm={8}>\n              <Form.Control\n                type=\"date\"\n                required\n                readOnly={readOnly}\n                name={`${name}_start`}\n                value={seasonFilter.start}\n                onChange={(e) => handleChange(\"start\", e.target.value)}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group\n            as={Row}\n            className=\"mb-2\"\n            controlId={`${name}_end_fields`}\n          >\n            <Form.Label column sm={4}>\n              End date <span style={{color: \"red\"}}>*</span>\n            </Form.Label>\n            <Col sm={8}>\n              <Form.Control\n                type=\"date\"\n                required\n                readOnly={readOnly}\n                name={`${name}_end`}\n                value={seasonFilter.end}\n                onChange={(e) => handleChange(\"end\", e.target.value)}\n              />\n            </Col>\n          </Form.Group>\n\n          <Form.Group\n            as={Row}\n            className=\"mb-2\"\n            // controlId={`${name}_threshold_fields`}\n          >\n            <Form.Label column sm={4}>\n              Threshold {inputThres ? <span style={{color: \"red\"}}>*</span> : null}\n            </Form.Label>\n            <Col sm={8}>\n              <Row className=\"gx-1 align-items-center\">\n                <Col>\n                  <Form.Control\n                    type=\"number\"\n                    required={inputThres}\n                    readOnly={!inputThres || readOnly}\n                    id={`${name}_min`}\n                    placeholder=\"min\"\n                    step=\"0.01\"\n                    name={`${name}_min`}\n                    value={seasonFilter.min}\n                    onChange={(e) => handleChange(\"min\", e.target.value)}\n                  />\n                </Col>\n                <Col sm=\"auto\">{\"≤ x ≤\"}</Col>\n                <Col>\n                  <Form.Control\n                    type=\"number\"\n                    required={inputThres}\n                    readOnly={!inputThres || readOnly}\n                    id={`${name}_max`}\n                    placeholder=\"max\"\n                    step=\"0.01\"\n                    name={`${name}_max`}\n                    value={seasonFilter.max}\n                    onChange={(e) => handleChange(\"max\", e.target.value)}\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Form.Group>\n        </Card.Body>\n      </fieldset>\n    </Card>\n  );\n}\n\nSeasonFilterGroup.propTypes = {\n  name: PropTypes.string.isRequired,\n  inputThres: PropTypes.bool.isRequired,\n};\n","import { useState } from \"react\"\nimport { Form, TabContainer, Row, Col, Nav, TabContent, TabPane, Button, Spinner, Dropdown, DropdownButton } from \"react-bootstrap\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { seasonNames } from '../../utils/constants'\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport L from 'leaflet'\nimport { map, layerControlRef, addTileOverlays, removeAllOverlays } from \"../LeafletMap\"\nimport { SatelliteDataFilters, AuxDataFilters } from \"../DataFilterGroup\";\nimport { SeasonFilterGroup } from \"../SeasonFilterGroup\";\n\nconst tabNames = {\n  tab1: \"Datasets\",\n  tab2: \"Seasons\"\n}\n\nexport const FilterPanel = (props) => {\n\n  const { setInfo } = props;\n\n  // state from redux store\n  const csrfToken = useSelector(state => state.csrfToken)\n  const datasetFilters = useSelector(state => state.dataset)\n  const seasonFilters = useSelector(state => state.seasons)\n  const editing = useSelector(state => state.editing)\n  const dispatch = useDispatch()\n\n  // local state\n  const [validated, setValidated] = useState(false)\n  // const [success, setSuccess] = useState(undefined); // undefined - normal; false - invalid; true - \n  const [loading, setLoading] = useState(false)\n\n  const [downloadUrl, setDownLoadUrl] = useState({})\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.currentTarget;\n    \n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      setValidated(true)\n      // setSuccess(false)\n      return\n    } \n    \n    // validate passed\n    setValidated(false)\n    // setSuccess(true)\n    // setTimeout(() => setSuccess(undefined), 2000)\n\n    const formData = new FormData()\n\n    let jsonData = {}\n    seasonNames.forEach(name => {\n      if (seasonFilters[name]['on']) {\n        jsonData[name] = _.cloneDeep(seasonFilters[name])\n        delete jsonData[name].on\n      }\n    })\n\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\n    if (jsonData['dataset'].boundary_file) {\n      formData.append('boundary_file', jsonData['dataset'].boundary_file)\n      delete jsonData['dataset'].boundary_file\n    } \n\n    formData.append('json', new Blob([JSON.stringify(jsonData)], {\n      type: 'application/json'\n    }));\n\n    \n    axios.post(\"empirical/\", formData, {\n      baseURL: process.env.PUBLIC_URL,\n      headers: {\n        \"X-CSRFToken\": csrfToken,\n      },\n      \n    }).then(response => {\n      let res_body = response.data\n\n      // add all new overlays\n      let overlays = []\n      Object.keys(res_body).forEach(key => {\n        let layer = new L.TileLayer(res_body[key].tile_url)\n        let overlay = {\n          layer: layer,\n          name: key,\n          url: res_body[key].download_url\n        }\n        overlays.push(overlay)\n\n        if (res_body[key].area) {\n          setInfo(\"Rice area: \" + res_body[key].area.toFixed(3) + \" ha\")\n        }\n      })\n      addTileOverlays(overlays)\n\n      setLoading(false)\n\n    }).catch(reason => {\n      setLoading(false)\n      alert(reason)\n    })\n\n    // set loading state\n    setLoading(true)\n\n    // remove all overlays\n    removeAllOverlays()\n  }\n\n  const handleExport = (key) => {\n    if (key === 'season') {\n      // Object.keys(downloadUrl).map(key => {\n      //   if (key !== \"combined\") {\n\n      //   }\n      // })\n    } else {\n\n    }\n  }\n  \n  return (\n    <div className=\"sidebar h-100 flex-column\">\n      <Form method=\"POST\" onSubmit={handleSubmit} noValidate validated={validated}>\n        <TabContainer defaultActiveKey={tabNames.tab1} unmountOnExit={false}>\n          <Row className=\"tabs-nav g-0\">\n            <Nav variant=\"pills\" className=\"h-100\">\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle w-100 h-100 h6\" eventKey={tabNames.tab1} >{tabNames.tab1}</Nav.Link>\n              </Col>\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle h-100 w-100 h6\" eventKey={tabNames.tab2} >{tabNames.tab2}</Nav.Link>\n              </Col>\n            </Nav>\n          </Row>\n          <Row className=\"tabs-content g-0 p-2\">\n            <Col>\n              <TabContent>\n                <TabPane eventKey={tabNames.tab1} >\n                  <fieldset >\n                    <SatelliteDataFilters />\n                    {/* {appName === \"empirical\" && <AuxDataFilters />} */}\n                    <AuxDataFilters />\n                  </fieldset>\n                </TabPane>\n                <TabPane eventKey={tabNames.tab2}>\n                  \n                  {seasonNames.map(name => (\n                    <SeasonFilterGroup name={name} key={name} inputThres={true} readOnly={loading} />\n                  ))}\n\n                  <div className=\"d-grid gap-2\">\n                    <Button type=\"submit\" variant={ loading ? \"secondary\" : \"primary\"} disabled={loading}>\n                      {loading ? (\n                        <div>\n                          Running...\n                          <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" ></Spinner>\n                        </div> \n                        ) \n                        : \n                        \"Run\"}\n                    </Button>\n\n                    <DropdownButton id=\"export-dropdown\" title=\"Export\" onSelect={(key, e) => handleExport(key)}>\n                      <Dropdown.Item eventKey=\"season\">Export each season</Dropdown.Item>\n                      <Dropdown.Item eventKey=\"combined\">Export combined</Dropdown.Item>\n                    </DropdownButton>\n                  </div>\n                  \n\n                </TabPane>\n              </TabContent>\n            </Col>\n          </Row>\n        </TabContainer>\n      </Form>\n    </div>\n  )\n}","import axios from \"axios\";\nimport _ from \"lodash\";\nimport { useContext, useState } from \"react\";\nimport { Button, Col, Dropdown, DropdownButton, Form, Nav, Row, Spinner, Tab, TabContainer, TabContent, TabPane, Tabs } from \"react-bootstrap\";\nimport { SeasonFilterGroup } from \"./SeasonFilterGroup\";\nimport { SatelliteDataFilters, AuxDataFilters } from \"./DataFilterGroup\";\nimport L from 'leaflet'\nimport { seasonNames } from '../utils/constants'\nimport { map, layerControlRef, addTileOverlays, removeAllOverlays } from \"./LeafletMap\"\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst tabNames = {\n  tab1: \"Datasets\",\n  tab2: \"Filters\"\n}\n\nexport function Sidebar(props) {\n\n  const { setInfo } = props;\n\n  const csrfToken = useSelector(state => state.csrfToken)\n  const datasetFilters = useSelector(state => state.dataset)\n  const seasonFilters = useSelector(state => state.seasons)\n  const editing = useSelector(state => state.editing)\n  const dispatch = useDispatch()\n  \n  const [validated, setValidated] = useState(false)\n  // const [success, setSuccess] = useState(undefined); // undefined - normal; false - invalid; true - \n  const [loading, setLoading] = useState(false)\n\n  const [downloadUrl, setDownLoadUrl] = useState({})\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.currentTarget;\n    \n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      setValidated(true)\n      // setSuccess(false)\n      return\n    } \n    \n    // validate passed\n    setValidated(false)\n    // setSuccess(true)\n    // setTimeout(() => setSuccess(undefined), 2000)\n\n    const formData = new FormData()\n\n    let jsonData = {}\n    seasonNames.forEach(name => {\n      if (seasonFilters[name]['on']) {\n        jsonData[name] = _.cloneDeep(seasonFilters[name])\n        delete jsonData[name].on\n      }\n    })\n\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\n    if (jsonData['dataset'].boundary_file) {\n      formData.append('file', jsonData['dataset'].boundary_file)\n      delete jsonData['dataset'].boundary_file\n    } \n\n    formData.append('json', new Blob([JSON.stringify(jsonData)], {\n      type: 'application/json'\n    }));\n\n    \n    axios.post(\"empirical/\", formData, {\n      baseURL: process.env.PUBLIC_URL,\n      headers: {\n        \"X-CSRFToken\": csrfToken,\n      },\n      \n    }).then(response => {\n      let res_body = response.data\n\n      // add all new overlays\n      let overlays = []\n      Object.keys(res_body).forEach(key => {\n        let layer = new L.TileLayer(res_body[key].tile_url)\n        let overlay = {\n          layer: layer,\n          name: key,\n          url: res_body[key].download_url\n        }\n        overlays.push(overlay)\n\n        if (res_body[key].area) {\n          setInfo(\"Rice area: \" + res_body[key].area + \" ha\")\n        }\n      })\n      addTileOverlays(overlays)\n\n      setLoading(false)\n\n    }).catch(reason => {\n      setLoading(false)\n      alert(reason)\n    })\n\n    // set loading state\n    setLoading(true)\n\n    // remove all overlays\n    removeAllOverlays()\n  }\n\n  const handleExport = (key) => {\n    if (key === 'season') {\n      // Object.keys(downloadUrl).map(key => {\n      //   if (key !== \"combined\") {\n\n      //   }\n      // })\n    } else {\n\n    }\n  }\n\n  return (\n    <div className=\"sidebar h-100 flex-column\">\n      <Form method=\"POST\" onSubmit={handleSubmit} noValidate validated={validated}>\n      <TabContainer defaultActiveKey={tabNames.tab1} unmountOnExit={false}>\n        <Row className=\"tabs-nav g-0\">\n          <Nav variant=\"pills\" className=\"h-100\">\n            <Col className=\"h-100 align-items-center p-1\">\n              <Nav.Link className=\"tab-title align-middle w-100 h-100 h6\" eventKey={tabNames.tab1} >{tabNames.tab1}</Nav.Link>\n            </Col>\n            <Col className=\"h-100 align-items-center p-1\">\n              <Nav.Link className=\"tab-title align-middle h-100 w-100 h6\" eventKey={tabNames.tab2} >{tabNames.tab2}</Nav.Link>\n            </Col>\n          </Nav>\n        </Row>\n        <Row className=\"tabs-content g-0 p-2\">\n          <Col>\n            <TabContent>\n              <TabPane eventKey={tabNames.tab1} >\n                <SatelliteDataFilters />\n                <AuxDataFilters />\n              </TabPane>\n              <TabPane eventKey={tabNames.tab2}>\n                \n                {seasonNames.map(name => (\n                  <SeasonFilterGroup name={name} key={name} inputThres={true} readOnly={loading} />\n                ))}\n\n                <div className=\"d-grid gap-2\">\n                  <Button type=\"submit\" variant={ loading ? \"secondary\" : \"primary\"} disabled={loading}>\n                    {loading ? (\n                      <div>\n                        Running...\n                        <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" ></Spinner>\n                      </div> \n                      ) \n                      : \n                      \"Run\"}\n                  </Button>\n\n                  <DropdownButton id=\"export-dropdown\" title=\"Export\" onSelect={(key, e) => handleExport(key)}>\n                    <Dropdown.Item eventKey=\"season\">Export each season</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"combined\">Export combined</Dropdown.Item>\n                  </DropdownButton>\n                </div>\n                \n\n              </TabPane>\n            </TabContent>\n          </Col>\n        </Row>\n      </TabContainer>\n      </Form>\n      \n    </div>\n  )\n}\n\nexport default Sidebar;","import PropTypes from 'prop-types'\nimport { useRef } from 'react'\n\nlet ismdwn = 0\n\nexport function SplitPanel(props) {\n\n  const {className, leftPanel, rightPanel} = props\n\n  const panel1 = useRef()\n  const panel2 = useRef()\n\n  function handleMouseDown(event) {\n    ismdwn = 1\n    document.body.addEventListener('mousemove', mV)\n    document.body.addEventListener('mouseup', end)\n  }\n\n  const mV = (e) => {\n    if (ismdwn === 1) {\n      panel1.current.style.flexBasis = Math.min(Number.parseInt(e.clientX), document.body.clientWidth-10) + \"px\"\n    } else {\n      end()\n    }\n  }\n  const end = (e) => {\n    ismdwn = 0\n    document.body.removeEventListener('mouseup', end)\n    document.body.removeEventListener('mousemove', mV)\n    // $('#separator').off('mousemove')\n  }\n\n  return (\n    <div className={\"h-100 \" + className} style={{\"display\": \"flex\"}}>\n      <div className=\"left-panel h-100\" ref={panel1} children={leftPanel}></div>\n\n      <div className=\"panel-separator\" onMouseDown={handleMouseDown}></div>\n\n      <div className=\"right-panel h-100 w-100\" ref={panel2} children={rightPanel}></div>\n\n    </div>\n  )\n\n}\n\nSplitPanel.propTypes = {\n  leftPanel: PropTypes.node,\n  rightPanel: PropTypes.node,\n}\n\nexport default SplitPanel","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const csrfTokenSlice = createSlice({\n  name: \"csrfToken\",\n  initialState: null,\n  reducers: {\n    setToken: (state, action) => action.payload\n  }\n})\n\nexport const { setToken } = csrfTokenSlice.actions\n\nexport default csrfTokenSlice.reducer","import React, { Fragment, useEffect } from \"react\"\nimport { useReducer, useState } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport AppStatusBar from \"../components/AppStatusBar\"\nimport Map, { geojsonLayer } from \"../components/LeafletMap\"\nimport { FilterPanel } from \"../components/panels/FilterPanel\"\nimport Sidebar from \"../components/Sidebar\"\nimport SplitPanel from \"../components/SplitPanel\"\nimport { APP_NAME, setAppName } from \"../features/phenology/appNameSlice\"\nimport { setToken } from \"../features/phenology/csrfTokenSlice\"\nimport { getCookie } from \"../utils/csrfToken\"\n\nexport function EmpiricalApp() {\n\n  const dispatch = useDispatch()\n\n  const [info, setInfo] = useState(\"Please run the app to show area of rice.\")\n\n  useEffect(() => {\n    dispatch(setAppName(APP_NAME.empirical))\n\n  }, [])\n\n\n  return (\n    <Fragment>\n      <AppStatusBar />\n      <SplitPanel \n        className=\"app-main\"\n        leftPanel={<FilterPanel setInfo={setInfo} />} \n        rightPanel={<Map showInfoControl={true} info={info} />} \n      />\n    </Fragment>\n  )\n}\n\nexport default EmpiricalApp;","import axios from \"axios\";\nimport { Fragment, useEffect, useState } from \"react\";\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\"\nimport { useSelector } from \"react-redux\";\nimport { BASEMAPS } from \"../utils/constants\";\nimport _ from \"lodash\"\n\nimport { idField } from \"./panels/SamplePanel\"\nimport { addTileOverlays } from \"./LeafletMap\";\nimport L from \"leaflet\"\n\nconst smallMapObjs = {\n  \"Jan\": null, \n  \"Feb\": null, \n  \"Mar\": null, \n  \"Apr\": null, \n  \"May\": null, \n  \"Jun\": null, \n  \"Jul\": null, \n  \"Aug\": null, \n  \"Sep\": null, \n  \"Oct\": null, \n  \"Nov\": null, \n  \"Dec\": null\n}\n\nconst SmallMap = (props) => {\n\n  const { month, point } = props\n\n  return (\n    <MapContainer\n      center={point || [28.5973518, 83.54495724]}\n      zoom={15}\n      className=\"small-map\"\n      zoomControl={false}\n      whenCreated={(m) => smallMapObjs[month] = m}\n    >\n      <TileLayer url={BASEMAPS[\"Google Satellite\"].url} attribution={BASEMAPS[\"Google Satellite\"].attribution} />\n      \n      {point && <Marker position={point}/>}\n    </MapContainer>\n  )\n}\n\nexport const MapCarousel = (props) => {\n\n  const sampleSlice = useSelector(state => state.samples)\n  let selectedSample = sampleSlice.geojson.features.filter(f => f.properties[idField] === sampleSlice.selected)[0]\n\n  const { date_start, date_end } = props \n\n  // load false color basemaps for small maps\n  useEffect(() => {\n    // TODO: change year to reflect the true year\n    let year = 2019 \n    axios.get(\"phenology/monthly_composite\", {\n      baseURL: process.env.PUBLIC_URL,\n      params: {\n        year: year,\n      }\n    }).then(res => {\n      let body = res.data\n      Object.keys(smallMapObjs).forEach(month => {\n        const url = body[month]\n        let layer = new L.TileLayer(url)\n        layer.addTo(smallMapObjs[month])\n      })\n    })\n  }, [])\n\n  // move \n  useEffect(() => {\n    if (sampleSlice.selected) {\n      Object.values(smallMapObjs).forEach(m => {\n        m.panTo([selectedSample.geometry.coordinates[1], selectedSample.geometry.coordinates[0]])\n      })\n    }\n  }, [sampleSlice.selected])\n\n  return (\n    <div className=\"map-carousel h-100 d-flex overflow-auto\">\n      {Object.keys(smallMapObjs).map(month => (\n        <div className=\"p-1 d-flex flex-column\" style={{width:250, flex: \"0 0 auto\"}}>\n          <div>{month}</div>\n          <SmallMap point={selectedSample && [...selectedSample.geometry.coordinates].reverse()} month={month}/>\n        </div>\n      ))}\n    </div>\n  )\n}","import { useContext } from \"react\"\nimport Map from \"../LeafletMap\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { MapCarousel } from \"../MapCarousel\"\n\nexport default function MapPanel(props) {\n\n  const { showEditControl, showInfoControl, info } = props\n\n  // const sampleGeoJson = useSelector(state => state.samples)\n\n  return (\n    <div className=\"w-100 h-100 d-flex flex-column\">\n      <div className=\"map-container\">\n        <Map showEditControl={showEditControl} showInfoControl={showInfoControl} info={info} />\n      </div>\n      <div className=\"map-carousel-container\">\n        <MapCarousel />\n      </div>\n    </div>\n  )\n}","import { Button, Col, Form, Nav, Row, Spinner, TabContainer, TabContent, TabPane } from \"react-bootstrap\";\nimport { SatelliteDataFilters, AuxDataFilters } from \"../DataFilterGroup\";\nimport { seasonNames } from '../../utils/constants'\nimport { SeasonFilterGroup } from \"../SeasonFilterGroup\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\"\nimport * as d3 from \"d3\"\nimport { layerControlRef } from \"../LeafletMap\";\nimport { replace, setResult } from \"../../features/phenology/sampleSlice\";\nimport { idField } from \"./SamplePanel\";\nimport { useEffect } from \"react\";\nimport { actions } from \"../../features/phenology/seasonSlice\"\n\nconst tabNames = {\n  tab1: \"Datasets\",\n  tab2: \"Seasons\"\n}\n\nconst removeOutliers = (arr) => {\n  let first = d3.quantile(arr, 0.25)\n  let third = d3.quantile(arr, 0.75)\n  let interquatile = third - first\n  let upperbound = third + interquatile * 1.5\n  let lowerbound = first - interquatile * 1.5\n  return arr.filter(element => element > lowerbound && element < upperbound)\n}\n\nexport default function SettingsPanel(props) {\n\n  const csrfToken = useSelector(state => state.csrfToken)\n  const datasetFilters = useSelector(state => state.dataset)\n  const seasonFilters = useSelector(state => state.seasons)\n  const sampleState = useSelector(state => state.samples)\n  const editing = useSelector(state => state.editing)\n  const dispatch = useDispatch()\n\n  const [loading, setLoading] = useState(false)\n  const [validated, setValidated] = useState(false)\n\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.currentTarget;\n    \n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      setValidated(true)\n      // setSuccess(false)\n      return\n    } \n\n    setValidated(false)\n\n    // const formData = new FormData()\n\n    let jsonData = {}\n    // seasonNames.forEach(name => {\n    //   if (seasonFilters[name]['on']) {\n    //     jsonData[name] = _.cloneDeep(seasonFilters[name])\n    //     delete jsonData[name].on\n    //   }\n    // })\n\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\n    delete jsonData.dataset.boundary_file\n\n    let samples = _.cloneDeep(sampleState.geojson)\n\n    // get rid of existing phenology info\n    samples.features.forEach(feature => {\n      Object.keys(feature.properties).forEach(key => {\n        if (key.endsWith('_feature')) {\n          delete feature.properties[key]\n        }\n      })\n    })\n\n    jsonData['samples'] = samples\n    \n    // send request\n    axios.post(\"phenology/\", jsonData, {\n      baseURL: process.env.PUBLIC_URL,\n      headers: {\n        \"X-CSRFToken\": csrfToken,\n      },\n      \n    }).then(response => {\n      let res_body = response.data\n\n      // update the properties of the existing samples\n      // let new_samples = samples\n      res_body.features.forEach(feature => {\n        let cur_feature = samples.features.filter(v => v.properties[idField] === feature.properties[idField])[0]\n        cur_feature.properties = feature.properties\n      })\n      dispatch(replace(samples))\n\n      setLoading(false)\n\n    }).catch(reason => {\n      setLoading(false)\n      alert(reason)\n    })\n\n    // set loading state\n    setLoading(true)\n\n  }\n\n  const handleRefresh = (e) => {\n    if (sampleState.geojson.features.length === 0) {\n      alert(\"Please upload the ground truth samples first.\")\n      return;\n    }\n\n    Object.keys(seasonFilters).forEach(season => { \n      let seasonFilter = seasonFilters[season];\n      if (seasonFilter.on) {\n        let start_date = new Date(seasonFilter.start)\n        let end_date = new Date(seasonFilter.end)\n\n        let candidates = []\n\n        sampleState.geojson.features.forEach(sample => {\n          // let candidates = []\n          if (sample.properties[sampleState.classProperty.name] !== sampleState.classProperty.positiveValue) {\n            return;\n          }\n          Object.entries(sample.properties).forEach(([key, val]) => {\n            if (key.endsWith('_feature')) {\n              let words = key.split('_')\n              let date = new Date(Number.parseInt(words[words.length - 2])).getTime()\n              if (start_date.getTime() <= date && date <= end_date.getTime()) {\n                candidates.push(val)\n              }\n            }\n          })\n        })\n\n        if (candidates.length === 0) {\n          return;\n        } \n\n        // compute mean, std\n        let filteredCandidates = removeOutliers(candidates)\n        let mean = _.sum(filteredCandidates) / filteredCandidates.length;\n        let std = Math.sqrt(_.sum(_.map(filteredCandidates, v => Math.pow(v - mean, 2))) / filteredCandidates.length);\n        \n        let action = actions[season];\n        dispatch(action({\"min\": (mean - std).toFixed(2), \"max\": (mean + std).toFixed(2)}))\n      }\n    })\n  }\n  \n  return (\n    <div className=\"sidebar h-100 flex-column\">\n      \n        <TabContainer defaultActiveKey={tabNames.tab1} unmountOnExit={false}>\n          <Row className=\"tabs-nav g-0\">\n            <Nav variant=\"pills\" className=\"h-100\">\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle w-100 h-100 h6\" eventKey={tabNames.tab1} >{tabNames.tab1}</Nav.Link>\n              </Col>\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle h-100 w-100 h6\" eventKey={tabNames.tab2} >{tabNames.tab2}</Nav.Link>\n              </Col>\n            </Nav>\n          </Row>\n\n          <Row className=\"tabs-content g-0 p-2\">\n            <Col>\n              <TabContent>\n                <TabPane eventKey={tabNames.tab1} >\n                  <Form method=\"POST\" noValidate validated={validated} onSubmit={handleSubmit}>\n                  <SatelliteDataFilters />\n                  {/* <AuxDataFilters /> */}\n                  \n                    <Button className=\"w-100\" type=\"submit\" variant={ loading ? \"secondary\" : \"primary\" } disabled={loading}>\n                      {loading \n                        ? (\n                          <div>\n                            Running...\n                            <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" ></Spinner>\n                          </div> \n                          ) \n                        : \n                        \"Save settings\"\n                      }\n                    </Button>\n                  </Form>\n                </TabPane>\n\n                <TabPane eventKey={tabNames.tab2} >\n\n                  {seasonNames.map(name => (\n                    <SeasonFilterGroup key={name} name={name} inputThres={false} readOnly={editing} />\n                  ))}\n\n                  <Button className=\"w-100\" onClick={handleRefresh} >Refresh</Button>\n                  \n                </TabPane>\n\n              </TabContent>\n            </Col>\n          </Row>\n        </TabContainer>\n      \n      \n    </div>\n  )\n}","import { createContext, Fragment } from \"react\"\nimport { useEffect, useReducer, useState } from \"react\"\nimport { Col, Container, Row } from \"react-bootstrap\"\nimport MapPanel from \"../components/panels/MapPanel\"\nimport SamplePanel from \"../components/panels/SamplePanel\"\nimport SettingsPanel from \"../components/panels/SettingsPanel\"\nimport Sidebar from \"../components/Sidebar\"\nimport { TriplePanel } from \"../components/TriplePanel\"\nimport { useDispatch } from \"react-redux\"\nimport AppStatusBar from \"../components/AppStatusBar\"\nimport { FilterPanel } from \"../components/panels/FilterPanel\"\nimport { useSelector } from \"react-redux\"\nimport { setAppName, APP_NAME } from \"../features/phenology/appNameSlice\"\n\nexport default function PhenologyApp() {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setAppName(APP_NAME.phenology))\n  }, [])\n\n  return (\n    <Fragment>\n      <AppStatusBar />\n      <Container fluid className=\"h-100 app-main pb-0 ps-0 pe-0\">\n        <Row className=\"h-100 gx-0\">\n          <Col >\n            <SettingsPanel />\n            {/* <FilterPanel appName={appName} /> */}\n          </Col>\n          <Col xs={\"7\"} >\n            <MapPanel showEditControl={false} showInfoControl={false}/>\n          </Col>\n          <Col >\n            <SamplePanel />\n          </Col>\n        </Row>\n      </Container>\n    </Fragment>\n  )\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const MODEL_SPECS = {\n  \"Random Forest\": {\n    numberOfTrees: {\n      type: \"int\",\n      required: true,\n      default: 200,\n      description: \"The number of decision trees to create.\"\n    },\n    variablesPerSplit: {\n      type: \"int\",\n      default: null,\n      description: \"The number of variables per split. If unspecified, uses the square root of the number of variables.\"\n    },\n    minLeafPopulation: {\n      type: \"int\",\n      default: 1,\n      description: \"Only create nodes whose training set contains at least this many points.\"\n    },\n    bagFraction: {\n      type: \"float\",\n      default: 0.5,\n      description: \"The fraction of input to bag per tree.\"\n    },\n    maxNodes: {\n      type: \"int\",\n      default: null,\n      description: \"The maximum number of leaf nodes in each tree. If unspecified, defaults to no limit.\"\n    },\n    seed: {\n      type: \"int\",\n      default: 0,\n      description: \"The randomization seed.\"\n    }\n  },\n  \"Gradient Tree Boost\": {\n  }\n}\n\nconst initialState = {\n  \"start_date\": null,\n  \"end_date\": null,\n  \"training_ratio\": 0.7,\n  \"model\": \"\",\n  \"model_specs\": {}\n}\n\nconst classificationSlice = createSlice({\n  name: \"classification\",\n  initialState: initialState,\n  reducers: {\n    update: (state, action) => ({ ...state, ...action.payload }),\n    updateModelSpecs: (state, action) => {\n      return {...state, \"model_specs\": {...state.model_specs, ...action.payload}}\n    },\n    changeModel: (state, action) => {\n      if (action.payload && action.payload !== state.model) {\n        state.model_specs = {}\n        Object.keys(MODEL_SPECS[action.payload]).forEach(key => {\n          if (\"default\" in MODEL_SPECS[action.payload][key]) {\n            state.model_specs[key] = MODEL_SPECS[action.payload][key][\"default\"]\n          } else {\n            state.model_specs[key] = null\n          }\n        })\n        \n      }\n\n      state.model = action.payload\n    }\n  }\n})\n\nexport const { update, updateModelSpecs, changeModel} = classificationSlice.actions\n\nexport default classificationSlice.reducer","import { useState } from \"react\"\nimport { Form, TabContainer, Row, Col, Nav, TabContent, TabPane, Button, Spinner, Dropdown, DropdownButton, Card, OverlayTrigger, Popover } from \"react-bootstrap\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { seasonNames } from '../../utils/constants'\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport L from 'leaflet'\nimport { map, layerControlRef, addTileOverlays, removeAllOverlays } from \"../LeafletMap\"\nimport { SatelliteDataFilters, AuxDataFilters } from \"../DataFilterGroup\";\n\n// import {update as updateDatasetFilters } from \"../../features/phenology/datasetSlice\"\nimport { update, changeModel, updateModelSpecs, MODEL_SPECS } from \"../../features/phenology/classificationSlice\"\nimport { InfoCircle, InfoCircleFill, InfoSquare, QuestionCircle } from \"react-bootstrap-icons\";\nimport { SampleContainer } from \"./SamplePanel\";\n\nconst tabNames = {\n  tab1: \"Datasets\",\n  tab2: \"Samples\",\n  tab3: \"Classification\",\n}\n\nexport const ClassificationPanel = (props) => {\n\n  const { setInfo } = props;\n\n  // state from redux store\n  const csrfToken = useSelector(state => state.csrfToken)\n  const datasetFilters = useSelector(state => state.dataset)\n  // const seasonFilters = useSelector(state => state.seasons)\n  const classificationState = useSelector(state => state.classification)\n  const sampleState = useSelector(state => state.samples)\n  const dispatch = useDispatch()\n\n  // local state\n  const [validated, setValidated] = useState(false)\n  // const [success, setSuccess] = useState(undefined); // undefined - normal; false - invalid; true - \n  const [loading, setLoading] = useState(false)\n\n  const [downloadUrl, setDownLoadUrl] = useState({})\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const form = e.currentTarget;\n    \n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      setValidated(true)\n      // setSuccess(false)\n      return\n    } \n    \n    // validate passed\n    setValidated(false)\n    // setSuccess(true)\n    // setTimeout(() => setSuccess(undefined), 2000)\n\n    const formData = new FormData()\n\n    let jsonData = {}\n\n    jsonData['dataset'] = _.cloneDeep(datasetFilters)\n    if (jsonData['dataset'].boundary_file) {\n      formData.append('boundary_file', jsonData['dataset'].boundary_file)\n      delete jsonData['dataset'].boundary_file\n    } \n    jsonData['classification'] = _.cloneDeep(classificationState)\n    jsonData['classification']['class_property'] = sampleState['classProperty']\n    let model_specs = jsonData['classification']['model_specs']\n    for (let key in model_specs) {\n      if (model_specs[key] === null) {\n        delete model_specs[key]\n      }\n    }\n\n\n    formData.append('json', new Blob([JSON.stringify(jsonData)], {\n      type: 'application/json'\n    }));\n    \n    if (sampleState.geojson.features.length !== 0) {\n      formData.append('samples', new Blob([JSON.stringify(sampleState.geojson)], {\n        type: 'application/json'\n      }));\n    }\n    \n    axios.post(\"classification/\", formData, {\n      baseURL: process.env.PUBLIC_URL,\n      headers: {\n        \"X-CSRFToken\": csrfToken,\n      },\n      \n    }).then(response => {\n      let res_body = response.data\n\n      // add all new overlays\n      let overlays = []\n      Object.keys(res_body).forEach(key => {\n        let layer = new L.TileLayer(res_body[key].tile_url)\n        let overlay = {\n          layer: layer,\n          name: key,\n          url: res_body[key].download_url\n        }\n        overlays.push(overlay)\n\n        if (res_body[key].area) {\n          setInfo(\"Rice area: \" + res_body[key].area.toFixed(3) + \" ha\")\n        }\n      })\n\n      addTileOverlays(overlays)\n\n      setLoading(false)\n\n    }).catch(reason => {\n      setLoading(false)\n      alert(reason)\n    })\n\n    // set loading state\n    setLoading(true)\n\n    // remove all overlays before loading results\n    removeAllOverlays()\n  }\n\n  const handleExport = (key) => {\n    if (key === 'season') {\n      // Object.keys(downloadUrl).map(key => {\n      //   if (key !== \"combined\") {\n\n      //   }\n      // })\n    } else {\n\n    }\n  }\n\n  const handleChange = (field, value) => {\n    if (field === \"model\") {\n      dispatch(changeModel(value))\n    } else if (field.startsWith(\"model\")) {\n      dispatch(updateModelSpecs({ [field.split('.')[1]]: value}))\n    } else {\n      dispatch(update({ [field]: value }))\n    }\n    \n  }\n\n  const handleRun = () => {\n\n  }\n  \n  return (\n    <div className=\"sidebar h-100 flex-column\">\n      <Form method=\"POST\" onSubmit={handleSubmit} noValidate validated={validated}>\n        <TabContainer defaultActiveKey={tabNames.tab1} unmountOnExit={false}>\n          <Row className=\"tabs-nav g-0\">\n            <Nav variant=\"pills\" className=\"h-100\">\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle w-100 h-100 h6\" eventKey={tabNames.tab1} >{tabNames.tab1}</Nav.Link>\n              </Col>\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle h-100 w-100 h6\" eventKey={tabNames.tab2} >{tabNames.tab2}</Nav.Link>\n              </Col>\n              <Col className=\"h-100 align-items-center p-1\">\n                <Nav.Link className=\"tab-title align-middle h-100 w-100 h6\" eventKey={tabNames.tab3} >{tabNames.tab3}</Nav.Link>\n              </Col>\n            </Nav>\n          </Row>\n          <Row className=\"tabs-content g-0 p-2\">\n            <Col>\n              <TabContent>\n                <TabPane eventKey={tabNames.tab1} >\n                  <fieldset >\n                    <SatelliteDataFilters />\n                    {/* {appName === \"empirical\" && <AuxDataFilters />} */}\n                    <AuxDataFilters />\n                  </fieldset>\n                </TabPane>\n\n                <TabPane eventKey={tabNames.tab2}>         \n                  <SampleContainer />\n                </TabPane>\n\n                <TabPane eventKey={tabNames.tab3} >\n                  <Card className=\"mb-2 border-secondary\">\n                    <Card.Header>\n                      <h6 className=\"m-0 p-0\">\n                        Image Date Range\n                      </h6>\n                    </Card.Header>\n                    <Card.Body>\n                      <Form.Group\n                        as={Row}\n                        controlId={\"date_start\"}\n                        className=\"mb-2 align-items-center\"\n                      >\n                        <Form.Label column xs={4}>\n                          Start Date:\n                        </Form.Label>\n                        <Col xs={8}>\n                          <Form.Control\n                            type=\"date\"\n                            value={classificationState[\"start_date\"]}\n                            onChange={(e) => handleChange(\"start_date\", e.target.value)}\n                          />\n                        </Col>\n                      </Form.Group>\n\n                      <Form.Group\n                        as={Row}\n                        controlId={\"date_end\"}\n                        className=\"mb-2 align-items-center\"\n                      >\n                        <Form.Label column xs={4}>\n                          End Date:\n                        </Form.Label>\n                        <Col xs={8}>\n                          <Form.Control\n                            type=\"date\"\n                            value={classificationState[\"end_date\"]}\n                            onChange={(e) => handleChange(\"end_date\", e.target.value)}\n                          />\n                        </Col>\n                      </Form.Group>\n\n                    </Card.Body>\n                  </Card>\n\n                  <Card className=\"mb-2 border-secondary\">\n                    <Card.Header>\n                      <h6 className=\"m-0 p-0\">\n                        Classification Details\n                      </h6>\n                    </Card.Header>\n                    <Card.Body>\n\n                      <Form.Group\n                        as={Row}\n                        controlId={\"train_test_ratio\"}\n                        className=\"mb-2 align-items-center\"\n                      >\n                        <Form.Label column xs={4}>\n                          Training Ratio: \n                        </Form.Label>\n                        <Col xs={8}>\n                          <Form.Control\n                            type=\"number\"\n                            step={\"0.05\"}\n                            value={classificationState[\"training_ratio\"]}\n                            onChange={(e) => handleChange(\"training_ratio\", e.target.value)}\n                          />\n                        </Col>\n\n                      </Form.Group>\n\n                      <Form.Group\n                        as={Row}\n                        controlId={\"model\"}\n                        className=\"mb-2 align-items-center\"\n                      >\n                        <Form.Label column xs={4}>\n                          Model:\n                        </Form.Label>\n                        <Col xs={8}>\n                          <Form.Select\n                            value={classificationState[\"model\"]}\n                            onChange={(e) => handleChange(\"model\", e.target.value)}\n                          >\n                            <option key=\"\"></option>\n                            {Object.keys(MODEL_SPECS).map(name => (\n                              <option key={name}>{name}</option>\n                            ))}\n                            {/* <option key=\"random_forest\">Random Forest</option>\n                            <option key=\"gradient_tree_boost\">Gradient Tree Boost</option> */}\n                          </Form.Select>\n                        </Col>\n                      </Form.Group>\n\n                      {classificationState[\"model\"] && Object.keys(MODEL_SPECS[classificationState[\"model\"]]).map(key => (\n                        <ModelSpecItem specName={key} handleChange={handleChange}/>\n                      ))}\n\n                    </Card.Body>\n                  </Card>\n\n                  <Button className=\"w-100\" type=\"submit\">Run</Button>\n                  \n                </TabPane>\n\n              </TabContent>\n            </Col>\n          </Row>\n        </TabContainer>\n      </Form>\n    </div>\n  )\n}\n\nconst ModelSpecItem = ({specName, handleChange}) => {\n\n  const classificationState = useSelector(state => state.classification)\n\n  let selectedModel = classificationState[\"model\"]\n\n  const handleModelSpecChange = (e) => {\n    handleChange(`model.${specName}`, e.target.value)\n  }\n\n  let renderLabel = () => {\n    return (\n      <Form.Label column xs={4}>\n        {specName}\n        {\"  \"}\n        <OverlayTrigger\n          trigger=\"hover\"\n          placement=\"right\"\n          overlay={\n            <Popover>\n              <Popover.Body>\n                {MODEL_SPECS[selectedModel][specName][\"description\"]}\n              </Popover.Body>\n            </Popover>\n          }\n        >\n          <InfoCircle />\n        </OverlayTrigger>\n      </Form.Label>\n    )\n  }\n\n  let renderInput = () => {\n    switch (MODEL_SPECS[selectedModel][specName][\"type\"]) {\n      case \"int\":\n        return (\n          <Form.Control\n            type=\"number\"\n            placeholder=\"Leave blank to use default value\"\n            step={\"1\"}\n            value={classificationState[\"model_specs\"][specName]}\n            onChange={handleModelSpecChange}\n          />\n        )\n      case \"float\":\n        return (\n          <Form.Control\n            type=\"number\"\n            placeholder=\"Leave blank to use default value\"\n            step={\"0.1\"}\n            value={classificationState[\"model_specs\"][specName]}\n            onChange={handleModelSpecChange}\n          />\n        )\n      case \"string\":\n        return (\n          <Form.Control\n            type=\"text\"\n            value={classificationState[\"model_specs\"][specName]}\n            onChange={handleModelSpecChange}\n          />\n        )\n      case \"select\":\n        return (\n          <Form.Select \n            value={classificationState[\"model_specs\"][specName]}\n            onChange={handleModelSpecChange}\n          >\n          {MODEL_SPECS[selectedModel][specName][\"options\"].map(option => (\n            <option key={option}>{option}</option>\n          ))}\n          </Form.Select>\n        )\n      default:\n        return (<></>);\n    }\n  }\n\n  return (\n    <Form.Group\n      as={Row}\n      controlId={specName}\n      className=\"mb-2 align-items-center\"\n    >\n      {renderLabel()}\n      <Col xs={8}>\n        {renderInput()}\n      </Col>\n    </Form.Group>\n  )\n\n}","import { createContext, Fragment } from \"react\"\nimport { useEffect, useReducer, useState } from \"react\"\nimport { Col, Container, Row } from \"react-bootstrap\"\nimport MapPanel from \"../components/panels/MapPanel\"\nimport SamplePanel from \"../components/panels/SamplePanel\"\nimport SettingsPanel from \"../components/panels/SettingsPanel\"\nimport Sidebar from \"../components/Sidebar\"\nimport { TriplePanel } from \"../components/TriplePanel\"\nimport { useDispatch } from \"react-redux\"\nimport AppStatusBar from \"../components/AppStatusBar\"\nimport { FilterPanel } from \"../components/panels/FilterPanel\"\nimport { useSelector } from \"react-redux\"\nimport { setAppName, APP_NAME } from \"../features/phenology/appNameSlice\"\nimport SplitPanel from \"../components/SplitPanel\"\nimport Map from \"../components/LeafletMap\"\nimport { ClassificationPanel } from \"../components/panels/ClassificationPanel\"\n\nexport default function ClassificationApp() {\n\n  const dispatch = useDispatch()\n\n  const [info, setInfo] = useState(\"Please run the app to show area of rice.\")\n\n  useEffect(() => {\n    dispatch(setAppName(APP_NAME.classification))\n  }, [])\n\n  return (\n    <Fragment>\n      <AppStatusBar />\n      {/* <Container fluid className=\"h-100 app-main pb-0 ps-0 pe-0\"> */}\n      <SplitPanel \n        className=\"app-main\"\n        leftPanel={<ClassificationPanel setInfo={setInfo} />} \n        rightPanel={<Map showInfoControl={true} info={info} />} \n      />\n      {/* </Container> */}\n    </Fragment>\n  )\n}\n","import { Container, Nav, Navbar } from 'react-bootstrap';\nimport { BrowserRouter, NavLink, Route, Switch } from 'react-router-dom'\nimport Header from './components/Header'\nimport Home from './pages/Home';\nimport EmpiricalApp from './pages/EmpiricalApp';\nimport './App.css'\nimport PhenologyApp from './pages/PhenologyApp';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getCookie } from './utils/csrfToken';\nimport { setToken } from './features/phenology/csrfTokenSlice';\nimport ClassificationApp from './pages/ClassificationApp';\n\n\nfunction App() {\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    let token = getCookie('csrftoken')\n    dispatch(setToken(token))\n  }, [])\n\n  return (\n    <div className=\"d-flex flex-column vh-100\">\n      <Header />\n\n      <main className=\"h-100\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/empirical\">\n          <EmpiricalApp />\n        </Route>\n        <Route exact path=\"/phenology\">\n          <PhenologyApp />\n        </Route>\n        <Route exact path=\"/classification\">\n          <ClassificationApp />\n        </Route>\n      </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","export function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport csrfTokenReducer from \"./features/phenology/csrfTokenSlice\";\nimport datasetReducer from './features/phenology/datasetSlice'\nimport sampleReducer from \"./features/phenology/sampleSlice\";\nimport seasonReducer from \"./features/phenology/seasonSlice\";\nimport editingReducer from \"./features/phenology/editingSlice\";\nimport appStatusReducer from \"./features/phenology/appStatusSlice\";\nimport appNameReducer from \"./features/phenology/appNameSlice\";\nimport classificationReducer from \"./features/phenology/classificationSlice\";\n\nexport default configureStore({\n    reducer: {\n        csrfToken: csrfTokenReducer,\n        dataset: datasetReducer,\n        seasons: seasonReducer,\n        samples: sampleReducer,\n        editing: editingReducer,\n        appStatus: appStatusReducer,\n        appName: appNameReducer,\n        classification: classificationReducer,\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}